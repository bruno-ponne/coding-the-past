<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-12T15:24:02+02:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Treemaps In R</title><link href="http://localhost:4000/2024/05/09/Treemaps-in-R.html" rel="alternate" type="text/html" title="Treemaps In R" /><published>2024-05-09T00:00:00+02:00</published><updated>2024-05-09T00:00:00+02:00</updated><id>http://localhost:4000/2024/05/09/Treemaps-in-R</id><content type="html" xml:base="http://localhost:4000/2024/05/09/Treemaps-in-R.html"><![CDATA[<p><br /></p>

<h2 id="1-what-is-a-treemap">1. What is a treemap?</h2>

<p>A treemap consists of a set of rectangles which represent different categories in your data and whose size is defined by a numeric value associated with the respective category. For example, a treemap could illustrate the continents on Earth, sized according to their population. For a deeper analysis, treemaps can include nested rectangles, that is, categories within categories. In our example, within each continent rectangle, new rectangles could represent countries and their populations.</p>

<p><img src="/assets/images/lesson_21_01.png" alt="Visual representation of a treemap." /></p>

<hr />

<p><br /></p>

<h2 id="2-when-should-you-use-a-treemap">2. When should you use a treemap?</h2>

<p>One of the main advantages of a treemap is that it allows for the interpretation of a large amount of data at a single glance. It is well-suited to show part-to-whole relationships and to highlight the hierarchies in your data. Do not use treemaps when the variable defining the size of rectangles presents little variation.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-how-to-plot-a-treemap-in-r">3. How to plot a treemap in R?</h2>

<p>To exemplify a treemap in R, we will use the <code class="language-plaintext highlighter-rouge">Cholera</code> dataset, which contains that on the mortality caused by cholera in England in the years 1848-1849. This data comes from the <code class="language-plaintext highlighter-rouge">histdata</code> R package. Moreover, you will need to install the <code class="language-plaintext highlighter-rouge">treemap</code> package, one of the alternatives to plot a treemap in R. We will also use <code class="language-plaintext highlighter-rouge">RColorBrewer</code> package for a color palette and <code class="language-plaintext highlighter-rouge">dplyr</code> to transform the data.</p>

<p><br /></p>

<p>After you install the packages, load them and explore the structure of the <code class="language-plaintext highlighter-rouge">Cholera</code> data frame.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-21-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-21-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">HistData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">treemap</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">

</span><span class="c1"># Load the data to your R environment</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"Cholera"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check the dataframe structure</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">Cholera</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>We would like to create a treemap in which we have bigger rectangles representing the regions of London and smaller rectangles representing the districts within their respective region. The size of the rectangles will inform us about the mortality caused by cholera in a given region and district. For us, the following variables are important:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">region</code> will define our outer rectangles (higher hierarchy) and will represent regions of London (West, North, Central, South, Kent);</li>
  <li><code class="language-plaintext highlighter-rouge">district</code> will define our inner rectangles (lower hierarchy), representing the districts of London;</li>
  <li><code class="language-plaintext highlighter-rouge">cholera_drate</code> represents deaths caused by cholera per 10,000 inhabitants in 1849 and will define the size of rectangles</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To learn more about the data, please see the
        
        <a href="https://cran.r-project.org/web/packages/HistData/HistData.pdf" target="_blank"> package documentation here.</a>
        
    </div>
</div>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">treemap</code> function is used to plot the treemap in R. The main arguments necessary are:</p>

<ul class="conclusion-list">
  <li>the first argument is the dataframe;</li>
  <li><code class="language-plaintext highlighter-rouge">index</code> defines the two levels of hierarchy in our plot: region and district;</li>
  <li><code class="language-plaintext highlighter-rouge">vSize</code> specifies the death rate to define the size of our rectangles;</li>
  <li><code class="language-plaintext highlighter-rouge">vColor</code> specifies the region to define the color of our higher hierarchy rectangles;</li>
  <li><code class="language-plaintext highlighter-rouge">type</code> informs the function that <code class="language-plaintext highlighter-rouge">vColor</code> is a categorical variable;</li>
  <li>the remaining parameters are used to adjust format options like color palette and position of elements.</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To further format your treemap, check more options in the
        
        <a href="https://cran.r-project.org/web/packages/treemap/treemap.pdf" target="_blank"> package documentation.</a>
        
    </div>
</div>

<p><br />
<span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-21-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-21-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">treemap</span><span class="p">(</span><span class="n">Cholera</span><span class="p">,</span><span class="w">
        </span><span class="n">index</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"region"</span><span class="p">,</span><span class="s2">"district"</span><span class="p">),</span><span class="w">
        </span><span class="n">vSize</span><span class="o">=</span><span class="s2">"cholera_deaths"</span><span class="p">,</span><span class="w">
        </span><span class="n">vColor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"region"</span><span class="p">,</span><span class="w">
        </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"categorical"</span><span class="p">,</span><span class="w">
        </span><span class="c1"># formatting options:</span><span class="w">
        </span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">brewer.pal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Accent"</span><span class="p">),</span><span class="w">
        </span><span class="n">align.labels</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="w">
          </span><span class="nf">c</span><span class="p">(</span><span class="s2">"left"</span><span class="p">,</span><span class="w"> </span><span class="s2">"top"</span><span class="p">),</span><span class="w"> 
          </span><span class="nf">c</span><span class="p">(</span><span class="s2">"right"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span><span class="w">
        </span><span class="p">),</span><span class="w">     
        </span><span class="n">border.col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">
        </span><span class="n">bg.labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">255</span><span class="p">,</span><span class="w">
        </span><span class="n">position.legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_21_02.png" alt="Treemap plotted in R" /></p>

<p><br /></p>

<p><strong>Note that Kent is the region with the largest death rate, followed by Southern London. Moreover, districts like Lambeth and Bethnal Green were especially affected by the disease. This treemap is a powerful tool to give you a general picture of the data at first glance.</strong></p>

<p><br /></p>

<p><strong>If you have any questions, please feel free to comment below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>A treemap is very useful to represent hierarchical relations in your data and provide a quick overall picture of your data;</li>
  <li>Plotting a treemap in R can be easily accomplished with the <code class="language-plaintext highlighter-rouge">treemap</code> package.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><summary type="html"><![CDATA[Explore how to effectively use a treemap in R to visualize hierarchical data and analyze part-to-whole relationships. This guide covers what a treemap is, when to use it, and a step-by-step tutorial on plotting with the treemap package.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_21.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_21.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unveiling Roman Amphitheaters with a ggplot2 violin plot</title><link href="http://localhost:4000/2024/02/09/ggplot2-violin-plot.html" rel="alternate" type="text/html" title="Unveiling Roman Amphitheaters with a ggplot2 violin plot" /><published>2024-02-09T00:00:00+01:00</published><updated>2024-02-09T00:00:00+01:00</updated><id>http://localhost:4000/2024/02/09/ggplot2-violin-plot</id><content type="html" xml:base="http://localhost:4000/2024/02/09/ggplot2-violin-plot.html"><![CDATA[<p><br /></p>

<h2 id="1-what-is-a-violin-plot">1. What is a violin plot?</h2>

<p>A violin plot is a mirrored density plot that is rotated 90 degrees as shown in the picture. It depicts the distribution of numeric data.</p>

<p><img src="/assets/images/lesson_20_01.png" alt="Visual description of what a violin plot is. First a density curve is shown. Second, a mirrored version of it is shown and lastly it is rotated by 90 degrees." /></p>

<hr />

<p><br /></p>

<h2 id="2-when-should-you-use-a-violin-plot">2. When should you use a violin plot?</h2>

<p>A violin plot is useful to compare the distribution of a numeric variable across different subgroups in a sample. For instance, the distribution of heights of a group of people could be compared across gender with a violin plot.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-how-to-code-a-ggplot2-violin-plot">3. How to code a ggplot2 violin plot?</h2>

<p>First, map the numeric variable whose distribution you would like to analyze to the x position aesthetic in <code class="language-plaintext highlighter-rouge">ggplot2</code>. Second, map the variable you want to use to separate your sample in different groups to the y position aesthetic. This is done with <code class="language-plaintext highlighter-rouge">aes(x = variable_of_interest, y = dimension)</code> inside the <code class="language-plaintext highlighter-rouge">ggplot()</code> function. The last step is to add the geom_violin() layer.</p>

<p><br /></p>

<p>To exemplify these steps, we will examine the capacity of Roman amphitheaters across different regions of the Roman Empire. The data for this comes from the <a href="https://github.com/sfsheath/cawd">cawd R package</a>, maintained by Professor Sebastian Heath. This package contains several datasets about the Ancient World, including one about the Roman Amphitheaters. To install the package, use <code class="language-plaintext highlighter-rouge">devtools::install_github("sfsheath/cawd")</code>.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Learn more about Roman amphitheaters in this informative article by Laura Klar, Department of Greek and Roman Art, The Metropolitan Museum of Art:
        
        <a href="https://www.metmuseum.org/toah/hd/tham/hd_tham.htm" target="_blank"> Theater and Amphitheater in the Roman World</a>
        
    </div>
</div>

<p><br /></p>

<p>After loading the package, use <code class="language-plaintext highlighter-rouge">data()</code> to see the available data frames. We will be using the <code class="language-plaintext highlighter-rouge">ramphs</code> dataset. It contains characteristics of the Roman amphitheaters. For this example, we will use the column 2 (title), column 7 (capacity) and column 8 (mod.country), which specifies the modern country where the amphitheater was located. We will also consider only the three modern countries with the largest number of amphitheaters - Tunisia, France or Italy. The code below loads and filters the relevant data.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-20-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-20-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">cawd</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Store the dataset in df1</span><span class="w">
</span><span class="n">df1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ramphs</span><span class="w">

</span><span class="c1"># Select all rows of relevant columns</span><span class="w">
</span><span class="n">df2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df1</span><span class="p">[</span><span class="w"> </span><span class="p">,</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">)]</span><span class="w">

</span><span class="c1"># Filter only the rows where modern country is either Tunisia, France or Italy</span><span class="w">
</span><span class="n">df3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df2</span><span class="p">[</span><span class="n">df2</span><span class="o">$</span><span class="n">mod.country</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Tunisia"</span><span class="p">,</span><span class="w"> </span><span class="s2">"France"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Italy"</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="c1"># Delete NAs</span><span class="w">
</span><span class="n">df4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">na.omit</span><span class="p">(</span><span class="n">df3</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot a basic ggplot2 violin plot</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mod.country</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">capacity</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_violin</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_20_02.png" alt="Basic violin plot" /></p>

<p><br /></p>

<p>We can further customize this plot to make it look better and fit this page theme. In the code below we improve the following aspects:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">geom_violin(color = "#FF6885", fill = "#2E3031", size = 0.9)</code> changes in the color and size of line and fill of the violin plot;</li>
  <li><code class="language-plaintext highlighter-rouge">geom_jitter(width = 0.05, alpha = 0.2, color = "gray")</code> adds the data points jittered to avoid overplotting and show where the points are concentrated;</li>
  <li><code class="language-plaintext highlighter-rouge">coord_flip()</code> flips the two axis so that is more evident that a violin plot is simply a mirrored density curve;</li>
  <li>the other geom layes add title, labels and a new theme to the plot.</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To learn more about geom_jitter, please see this
        
        <a href="https://ggplot2.tidyverse.org/reference/geom_jitter.html" target="_blank"> link.</a>
        
    </div>
</div>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-20-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-20-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mod.country</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">capacity</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_violin</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#2E3031"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.9</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_jitter</span><span class="p">(</span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.05</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Roman Amphitheaters"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Modern Country"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Capacity of Spectators"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">coord_flip</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
      </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
      </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
      </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Eliminates grids:</span><span class="w">
      </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
      </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
      </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_20_03.png" alt="Final violin plot" /></p>

<p><br /></p>

<p><strong>Note that amphitheaters in the territory of modern Tunisia tended to have less variation in their capacity and most of them were below 10,000 spectators. On the other hand, amphitheaters in the Italian Peninsula exhibit greater variation.</strong></p>

<p><br /></p>

<p><strong>Can you guess what the outlier on the very right of the Italian distribution is? Yes! It’s the Flavian Amphitheater at Rome, also known as the Colosseum, with an impressive capacity of 50,000 people. If you have any questions, please feel free to comment below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>A violin plot, a type of density curve, is useful for exploring data distribution;</li>
  <li>Coding a ggplot2 violin plot can be easily accomplished with <code class="language-plaintext highlighter-rouge">geom_violin()</code>.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="ggplot2" /><summary type="html"><![CDATA[Discover Roman amphitheaters through ggplot2 violin plots. Learn data visualization and uncover ancient architectural secrets. Perfect for R users.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_20.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_20.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Explore art with SQL and pd.read_sql_query</title><link href="http://localhost:4000/2024/01/25/SQL-with-Python.html" rel="alternate" type="text/html" title="Explore art with SQL and pd.read_sql_query" /><published>2024-01-25T00:00:00+01:00</published><updated>2024-01-25T00:00:00+01:00</updated><id>http://localhost:4000/2024/01/25/SQL-with-Python</id><content type="html" xml:base="http://localhost:4000/2024/01/25/SQL-with-Python.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Have you ever tried to load a large file in Python or R? Sometimes, when we have file sizes in the order of gigabytes, you may experience problems of performance with your program taking an unusually long time to load the data. <a href="https://en.wikipedia.org/wiki/SQL">SQL</a>, or Structured Query Language, is used to deal with larger data files stored in relational databases and is widely used in the industry and even in research. Apart from being more efficient to prepare data, in your journey, you might encounter data sources whose main form of access is through SQL.</p>

<p><br /></p>

<p>In this lesson you will learn how to use SQL in Python to retrieve data from a relational data base of the <a href="https://www.nga.gov/">National Gallery of Art (US)</a>. You will also learn how to use a relational database management system (RDBMS) and pd.read_sql_query to extract data from it in Python.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The <a href="https://github.com/NationalGalleryOfArt/opendata">database</a> used in this lesson is made available by <a href="https://www.nga.gov/">National Gallery of Art (US)</a> under a Creative Commons Zero license. The dataset contains data about more than 130,000 artworks and their artists since the Middle Ages until the present day.</p>

<p><br /></p>

<p>It is a wonderful resource to study history and art. Variables available include the title of the artwork, dimensions, author, description, location, country where it was produced, the year the artist started the work and the year he or she finished it. These variables are only some examples, but there is much more to explore.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-download-and-install-postgresql-and-pgadmin">2. Download and install PostgreSQL and pgAdmin</h2>

<p><a href="https://www.postgresql.org/">PostgreSQL</a> is a free and very popular relational database management system. It stores and manages the tables contained in a database. Please, consult this <a href="https://www.postgresqltutorial.com/postgresql-getting-started/">guide</a> to install it in your computer.</p>

<p><br /></p>

<p>After you install PostgreSQL, you will need to connect to the Postgre database server. In this tutorial, we will be using the <a href="https://www.pgadmin.org/download/">pgAdmin</a> application to establish this connection. It is a visual and intuitive interface and makes many operations easier to execute. The <a href="https://www.postgresqltutorial.com/postgresql-getting-started/">guide above</a> will also guide you through the process of connecting to your local database. In the next steps, after being connected to your local database server, we will learn how to create a database that will store the National Gallery Dataset.</p>

<p><br /></p>

<h2 id="3-creating-the-database-and-its-tables">3. Creating the database and its tables</h2>

<p>After you are connected to the server, click “Databases” with the right mouse button and choose “Create” and “Database…” as shown in the image below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_01.png" alt="How to create a database with pgAdmin" /></p>

<p><br /></p>

<p>Next, give a title to your database as shown in the figure below. In our case, it will be called “art_db”. Click “Save” and it is all set!</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_02.png" alt="Naming your database in pgAdmin" /></p>

<p><br /></p>

<p>With the database ‘art_bd’ selected, click the ‘Query Tool’ as shown below.</p>

<p><img src="/assets/images/lesson_19_03.png" alt="Where to find the query tool in pgAdmin" /></p>

<p><br /></p>

<p>This will open a field where you can type SQL code. Our objective is to create the first table of our database, which will contain the content of ‘objects.csv’ available in the GitHub account of the National Gallery of Art, provided in the Data section above.</p>

<p><br /></p>

<p>To create a table, we must specify the name and the variable type for each variable in the table. The SQL command to create a table is quite intuitive: CREATE TABLE name_of_your_table. Copy the code below and paste it in the window opened by the ‘Query Tool’. The code specify each variable of the objects table. This table contains information on each artwork available in the collection.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-1">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">objects</span> <span class="p">(</span>
    <span class="n">objectID</span>                    <span class="nb">integer</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">accessioned</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">accessionnum</span>                  <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">locationid</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">title</span>                         <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">displaydate</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
    <span class="n">beginyear</span>                     <span class="nb">integer</span><span class="p">,</span>
    <span class="n">endyear</span>                       <span class="nb">integer</span><span class="p">,</span>
    <span class="n">visualbrowsertimespan</span>         <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">medium</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">dimensions</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">inscription</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">markings</span>                      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">attributioninverted</span>           <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span>
    <span class="n">attribution</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span>
    <span class="n">provenancetext</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">creditline</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">classification</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">subclassification</span>             <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">visualbrowserclassification</span>   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">parentid</span>                      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">isvirtual</span>                     <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">departmentabbr</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">portfolio</span>                     <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">series</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">850</span><span class="p">),</span>
    <span class="n">volume</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">850</span><span class="p">),</span>
    <span class="n">watermarks</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">512</span><span class="p">),</span>
    <span class="n">lastdetectedmodification</span>      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">wikidataid</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">customprinturl</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="p">);</span></code></pre></figure>


</div>

<p><br /></p>

<p>The last step is to load the data from the <em>csv file</em> into this table. This can be done through the ‘COPY’ command as shown below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-2">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">COPY</span> <span class="n">objects</span> <span class="p">(</span><span class="n">objectid</span><span class="p">,</span> <span class="n">accessioned</span><span class="p">,</span> <span class="n">accessionnum</span><span class="p">,</span> <span class="n">locationid</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">displaydate</span><span class="p">,</span> <span class="n">beginyear</span><span class="p">,</span> <span class="n">endyear</span><span class="p">,</span> <span class="n">visualbrowsertimespan</span><span class="p">,</span> <span class="n">medium</span><span class="p">,</span> <span class="n">dimensions</span><span class="p">,</span> <span class="n">inscription</span><span class="p">,</span> <span class="n">markings</span><span class="p">,</span> <span class="n">attributioninverted</span><span class="p">,</span> <span class="n">attribution</span><span class="p">,</span> <span class="n">provenancetext</span><span class="p">,</span> <span class="n">creditline</span><span class="p">,</span> <span class="n">classification</span><span class="p">,</span> <span class="n">subclassification</span><span class="p">,</span> <span class="n">visualbrowserclassification</span><span class="p">,</span> <span class="n">parentid</span><span class="p">,</span> <span class="n">isvirtual</span><span class="p">,</span> <span class="n">departmentabbr</span><span class="p">,</span> <span class="n">portfolio</span><span class="p">,</span> <span class="n">series</span><span class="p">,</span> <span class="n">volume</span><span class="p">,</span> <span class="n">watermarks</span><span class="p">,</span> <span class="n">lastdetectedmodification</span><span class="p">,</span> <span class="n">wikidataid</span><span class="p">,</span> <span class="n">customprinturl</span><span class="p">)</span> 
<span class="k">FROM</span> <span class="s1">'C:/temp/objects.csv'</span> 
<span class="k">DELIMITER</span> <span class="s1">','</span> 
<span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span></code></pre></figure>


</div>

<p><br /></p>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Download the "objects.csv" file and save it in the desired folder. Note however, that sometimes your system might block access to this file via pgAdmin. Therefore I saved it in the "temp" folder. In any case, change the path in the code above to match where you saved the "objects.csv" file.
        
    </div>
</div>

<p><br /></p>

<p>Great! Now you should have your first table loaded to your database. The complete database includes more than 15 tables. However, we will only use two of them for this example, as shown in the scheme below. Note that the two tables relate to each other through the key variable <em>objectid</em>.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_04.png" alt="Database scheme and relations" /></p>

<p><br /></p>

<p>To load the “objects_terms” table, please repeat the same procedure with the code below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-3">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">objects_terms</span> <span class="p">(</span>
    <span class="n">termid</span>             <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="n">objectid</span>           <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="n">termtype</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">term</span>               <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
    <span class="n">visualbrowsertheme</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">visualbrowserstyle</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="p">);</span>


<span class="k">COPY</span> <span class="n">objects_terms</span> <span class="p">(</span><span class="n">termid</span><span class="p">,</span> <span class="n">objectid</span><span class="p">,</span> <span class="n">termtype</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">visualbrowsertheme</span><span class="p">,</span> <span class="n">visualbrowserstyle</span><span class="p">)</span>
<span class="k">FROM</span> <span class="s1">'C:/temp/objects_terms.csv'</span> 
<span class="k">DELIMITER</span> <span class="s1">','</span> 
<span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-exploring-the-data-with-sql-commands">4. Exploring the data with SQL commands</h2>

<p>Click the ‘Query Tool’ to start exploring the data. First, select which variables you would like to include in your analysis. Second, you tell SQL in which table this variables are. The code below selects the variables <em>title</em> and <em>attribution</em> from the <em>objects</em> table. It also limits the result to 5 observations.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-4">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">attribution</span>
<span class="k">FROM</span> <span class="n">objects</span>
<span class="k">LIMIT</span> <span class="mi">5</span></code></pre></figure>


</div>
<p><br /></p>

<p>Now, we would like to know what are the different kinds of classification in this dataset. To achieve that, we have to select the <em>classification</em> variable, but including only distinct values.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-5">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="k">DISTINCT</span><span class="p">(</span><span class="n">classification</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">objects</span></code></pre></figure>


</div>

<p><br /></p>

<p>The result tells us that there are 11 classifications: “Decorative Art”, “Drawing”, “Index of American Design”, “Painting”, “Photograph”, “Portfolio”, “Print”, “Sculpture”, “Technical Material”, “Time-Based Media Art” and “Volume”.</p>

<p><br /></p>

<p>Finally, let us group the artworks by classification and count the number of objects in each category. <code class="language-plaintext highlighter-rouge">COUNT(*)</code> will count the total of items in the groups defined by <code class="language-plaintext highlighter-rouge">GROUP BY</code>. When you select a variable you can give it a new name with <code class="language-plaintext highlighter-rouge">AS</code>. Finally, the command <code class="language-plaintext highlighter-rouge">ORDER BY</code> orders the classification by number of items in a descending order (DESC).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-6">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="n">classification</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">n_items</span>
<span class="k">FROM</span> <span class="n">objects</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">classification</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">n_items</span> <span class="k">DESC</span></code></pre></figure>


</div>

<p><br /></p>

<p>Note that prints is the largest classification, followed by photographs.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-using-pdread_sql_query-to-access-data">5. Using pd.read_sql_query to access data</h2>

<p>Now that you have your SQL database working, it is time to access it with Python. Before using Pandas, we have to connect Python to our SQL database. We will do that with <code class="language-plaintext highlighter-rouge">psycopg2</code>, a very popular PostgreSQL adapter for Python. Please, install it with <code class="language-plaintext highlighter-rouge">pip install psycopg2</code>.</p>

<p><br /></p>

<p>We use the <code class="language-plaintext highlighter-rouge">connect</code> method of <code class="language-plaintext highlighter-rouge">psycopg2</code> to establish the connection. It takes 4 main arguments:</p>

<ul class="conclusion-list">
  <li>host: in our case, the database is hosted locally, so we will pass <em>localhost</em> to this parameter. Note, however, that we could specify an IP if the server was external;</li>
  <li>database: the name given to your SQL database, <em>art_db</em>;</li>
  <li>user: user name required to authenticate;</li>
  <li>password: your database password.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">psycopg2</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">psycopg2</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span>
    <span class="n">host</span><span class="o">=</span><span class="s">"localhost"</span><span class="p">,</span>
    <span class="n">database</span><span class="o">=</span><span class="s">"art_db"</span><span class="p">,</span>
    <span class="n">user</span><span class="o">=</span><span class="s">"postgres"</span><span class="p">,</span>
    <span class="n">password</span><span class="o">=</span><span class="s">"*******"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The next step is to store our SQL query in a string Python variable. The query below performs a <a href="https://www.geeksforgeeks.org/sql-left-join/">LEFT JOIN</a> with the two tables in our database. The operation uses the variable <code class="language-plaintext highlighter-rouge">objectid</code> to join the two tables. In practice we are selecting the titles, authors (attribution), classification - we keep only “Painting” with a <a href="https://www.w3schools.com/sql/sql_where.asp">WHERE</a> command -, and term - we filter only terms that specify the “Style” of the painting.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">command</span> <span class="o">=</span> <span class="s">''' SELECT o.title, o.attribution, o.classification, ot.term
                FROM objects as o
                LEFT JOIN objects_terms as ot ON o.objectid = ot.objectid
                WHERE classification = 'Painting' AND termtype = 'Style' '''</span></code></pre></figure>


</div>

<p><br /></p>

<p>Finally, we can extract the data. Use the <code class="language-plaintext highlighter-rouge">cursor()</code> method of <code class="language-plaintext highlighter-rouge">conn</code> to be able to “type” your SQL query. Pass the command variable and connection object to 
<code class="language-plaintext highlighter-rouge">pd.read_sql_query</code> and it will return a Pandas dataframe with the data we selected. Next, commit and close cursor and connections.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-9')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-9">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># open cursor to insert our query
</span><span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>

<span class="c1"># use pd.read_sql_query to query our database and get the result in a pandas dataframe
</span><span class="n">paintings</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_sql_query</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">conn</span><span class="p">)</span>

<span class="c1"># save any changes to the database
</span><span class="n">conn</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>

<span class="c1"># close cursor and connection
</span><span class="n">cur</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<h2 id="6-visualizing-the-most-popular-styles">6. Visualizing the most popular styles</h2>

<p>From the data we gathered from our database, we would like to check which are the 10 most popular art styles in our data, by number of paintings. We can use the <code class="language-plaintext highlighter-rouge">value_counts()</code> method of the column <code class="language-plaintext highlighter-rouge">term</code> to count how many paintings are classified in each style.</p>

<p><br /></p>

<p>The result is a Pandas Series where the index contains the styles and the values contain the quantities of paintings of the respective style. The remaining code produces an horizontal bar plot showing the top 10 styles by number of paintings. If you would like to learn more about data visualization with <code class="language-plaintext highlighter-rouge">matplotlib</code>, please consult the lesson <a href="/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html">Storytelling with Matplotlib - Visualizing historical data</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-10')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-10">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">top_10_styles</span> <span class="o">=</span> <span class="n">paintings</span><span class="p">[</span><span class="s">'term'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">top_10_styles</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">top_10_styles</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"The Most Popular Styles"</span><span class="p">)</span>

<span class="c1"># inverts y axis
</span><span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>

<span class="c1"># eliminates grids
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># set ticks' colors to white    
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># set font colors
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>   

<span class="c1"># eliminates top, left and right borders and sets the bottom border color to white
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"bottom"</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">"white"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>Note that Realist, Baroque and Renaissance are the most popular art styles in our dataset.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_05.png" alt="The Top 10 Art Styles" /></p>

<p><br /></p>

<p><strong>Please feel free to share your thoughts and questions below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-conclusions">6. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>It is possible to create a SQL database from csv files and access it with Python;</li>
  <li>psycopg2 enables connection between Python and your SQL database;</li>
  <li>pd.read_sql_query can be used to extract data into a Pandas dataframe.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="statistics" /><category term="sql" /><summary type="html"><![CDATA[Learn to integrate Python with SQL for art data analysis using pd.read_sql_query in this insightful lesson on managing large datasets efficiently.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_19.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_19.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chi-square distribution and test in R</title><link href="http://localhost:4000/2023/12/04/Chi-square-distribution-in-R.html" rel="alternate" type="text/html" title="Chi-square distribution and test in R" /><published>2023-12-04T00:00:00+01:00</published><updated>2023-12-04T00:00:00+01:00</updated><id>http://localhost:4000/2023/12/04/Chi-square-distribution-in-R</id><content type="html" xml:base="http://localhost:4000/2023/12/04/Chi-square-distribution-in-R.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Was there an association or relationship between gender and the verdicts in investigations in 18th-century London? If an inquest concerned a man, did this fact influence the final verdict of the investigation?</p>

<p><br /></p>

<p>In this lesson we will answer these questions employing a chi-square test and the data explored in the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a>. You will learn what degrees of freedom are and how to harness the power of the chi-square distribution to infer relationships in historical London.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The <a href="https://github.com/sharonhoward/ll-coroners">dataset</a> used in this lesson is made available by <a href="https://sharonhoward.org/index.html">Sharon Howard</a>. This dataset documents a range of Westminster inquests conducted between 1760 and 1799. Inquests were mostly investigations into deaths under circumstances that were sudden, unexplained, or suspicious. Please, check the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a> for more information.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-why-is-the-chi-square-distribution-useful-for-us">2. Why is the chi-square distribution useful for us?</h2>

<p>The chi-square distribution is useful because it is the basis for testing the independence of two categorical variables. When we perform this test, the statistic we calculate follows a chi-square distribution. This enables us to determine the probability of observing a specific test statistic in our analytical sample under a certain hypothesis.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A test statistic is a summary of your sample, reducing your dataset to a single value that enables hypothesis testing.
        
    </div>
</div>

<p><br /></p>

<p>It’s not essential to know the function below, but understanding that the probability density function of a chi-square distribution follows this formula is beneficial. In the following steps we will write R code to generate a chi-square curve with <em>n</em> degrees of freedom and now you know that actually what R will compute is the function below with the <em>n</em> and <em>x</em> interval that you pass to the function. Note that f(0) = 0 and that  \(\Gamma\) is the <a href="https://en.wikipedia.org/wiki/Gamma_function">gamma function</a>.</p>

<p><br /></p>

\[f(x) = \frac{1}{2^{\frac{n}{2}} \Gamma(\frac{n}{2})}x^{\frac{n}{2}-1}e^{-\frac{x}{2}}\]

<p><br /></p>

<p>The area under this function gives us the probability of an interval of chi-squares happening. Fortunately, R has a function <code class="language-plaintext highlighter-rouge">dchisq(x, df)</code> that provides the chi-square density function. In the code below, we plot three chi-square distributions with 4, 8 and 16 degrees of freedom:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>to make it easier to plot the curves with color depending on the degrees of freedom, we create a data frame with three variables: x (from 0 to 50 in 0.1 steps); y (the result of the function f(n,x) above) and df (n degrees of freedom);</li>
  <li>in R, the chi-square density function is calculated with <code class="language-plaintext highlighter-rouge">dchisq</code>;</li>
  <li>color aesthetic is mapped to df (degrees of freedom) and to make sure ggplot uses discrete colors we transform degrees of freedom into a factor;</li>
  <li><code class="language-plaintext highlighter-rouge">scale_color_discrete</code> is used to give a name to the legend and <code class="language-plaintext highlighter-rouge">theme_coding_the_past()</code> is our theme available here: <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization with ggplot2’</a>.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-18-1">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">


</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">)</span><span class="w">

</span><span class="n">y1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">y2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">)</span><span class="w">
</span><span class="n">y3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w">

</span><span class="n">df1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y1</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">df2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y2</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">)</span><span class="w">
</span><span class="n">df3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y3</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">df1</span><span class="p">,</span><span class="w"> </span><span class="n">df2</span><span class="p">,</span><span class="w"> </span><span class="n">df3</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">df</span><span class="p">)))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_discrete</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DF"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Density Function"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Chi-square"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_18_01.png" alt="Chi-square distribution curves with different degrees of freedom" /></p>

<p><br /></p>

<p>Note that as the degrees of freedom increase, the chi-square distribution increasingly resembles a normal distribution. With fewer degrees of freedom, the distribution exhibits more asymmetry.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-degrees-of-freedom-in-a-chi-square-test">3. Degrees of freedom in a chi-square test</h2>

<p>As the plot above demonstrates, degrees of freedom are crucial as they determine the shape of our chi-square distribution. But what exactly are degrees of freedom?</p>

<p><br /></p>

<p>Essentially, they represent the number of independent pieces of information allowed to vary in a system. For instance, in a contingency table, the degrees of freedom refer to the number of cells that can be varied, considering the total values observed in our sample. Is this concept a bit complex? I have created a video to illustrate this concept more clearly.</p>

<p><br /></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/HWYepBHFDwk?si=rhmShSTV22EaHg2S" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p><br /></p>

<p>In a contingency table, degrees of freedom (DF) are calculated with the expression below, where <em>nrows</em> and <em>ncolumns</em> are the numbers of rows and columns, respectively.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A contingency table, or crosstab, presents the counts for the combination of two categorical variables.
        
        <a href="https://statisticsbyjim.com/basics/contingency-table/" target="_blank"> Read more here.</a>
        
    </div>
</div>

<p><br /></p>

\[DF = (nrows - 1)(ncolumns - 1)\]

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-how-to-estimate-a-contingency-table-under-the-null-hypothesis">4. How to estimate a contingency table under the null hypothesis?</h2>

<p>Now that you’re familiar with the chi-square distribution and understand how to calculate degrees of freedom for a chi-square test, let’s explore how to derive our test statistic. Our aim is to determine if there’s an association between two categorical variables. Therefore, our alternative hypothesis (<em>H1</em>) posits that these two variables are dependent. Conversely, the <em>null</em> hypothesis (<em>H0</em>) suggests that the variables are independent.</p>

<p><br /></p>

<p>In our case, we’re investigating the potential association between gender and verdict variables. To examine our contingency table, please run the following code. For an in-depth explanation of what this code accomplishes, refer to the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a></p>

<p><br /></p>

<p><em>H0</em>: There is no association between gender and verdict.</p>

<p><em>H1</em>: There is association between gender and verdict.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-18-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">showtext</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s2">"wa_coroners_inquests_v1-1.tsv"</span><span class="p">)</span><span class="w">

</span><span class="n">df_prep</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"-"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recode</span><span class="p">(</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="s2">"suicide (delirious)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (felo de se)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (insane)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">))</span><span class="w">

</span><span class="n">table_ver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">df_prep</span><span class="o">$</span><span class="n">verdict</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_18_02.png" alt="Contingency table of gender versus verdict" /></p>

<p><br /></p>

<p><br /></p>

<p>What would the above table appear like if the null hypothesis were true? In other words, if gender and verdict were truly independent, how would we calculate the expected values for each cell in that table? It’s important to remember that when events are independent, their probabilities are not influenced by each other. This principle is key to calculating the expected values in such a scenario.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_18_03.png" alt="Probability of two independent events happening" /></p>

<p><br /></p>

<p>For instance, if we assume that the cause of death and gender are independent, we can calculate the probability of observing a case where a woman had an accidental death by multiplying the probability of the individual being a woman by the probability of an accidental death occurring.  Once you’ve determined this probability, you can then multiply it by the total number of individuals in the sample to estimate the expected count for that specific cell in the table. This procedure is shown below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_18_04.png" alt="Expected value calculation example" /></p>

<p><br /></p>

<p>The calculation for the other cells in the table follows the same methodology. It’s worth noting that many textbooks present the following formula to calculate the expected values, which is based on the logic we’ve just discussed. In this formula, <em>RT</em> stands for row total; <em>CT</em> for column total; and <em>TT</em> for table total. You do not have to know this formula if you understood the underlying logic we explained earlier.</p>

<p><br /></p>

\[E = \frac{RT \times CT}{TT}\]

<p><br /></p>

<p>After you calculate all the expected values, it is time to calculate our test statistic.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-calculating-chi-square-in-r">5. Calculating chi-square in R</h2>

<p>With both the observed and expected tables at hand, calculating the chi-square statistic becomes a straightforward process. For each cell, subtract the expected value (E) from the observed value (O), square this difference, and then divide by the expected value. Once you complete this calculation for every cell in the table, sum up these individual results. This sum is your chi-square statistic!</p>

<p><br /></p>

<p>The next step is to determine how unusual this statistic is within the context of the chi-square distribution. It’s important to remember that this test statistic operates under the assumption that the null hypothesis is true. Therefore, the chi-square distribution will indicate the probability of encountering a chi-square statistic as large as, or larger than, the one you’ve calculated, under the assumption of the <em>null</em> hypothesis.</p>

<p><br /></p>

\[\chi^{2} = \sum \frac{(O-E)^{2}}{E}\]

<p>If you calculate it, you should find something around 59.3. We can plot a chi-square distribution with 4 degrees of freedom and estimate visually the probability of it. The code below does that and highlights the test statistic with a white dashed line. It is clear that a test statistic as large or larger than the one we obtained is extremely unlikely under the <em>null</em> hypothesis.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-18-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">70</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">)</span><span class="w">

</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">

</span><span class="n">df_4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">df_4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#C84848"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">59.3</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.4</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Density Function"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Chi-squared"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_18_05.png" alt="Test statistic highlighted in the chi square distribution" /></p>

<p><br /></p>

<p>The good news is that the <code class="language-plaintext highlighter-rouge">chisq.test</code> function does all this work for us! In only one line of code you perform the test! With the code below you also get a numerical p-value to evaluate your hypotheses.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-18-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">chi_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">chisq.test</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">df_prep</span><span class="o">$</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="n">df_prep</span><span class="o">$</span><span class="n">gender</span><span class="p">))</span><span class="w">

</span><span class="n">chi_test</span><span class="o">$</span><span class="n">statistic</span><span class="w">
</span><span class="n">chi_test</span><span class="o">$</span><span class="n">p.value</span><span class="w">
</span><span class="n">chi_test</span><span class="o">$</span><span class="n">expected</span></code></pre></figure>


</div>

<p><br /></p>

<p>The result of <code class="language-plaintext highlighter-rouge">chisq.test</code> is stored in a list that I called <code class="language-plaintext highlighter-rouge">chi_test</code>. This list has several elements. Some of them are the chi-square statistic, the p-value and even the expected contingency table that we estimated above.</p>

<p><br /></p>

<p>Now we can confirm analytically what we showed graphically above. The p-value tells us that the probability of observing a chi-square equal or larger than 59.3 is \(4.13 \times 10^{-12}\) under the <em>null</em> hypothesis. Our data is extremely unlikely under the <em>null</em> and therefore we can reject it. We can then accept the hypothesis that indeed gender and verdict are associated. Nevertheless, keep in mind that association does not mean causation.</p>

<p><br /></p>

<p><strong>These findings offer valuable insights into the distinct experiences of men and women in 18th-century London inquests. The results of our chi-square test suggest a relationship between the gender of the deceased and the outcome of an investigation. To further enrich our understanding of this statistical finding, a qualitative analysis could provide deeper context and detail. Your comments and questions are highly welcomed, so please feel free to share your thoughts and inquiries below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-conclusions">6. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>You can easily perform a chi-square test in R with the <code class="language-plaintext highlighter-rouge">chisq.test</code> function;</li>
  <li>Degrees of freedom play a crucial role in shaping the chi-square distribution, influencing the accuracy and reliability of our statistical inferences;</li>
  <li>The chi-square test reveals a significant association between gender and the verdicts of 18th-century London inquests, suggesting gender-based differences in investigation outcomes;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="ggplot2" /><summary type="html"><![CDATA[Learn about the chi-square distribution in R, understand degrees of freedom through practical examples, and master hypothesis testing in historical contexts. Perfect for enthusiasts at the intersection of data science and history. Dive into statistical analysis and uncover patterns from 18th-century London inquests.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_18.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_18.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Change Fonts in ggplot2 with Google Fonts</title><link href="http://localhost:4000/2023/11/15/Change-Fonts-in-ggplot.html" rel="alternate" type="text/html" title="How to Change Fonts in ggplot2 with Google Fonts" /><published>2023-11-15T00:00:00+01:00</published><updated>2023-12-04T00:00:00+01:00</updated><id>http://localhost:4000/2023/11/15/Change-Fonts-in-ggplot</id><content type="html" xml:base="http://localhost:4000/2023/11/15/Change-Fonts-in-ggplot.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>In this lesson, we delve into the world of data visualization with a focus on the use of different fonts in ggplot2. We are going to learn how to take advantage of Google Fonts to enrich our plots. Our journey takes us back in time, exploring a dataset derived from the “London Lives 1690-1800: Crime, Poverty and Social Policy in the Metropolis” project. This dataset provides a window into the socio-economic and health conditions of 18th-century.</p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Google fonts are open source and without cost.
        
        <a href="https://developers.google.com/fonts/faq?hl=en" target="_blank"> Read more here.</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The data used in this tutorial consists of a catalogue of historical documents organized by <a href="https://sharonhoward.org/index.html">Sharon Howard</a>. These documents detail an extensive range of Westminster inquests conducted between 1760 and 1799. They document investigations into deaths under circumstances that were sudden, unexplained, or suspicious.</p>

<p><br /></p>

<p>The data is derived from a larger project, <a href="https://www.londonlives.org/">London Lives 1690-1800: Crime, Poverty and Social Policy in the Metropolis</a>, a rich resource shedding light on the lives of ordinary Londoners during this era. <a href="https://github.com/sharonhoward/ll-coroners">The dataset</a> we explore comprises 2,894 inquest records, each containing detailed information such as the dates of the inquests, names of the deceased, the verdicts rendered, and the causes of death. Sharon Howard’s contribution in organizing these records offers an invaluable opportunity to study the social and legal intricacies of historic London.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-load-a-tsv-file-in-r">2. How to load a tsv file in R?</h2>

<p>TSV stands for ‘Tab-Separated Values,’ a textual format used to store tabular data. In this lesson, <a href="https://github.com/sharonhoward/ll-coroners/blob/master/coroners_inquests/wa_coroners_inquests_v1-1.tsv">our data</a> is stored in TSV format. To load it, we use the <code class="language-plaintext highlighter-rouge">read_tsv</code> function from the <code class="language-plaintext highlighter-rouge">readr</code> package. After loading the data, we need to eliminate observations where the verdict is undefined.</p>

<p><br /></p>

<p>Furthermore, the original data categorizes three types of suicide: ‘suicide (delirious)’, ‘suicide (felo de se)’, and ‘suicide (insane)’. However, for our purposes, we will classify all these as simply ‘suicide’. The code below execute these steps. Note that we use <code class="language-plaintext highlighter-rouge">filter</code>, <code class="language-plaintext highlighter-rouge">mutate</code> and <code class="language-plaintext highlighter-rouge">recode</code> from the <code class="language-plaintext highlighter-rouge">dplyr</code> package. The <code class="language-plaintext highlighter-rouge">recode</code> function takes as argument the column to be recoded and each value associated with its new content. The packages needed for this lesson are called at the beginning of the code. Please install them with <code class="language-plaintext highlighter-rouge">install.packages()</code> in case you don’t have them.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-17-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-17-1">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">showtext</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s2">"wa_coroners_inquests_v1-1.tsv"</span><span class="p">)</span><span class="w">

</span><span class="n">df_prep</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"-"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recode</span><span class="p">(</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="s2">"suicide (delirious)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (felo de se)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (insane)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-using-the-table-function-to-summarize-a-categorical-variable">3. Using the table function to summarize a categorical variable</h2>

<p>An efficient method for counting the number of each type of verdict in the <code class="language-plaintext highlighter-rouge">verdict</code> variable is to use the <code class="language-plaintext highlighter-rouge">table</code> function. While this function is typically used to construct a contingency table for two variables, in this instance, it is utilized to tally the frequency of each category within the <code class="language-plaintext highlighter-rouge">verdict</code> variable. We then transform this table into a data frame to facilitate its use in <code class="language-plaintext highlighter-rouge">ggplot2</code>.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A contingency table, or crosstab, presents the counts for the combination of two categorical variables.
        
        <a href="https://statisticsbyjim.com/basics/contingency-table/" target="_blank"> Read more here.</a>
        
    </div>
</div>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-17-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-17-2">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">table_ver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">df_prep</span><span class="o">$</span><span class="n">verdict</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-change-fonts-in-ggplot2-with-showtext">4. Change fonts in ggplot2 with showtext</h2>

<p>The <a href="https://cran.rstudio.com/web/packages/showtext/vignettes/introduction.html">showtext package</a>, developed by Yixuan Qiu, greatly simplifies the use of various font types in R plots. In this lesson, we’ll focus on using <code class="language-plaintext highlighter-rouge">showtext</code> to access Google Fonts, though the package offers more than just that capability.</p>

<p><br /></p>

<p>After loading the library, you can select your desired Google Font using the <code class="language-plaintext highlighter-rouge">font_add_google</code> function. The <code class="language-plaintext highlighter-rouge">showtext_auto</code> command then instructs R to employ <code class="language-plaintext highlighter-rouge">showtext</code> for text rendering. That’s it — next, simply specify your chosen font in the ggplot2 theme, as demonstrated in the code below. Since our <code class="language-plaintext highlighter-rouge">table_ver</code> data is already aggregated, we need to set stat = “identity” in the geom_bar layer. It’s important to note the use of <code class="language-plaintext highlighter-rouge">reorder</code> to arrange the bars from largest to smallest frequency. The figures illustrate the resulting plots, first with the ‘Montserrat’ font followed by the ‘Dancing Script’ font.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-17-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-17-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">font_add_google</span><span class="p">(</span><span class="s2">"Montserrat"</span><span class="p">)</span><span class="w">

</span><span class="n">showtext_auto</span><span class="p">()</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">table_ver</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reorder</span><span class="p">(</span><span class="n">Var1</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">Freq</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Freq</span><span class="p">),</span><span class="w"> </span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"identity"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Jury's Veredicts"</span><span class="p">,</span><span class="w"> 
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Frequency"</span><span class="p">,</span><span class="w"> 
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Verdict"</span><span class="p">,</span><span class="w">
       </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Westminster Coroners' Inquests 1760-1799"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">14</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="o">=</span><span class="s2">"Montserrat"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_17_01.png" alt="Bar plot showing verdicts using the Montserrat font" /></p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Even though I use "Dancing Script" (handwriting) in the plot below, it is generally recommended to use sans-serif fonts to plot your data. It makes your text more readable. In this tutorial I used "Dancing Script" to show you the options offered by Google Fonts. Lisa Charlotte Muth gives relevant advice on the use of fonts in plots in
        
        <a href="https://blog.datawrapper.de/fonts-for-data-visualization/" target="_blank"> this article.</a>
        
    </div>
</div>

<p><br /></p>

<p><img src="/assets/images/lesson_17_02.png" alt="Bar plot showing verdicts using the Dancing Script font" /></p>

<p><br /></p>

<p>The plot above suggests a relatively low number of homicides in these inquests. One could investigate, if indeed the number is so low or if maybe the inquest’s documentation suggest the possibility of homicides being wrongly classified as accidental.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-checking-the-causes-of-death">5. Checking the causes of death</h2>

<p>In the plots above, we explored the verdict that resulted from the inquests, but the dataset is richer in details. Let us explore a little more?</p>

<p><br /></p>

<p>The variable <code class="language-plaintext highlighter-rouge">cause_of_death</code> tells us more details of the circumstances in which the person in each inquest died. To visualize the most frequent causes of death, we will start by elimintating <code class="language-plaintext highlighter-rouge">NA</code> observations in this variable. We can do that with <code class="language-plaintext highlighter-rouge">filter(!is.na())</code>, which filters only values that are not <code class="language-plaintext highlighter-rouge">NA</code>. Following that command, we group observations by <code class="language-plaintext highlighter-rouge">cause_of_death</code> and count the frequency of each cause with <code class="language-plaintext highlighter-rouge">tally</code>.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> tally() is equivalent to dplyr summarise(n = n()).
        
        <a href="https://dplyr.tidyverse.org/reference/count.html" target="_blank"> Read more here.</a>
        
    </div>
</div>

<p><br /></p>

<p>The last step is to filter only causes of death that occurred more than 15 times in our dataset. Please, decrease this number if you would like to see more causes. Finally, we can use the same ggplot2 code to plot the causes of death. Since the texts representing the causes of death are longer than the verdicts, we will plot the them in the y axis and the frequency in the x axis. The remaining code remains very similar.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-17-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-17-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">cause</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df_prep</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">filter</span><span class="p">(</span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">cause_of_death</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">cause_of_death</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">tally</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">n</span><span class="o">&gt;</span><span class="m">15</span><span class="p">)</span><span class="w">


</span><span class="n">font_add_google</span><span class="p">(</span><span class="s2">"Montserrat"</span><span class="p">)</span><span class="w">

</span><span class="n">showtext_auto</span><span class="p">()</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">cause</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reorder</span><span class="p">(</span><span class="n">cause_of_death</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">sum</span><span class="p">),</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> 
           </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"identity"</span><span class="p">,</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Causes of death"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> 
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Frequency"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> 
                          </span><span class="n">family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Montserrat"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_17_03.png" alt="Bar plot showing causes of death" /></p>

<p><br /></p>

<p>It’s noteworthy that a significant number of the inquests pertained to cases of drowning or suicide. An intriguing avenue for further research would be to delve into the complete reports of these inquests. Such an investigation could shed light on the reasons behind the high incidence of drownings.</p>

<p><br /></p>

<p><strong>Please, feel free to leave any questions or concerns you might have in the comments below.</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-conclusions">6. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>Using Google Fonts within ggplot2 not only transforms but significantly elevates the aesthetic appeal of our data visualizations;</li>
  <li>Leveraging the showtext package simplifies incorporating diverse Google Fonts into R, enhancing our data representation capabilities;</li>
  <li>Employing simple plots with historical data effectively generates insightful hypotheses, offering a deeper understanding of our past.;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><category term="ggplot2" /><summary type="html"><![CDATA[Master the art of data visualization in R with our comprehensive guide on using Google Fonts in ggplot2. Learn to load, process historical datasets, and enhance your ggplot2 charts with custom fonts for more impactful and visually appealing data presentations.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_17.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_17.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Harnessing AI in R and Python - Gather data with ChatGPT</title><link href="http://localhost:4000/2023/11/01/AI-in-R.html" rel="alternate" type="text/html" title="Harnessing AI in R and Python - Gather data with ChatGPT" /><published>2023-11-01T00:00:00+01:00</published><updated>2023-11-01T00:00:00+01:00</updated><id>http://localhost:4000/2023/11/01/AI-in-R</id><content type="html" xml:base="http://localhost:4000/2023/11/01/AI-in-R.html"><![CDATA[<p><br /></p>

<h1 id="ai-in-r-and-python">AI in R and Python</h1>

<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Welcome to this enlightening journey to extract historical data from the Web using AI! In this lesson, we delve into the innovative ways of harnessing the power of ChatGPT to gather data for your analyses. Specifically, you’ll learn how to command ChatGPT to retrieve historical data from a Wikipedia article and present it in a neat R and Pandas dataframe.</p>

<p><br /></p>

<p><a href="https://openai.com/blog/chatgpt">ChatGPT</a> is an advanced large language model that has the remarkable capability to generate human-like text based on the prompts it receives. With ChatGPT, you can ask questions or provide instructions, and it will respond with relevant and coherent written answers. By the end of this post, the vast historical archives of Wikipedia will be just a prompt away, all thanks to the capabilities of ChatGPT.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The data used in this tutorial is presented in the Wikipedia article <a href="https://en.wikipedia.org/w/index.php?title=German_casualties_in_World_War_II&amp;oldid=1180060662">German casualties in World War II</a>. This article offers an overview of the casualties sustained by the German Army during the Second World War.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-use-chatgpt-to-retrieve-data-in-a-wikipedia-table">1. Use ChatGPT to retrieve data in a Wikipedia table</h2>

<p>The first step to gather the data is to access <a href="https://en.wikipedia.org/w/index.php?title=German_casualties_in_World_War_II&amp;oldid=1180060662">German casualties in World War II</a>. This article provides an exploration of the number of deaths, wounded, and sick people during World War II in Germany.</p>

<p><br /></p>

<p>Suppose you are interested in studying how the war differed across the different fronts and geographical regions. You see the second table presented in the article and would like to make a visualization showing the number of deaths in the German Army across the different war fronts. For small tables like this, you can simply select and copy the data you would like to transform in a dataframe, as shown in the figure below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_16_01.png" alt="Figure showing Wikipedia article and its table" /></p>

<p><br /></p>

<p>In this example, we will only gather the Army section of the table. Once you have copied the data, you are ready to use ChatGPT.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-a-good-chatgpt-prompt">2. A good ChatGPT prompt</h2>

<p>When writing prompts for ChatGPT, clarity and specificity are key. Start by providing enough context so the model understands what you’re asking. Being explicit about the format or type of answer you want can also help guide ChatGPT in generating a response that meets your expectations.</p>

<p><br /></p>

<p>Additionally, including examples of desired responses can be beneficial. Always consider the “garbage in, garbage out” principle; a well-crafted prompt is more likely to result in a useful and coherent response.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_16_02.png" alt="Figure with tips for writing a good ChatGPT prompt" /></p>

<p><br /></p>

<p>For the R prompt, consult step 3 below and for the Python prompt jump to step 4.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-ai-for-r">3. AI for R</h2>

<p>Below you can see a suggestion of prompt to ask ChatGPT to transform the text input copied from Wikipedia in an R dataframe. In the figure, we highlight each part of the prompt. Moreover, ChatGPT response is provided.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_16_03.png" alt="ChatGPT prompt with highlighted elements" /></p>

<p><br /></p>

<p>If you would like, you can copy the prompt here:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-16-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-16-1">

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">You are a data scientist investigating the number of deaths in the German Army during the Second World War.  Please, could you transform the table below into an R data frame made with the data.frame( ) function? The character "-" should be replaced by NA.  The table was copied from a Wikipedia place and is as follows: """
Description	Dead	Missing &amp; POW	Total	Wounded &amp; Sick
Army				
Eastern Front	1,105,987	1,018,365	2,124,352	3,498,059
North: Norway/Finland	16,639	5,157	21,796	60,451
Southwest: N Africa/Italy	50,481	194,250	244,731	163,602
Southeast: Balkans	19,235	14,805	34,040	55,069
West: France/Low Countries	107,042	409,715	516,757	399,856
Training Forces	10,467	1,337	11,804	42,174
Died of Wounds-All Fronts	295,659	-	295,659	-
Location not Given	17,051	2,687	19,738	- """</code></pre></figure>


</div>

<p><br /></p>

<p>And here is the model’s answer:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-16-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-16-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
  </span><span class="n">Description</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Eastern Front"</span><span class="p">,</span><span class="w"> </span><span class="s2">"North: Norway/Finland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Southwest: N Africa/Italy"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Southeast: Balkans"</span><span class="p">,</span><span class="w"> </span><span class="s2">"West: France/Low Countries"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Training Forces"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Died of Wounds-All Fronts"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Location not Given"</span><span class="p">),</span><span class="w">
  </span><span class="n">Dead</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">gsub</span><span class="p">(</span><span class="s2">","</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"1105987"</span><span class="p">,</span><span class="w"> </span><span class="s2">"16639"</span><span class="p">,</span><span class="w"> </span><span class="s2">"50481"</span><span class="p">,</span><span class="w"> </span><span class="s2">"19235"</span><span class="p">,</span><span class="w"> </span><span class="s2">"107042"</span><span class="p">,</span><span class="w"> </span><span class="s2">"10467"</span><span class="p">,</span><span class="w"> </span><span class="s2">"295659"</span><span class="p">,</span><span class="w"> </span><span class="s2">"17051"</span><span class="p">))),</span><span class="w">
  </span><span class="n">Missing_POW</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">gsub</span><span class="p">(</span><span class="s2">","</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"1018365"</span><span class="p">,</span><span class="w"> </span><span class="s2">"5157"</span><span class="p">,</span><span class="w"> </span><span class="s2">"194250"</span><span class="p">,</span><span class="w"> </span><span class="s2">"14805"</span><span class="p">,</span><span class="w"> </span><span class="s2">"409715"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1337"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="s2">"2687"</span><span class="p">))),</span><span class="w">
  </span><span class="n">Total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">gsub</span><span class="p">(</span><span class="s2">","</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"2124352"</span><span class="p">,</span><span class="w"> </span><span class="s2">"21796"</span><span class="p">,</span><span class="w"> </span><span class="s2">"244731"</span><span class="p">,</span><span class="w"> </span><span class="s2">"34040"</span><span class="p">,</span><span class="w"> </span><span class="s2">"516757"</span><span class="p">,</span><span class="w"> </span><span class="s2">"11804"</span><span class="p">,</span><span class="w"> </span><span class="s2">"295659"</span><span class="p">,</span><span class="w"> </span><span class="s2">"19738"</span><span class="p">))),</span><span class="w">
  </span><span class="n">Wounded_Sick</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">gsub</span><span class="p">(</span><span class="s2">","</span><span class="p">,</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"3498059"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60451"</span><span class="p">,</span><span class="w"> </span><span class="s2">"163602"</span><span class="p">,</span><span class="w"> </span><span class="s2">"55069"</span><span class="p">,</span><span class="w"> </span><span class="s2">"399856"</span><span class="p">,</span><span class="w"> </span><span class="s2">"42174"</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">)))</span><span class="w">
</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>And that’s it. In a few seconds you have your data formatted in a nice dataframe, ready to be analyzed.</p>

<p><br /></p>

<p>Now we will make a simple bar plot to visualize the total number of deaths by front. To do that, we use ggplot. Note that we reorder the variable <code class="language-plaintext highlighter-rouge">Description</code> so that it is ordered from the largest number of deaths to the smallest. Moreover, we also divide <code class="language-plaintext highlighter-rouge">Total</code> by one million to have millions of deaths in the x axis. To add a customized ggplot2 theme, like the one in the plot presented below, check the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization with ggplot2’</a></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-16-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-16-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">reorder</span><span class="p">(</span><span class="n">Description</span><span class="p">,</span><span class="w"> </span><span class="n">Total</span><span class="p">),</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Total</span><span class="o">/</span><span class="m">1000000</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"identity"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Deaths in the German Army by location or cause"</span><span class="p">,</span><span class="w">
       </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Second World War (1939-1945)"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Front/Cause"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Number of Deaths [in millions]"</span><span class="p">,</span><span class="w">
       </span><span class="n">caption</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Source: German casualties in World War II. Wikipedia"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_16_04.png" alt="Bar plot showing number of deaths per front in the German Army in the Second World War" /></p>

<p><br /></p>

<p>It is remarkable that most of casualties occurred in the Eastern Front while the least lethal front was in the nordic countries.</p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> The approach demonstrated in this lesson is effective for small tables. However, when faced with larger and more complex tables, ChatGPT tends to avoid the task of assembling a dataframe directly. Instead, it often proposes a solution that involves scraping the table in R using the page URL. You should also consider the prompt length limit when using this approach.
        
    </div>
</div>

<p><br /></p>

<h2 id="4-ai-for-python">4. AI for Python</h2>

<p>The prompt for achieving the same result in Python is almost the same, but we ask for a Pandas data frame, instead of an R data frame.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-16-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-16-4">

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">You are a data scientist investigating the number of deaths in the German Army during the Second World War.  Please, could you transform the table below into a Pandas data frame? The character "-" should be replaced by NA.  The table was copied from a Wikipedia place and is as follows: """
Description	Dead	Missing &amp; POW	Total	Wounded &amp; Sick
Army				
Eastern Front	1,105,987	1,018,365	2,124,352	3,498,059
North: Norway/Finland	16,639	5,157	21,796	60,451
Southwest: N Africa/Italy	50,481	194,250	244,731	163,602
Southeast: Balkans	19,235	14,805	34,040	55,069
West: France/Low Countries	107,042	409,715	516,757	399,856
Training Forces	10,467	1,337	11,804	42,174
Died of Wounds-All Fronts	295,659	-	295,659	-
Location not Given	17,051	2,687	19,738	- """</code></pre></figure>


</div>

<p><br /></p>

<p>This prompts correctly organizes the data in a Pandas data frame, as shown below:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-16-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-16-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"Description"</span><span class="p">:</span> <span class="p">[</span><span class="s">"Eastern Front"</span><span class="p">,</span> <span class="s">"North: Norway/Finland"</span><span class="p">,</span> <span class="s">"Southwest: N Africa/Italy"</span><span class="p">,</span> <span class="s">"Southeast: Balkans"</span><span class="p">,</span> <span class="s">"West: France/Low Countries"</span><span class="p">,</span> <span class="s">"Training Forces"</span><span class="p">,</span> <span class="s">"Died of Wounds-All Fronts"</span><span class="p">,</span> <span class="s">"Location not Given"</span><span class="p">],</span>
    <span class="s">"Dead"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1105987</span><span class="p">,</span> <span class="mi">16639</span><span class="p">,</span> <span class="mi">50481</span><span class="p">,</span> <span class="mi">19235</span><span class="p">,</span> <span class="mi">107042</span><span class="p">,</span> <span class="mi">10467</span><span class="p">,</span> <span class="mi">295659</span><span class="p">,</span> <span class="mi">17051</span><span class="p">],</span>
    <span class="s">"Missing &amp; POW"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1018365</span><span class="p">,</span> <span class="mi">5157</span><span class="p">,</span> <span class="mi">194250</span><span class="p">,</span> <span class="mi">14805</span><span class="p">,</span> <span class="mi">409715</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">,</span> <span class="mi">2687</span><span class="p">],</span>
    <span class="s">"Total"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2124352</span><span class="p">,</span> <span class="mi">21796</span><span class="p">,</span> <span class="mi">244731</span><span class="p">,</span> <span class="mi">34040</span><span class="p">,</span> <span class="mi">516757</span><span class="p">,</span> <span class="mi">11804</span><span class="p">,</span> <span class="mi">295659</span><span class="p">,</span> <span class="mi">19738</span><span class="p">],</span>
    <span class="s">"Wounded &amp; Sick"</span><span class="p">:</span> <span class="p">[</span><span class="mi">3498059</span><span class="p">,</span> <span class="mi">60451</span><span class="p">,</span> <span class="mi">163602</span><span class="p">,</span> <span class="mi">55069</span><span class="p">,</span> <span class="mi">399856</span><span class="p">,</span> <span class="mi">42174</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span><span class="p">]</span>
<span class="p">}</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><strong>Keep in mind that accuracy is not one of ChatGPT’s strengths. While I have not seen any mistakes in the code above, it is always good to revise ChatGPT’s work. Let me know if you have any suggestions on how to improve this method. Also, leave any questions or concerns you might have in the comments below.</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>ChatGPT is a powerful tool that can be utilized to efficiently gather and organize historical data from the web, specifically Wikipedia, into structured data frames for analysis in R and Python;</li>
  <li>Clarity and specificity are essential when crafting prompts for ChatGPT to ensure accurate and relevant responses;</li>
  <li>While this method is highly effective for small tables, it’s important to note that ChatGPT may suggest alternative solutions such as web scraping for larger and more complex tables, and to always review ChatGPT’s output for accuracy.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><category term="ai" /><category term="python" /><summary type="html"><![CDATA[Unlock the potential of AI in R and Python with this comprehensive tutorial on using ChatGPT for data analysis. Learn how to extract historical data from Wikipedia and transform it into organized R and Pandas dataframes. Plus, discover best practices for crafting ChatGPT prompts!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_16.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_16.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to use R in Google Colab?</title><link href="http://localhost:4000/2023/10/03/R-in-GoogleColab.html" rel="alternate" type="text/html" title="How to use R in Google Colab?" /><published>2023-10-03T00:00:00+02:00</published><updated>2024-01-18T00:00:00+01:00</updated><id>http://localhost:4000/2023/10/03/R-in-GoogleColab</id><content type="html" xml:base="http://localhost:4000/2023/10/03/R-in-GoogleColab.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Ever imagined a world where any computer with an internet browser could be your playground for programming in R? Believe it, because this is your reality! Google Colab enables you to execute R code with remarkable ease, eliminating the need for installations and providing a seamless setup process. The cherry on top? It’s free and allows easy sharing and collaboration on your projects.</p>

<p><br /></p>

<p>In this lesson, I will show you how to use R in Google Colab and suggest a code example to explore the popularity of baby names over the last century. Don’t forget to check out the step-by-step tutorial in the video below! Additionally, feel free to copy the example code from the sections that follow.</p>

<p><br /></p>

<div class="videoWrapper">

<iframe width="560" height="315" src="https://www.youtube.com/embed/WKtcrvd_2-0?si=BGqZJ7ekj47PCTYP" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The data used in this tutorial comes from the <code class="language-plaintext highlighter-rouge">babynames</code> package. It contains a dataset with baby names registered between 1880 and 2017 in the United States. For further details, please explore the documentation of the package <a href="https://cran.r-project.org/web/packages/babynames/index.html">here</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-set-the-right-runtime">2. Set the right runtime</h2>

<p>It is actually quite straightforward to configure Google Colab to accept R code. All you have to do is change the runtime type from <code class="language-plaintext highlighter-rouge">Python 3</code> to <code class="language-plaintext highlighter-rouge">R</code>. In the menu <em>Runtime</em>, choose the option <em>Change Runtime Type</em>, as shown in the figure below. That’s all!</p>

<p><br /></p>

<p><img src="/assets/images/lesson_15_01.png" alt="Figure explaining how to use R in Google Colab" width="650" height="650" /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> You can also set which type of hardware accelerator you would like to use to process your code. Usually graphics processing units (GPU) are better for machine learning applications.
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-example-using-r-in-google-colab">3. Example: using R in Google Colab</h2>

<p>Below you find the code used in the video tutorial. Feel free to copy, test and change it!</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-15-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-15-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"babynames"</span><span class="p">)</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">babynames</span><span class="p">)</span><span class="w">

</span><span class="n">str</span><span class="p">(</span><span class="n">babynames</span><span class="p">)</span><span class="w">

</span><span class="n">bruno_df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">babynames</span><span class="p">[</span><span class="n">babynames</span><span class="o">$</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Bruno"</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bruno_df</span><span class="o">$</span><span class="n">year</span><span class="p">,</span><span class="w"> 
    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bruno_df</span><span class="o">$</span><span class="n">n</span><span class="p">,</span><span class="w">
    </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"l"</span><span class="p">,</span><span class="w">
    </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Popularity of the name Bruno"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Note that each time you reopen a Colab notebook, you will need to reinstall the libraries required to run your code. While this might seem like a disadvantage, it also encourages you to code without relying heavily on numerous libraries, potentially leading to more robust code.
        
    </div>
</div>

<p><br /></p>

<p><strong>Leave any questions or concerns you might have in the comments below.</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>Google Colab provides a hassle-free journey into the world of R programming and data exploration;</li>
  <li>with a small change in Google Colab runtime type, it can proccess R code</li>
  <li>mastering the use of R within Google Colab not only enriches our data analysis skills but also paves the way for enhanced collaborative computing in the cloud.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><summary type="html"><![CDATA[Discover how to use R in Google Colab and dive into the world of online coding with R. Set up your Colab environment seamlessly and start programming right away!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_15.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_15.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mapping the Past - Geospatial Visualization in R</title><link href="http://localhost:4000/2023/09/06/Geospatial-Data-Visualization.html" rel="alternate" type="text/html" title="Mapping the Past - Geospatial Visualization in R" /><published>2023-09-06T00:00:00+02:00</published><updated>2023-09-05T00:00:00+02:00</updated><id>http://localhost:4000/2023/09/06/Geospatial-Data-Visualization</id><content type="html" xml:base="http://localhost:4000/2023/09/06/Geospatial-Data-Visualization.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘Space is to place as eternity is to time.’</strong></p>

<p>Joseph Joubert</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists!</p>

<p><br /></p>

<p>In the realm of data science, the ability to visualize geospatial data is paramount. This is particularly true when working with historical data analysis. Maps provide a visual representation of spatial data that allows viewers to discern patterns and relationships that might not be immediately apparent in tabular data. R, with its rich ecosystem of packages and libraries, offers versatile tools for geospatial data visualization.</p>

<p><br /></p>

<p>In this lesson, we will continue our journey exploring 19th century France. Using the <code class="language-plaintext highlighter-rouge">Guerry</code> package we’ll be exploring how to plot maps in R. Please, check out the lesson <a href="/2023/08/16/Study-of-Relationships.html">Use R to explore the link between literacy and suicide in 1830s France</a> to learn how to use regression analysis to study the relationship between literacy and suicides in 19th century France.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>After I wrote the lesson <a href="/2023/08/16/Study-of-Relationships.html">Use R to explore the link between literacy and suicide in 1830s France</a>, the author of the <code class="language-plaintext highlighter-rouge">HistData</code> package, Michael Friendly, kindly let me know that the <code class="language-plaintext highlighter-rouge">Guerry</code> dataset has its own package that includes not only the data provided in <code class="language-plaintext highlighter-rouge">HistData</code> but also additional historical maps of France. Please, check the documentation of the package <a href="https://cran.r-project.org/web/packages/Guerry/Guerry.pdf">here</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-historical-data-analysis-with-maps">Coding the past: historical data analysis with maps</h1>

<p><br /></p>

<h2 id="1-getting-started-with-maps-in-r">1. Getting Started with Maps in R</h2>

<p>Before immersing in our geospatial journey, ensure you’ve equipped your R environment with the <code class="language-plaintext highlighter-rouge">Guerry</code> package and that you load it.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-14-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-14-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"Guerry"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">Guerry</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>Once you have loaded the package, the <code class="language-plaintext highlighter-rouge">gfrance</code> object will be available in your environment. If you check the class of this object with <code class="language-plaintext highlighter-rouge">class(gfrance)</code>, you will get <code class="language-plaintext highlighter-rouge">SpatialPolygonsDataFrame</code>.</p>

<p><br /></p>

<p>But what is a <code class="language-plaintext highlighter-rouge">SpatialPolygonsDataFrame</code>? For a detailed explanation, check <a href="https://mhallwor.github.io/_pages/basics_SpatialPolygons">Michael T. Hallworth</a>. Alternatively, a succinct explanation is provided below.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A SpatialPolygonsDataFrame integrates a simple dataframe with spatial data, utilizing a list structure.
        
    </div>
</div>

<p><br /></p>

<p>Simply put, <code class="language-plaintext highlighter-rouge">gfrance</code> combines the Guerry dataframe that we explored in the <a href="/2023/08/16/Study-of-Relationships.html">last lesson</a> with spatial information of France and its departments in 1830.</p>

<p><br /></p>

<p>For a simple initiation into maps in R, trace the contours of France by plotting the <code class="language-plaintext highlighter-rouge">gfrance</code> data. This is as simple as using <code class="language-plaintext highlighter-rouge">plot(gfrance)</code>. The result, as you’ll see below, is a distinct outline of the various departments of France as they existed in 1830. It is a perfect canvas for deeper geospatial data visualization.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_14_01.png" alt="Map of France in 1830" /></p>

<p><br /></p>

<h2 id="2-st_as_sf">2. st_as_sf</h2>

<p>We could work directly with the <code class="language-plaintext highlighter-rouge">gfrance</code> object, but in order to use <code class="language-plaintext highlighter-rouge">ggplot2</code>, we will first convert it to <code class="language-plaintext highlighter-rouge">sf</code>, which stands for <em>simple feature</em>. Simple feature is a standard for representing real world objects in computers. To learn more about it, check this article about the <a href="https://r-spatial.github.io/sf/articles/sf1.html">sf package</a>, written by its author, Edzer Prebesma. To make the conversion, we will use the <code class="language-plaintext highlighter-rouge">st_as_sf</code> function from the <code class="language-plaintext highlighter-rouge">sf</code> package.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-14-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-14-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">sf</span><span class="p">)</span><span class="w">
</span><span class="n">gfrance_sf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_as_sf</span><span class="p">(</span><span class="n">gfrance</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>Note that the conversion to sf added a variable in the data frame called <code class="language-plaintext highlighter-rouge">geometry</code>. This variable contains the spatial information of each department.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-geom_sf---give-color-and-meaning-to-your-maps">3. geom_sf - give color and meaning to your maps</h2>

<p>In the lesson <a href="/2023/08/16/Study-of-Relationships.html">‘Use R to explore the link between literacy and suicide in 1830s France’</a> we used regression to study the relationship between literacy and the incidence of suicides. Furthermore, we also included in our model variables regarding the wealth of the department and its distance to Paris. We found that the distance to Paris is negatively associated with the incidence of suicides, that is, the farther from Paris, the lower the incidence of suicides.</p>

<p><br /></p>

<p><strong>Do you think this relationship can be seen in a map?</strong></p>

<p><br /></p>

<p>To find out, we will plot a map of France and color the departments according to their suicide rate. The first step is to create a new variable expressing suicides per 100,000 inhabitants. Remember that, in the Guerry dataset, suicide is expressed as the population divided by the number of suicides. We can calculate the inverse of Suicides and multiply it by 100,000 to obtain suicides per 100,000 inhabitants.</p>

<p><br /></p>

<p>In the code below, we load <code class="language-plaintext highlighter-rouge">ggplot2</code> and create the variable <code class="language-plaintext highlighter-rouge">Suicides_Pop</code>, as described above. To plot the map of France colored according to the suicides per inhabitants, we use a layer called <code class="language-plaintext highlighter-rouge">geom_sf</code>. This function takes the data and maps the filling color of the map to the variable <code class="language-plaintext highlighter-rouge">Suicides_Pop</code>. It also sets two constant attributes: the color and size of the department border lines. With scale_fill_gradient we tell ggplot that we would like the fill to be a gradient in which high numbers are associated with a darker red and low numbers with a lighter red. Finally, we set some theme configurations.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-14-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-14-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">gfrance_sf</span><span class="o">$</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="n">gfrance_sf</span><span class="o">$</span><span class="n">Suicides</span><span class="p">)</span><span class="o">*</span><span class="m">100000</span><span class="w">

</span><span class="n">ggplot</span><span class="p">()</span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_sf</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gfrance_sf</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.3</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#FF6885'</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="s1">'#67001f'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w">
    </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">axis.ticks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_14_02.png" alt="map plot with geom_sf and colored with scale_fil_gradient" /></p>

<p><br /></p>

<p>Indeed, as the regression analysis indicated, the departments closer to Paris have a higher incidence of suicides.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-adding-a-second-geom_sf-to-highlight-paris">4. Adding a second geom_sf to highlight Paris</h2>

<p>In the previous map, we can see that the departments closer to Paris have a higher incidence of suicides. However, it is not clear where Paris is located. To highlight Paris, we will add a second layer of <code class="language-plaintext highlighter-rouge">geom_sf</code> to the map. This time, we will use the <code class="language-plaintext highlighter-rouge">filter</code> function to select only the department of Paris (Seine, code 75). We will also set the fill color to white. Finally we will add the following items to make the plot more informative:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">ggtitle</code> is used to add a title and a subtitle to the plot;</li>
  <li><code class="language-plaintext highlighter-rouge">theme</code> and <code class="language-plaintext highlighter-rouge">theme_bw</code> are used to customize the appearance of the plot:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">text = element_text(color = 'white')</code> sets the color of the text to white;</li>
      <li><code class="language-plaintext highlighter-rouge">axis.text</code>and <code class="language-plaintext highlighter-rouge">axis.tick</code> remove axis ticks and text;</li>
      <li><code class="language-plaintext highlighter-rouge">panel.grid.major</code> and <code class="language-plaintext highlighter-rouge">panel.grid.minor</code> remove grid lines;</li>
      <li><code class="language-plaintext highlighter-rouge">panel.background</code> and <code class="language-plaintext highlighter-rouge">plot.background</code> and <code class="language-plaintext highlighter-rouge">legend.background</code> set the background color to match the color of this blog;</li>
      <li><code class="language-plaintext highlighter-rouge">legend.text</code> sets the color of the legend text to white.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-14-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-14-4">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="n">seine</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">gfrance_sf</span><span class="p">,</span><span class="w"> </span><span class="n">dept</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">75</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">()</span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_sf</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gfrance_sf</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.3</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_sf</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seine</span><span class="p">,</span><span class="w">  </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#FF6885'</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="s1">'#67001f'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Suicide incidence per 100,000 people"</span><span class="p">,</span><span class="w"> </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Seine (Paris) highlighted in white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.ticks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w"> 
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_14_03.png" alt="map with a second geom_sf layer" /></p>

<p><br /></p>

<p>Apart from some outliers, the surroundings of Paris present indeed higher rates of suicides compared to the rest of the country.</p>

<p><br /></p>

<p><strong>Do you think that indeed the geographical location has an impact on suicides? Or maybe a third variable is confounding this relationship? In the <a href="/2023/08/16/Study-of-Relationships.html">last lesson</a>, we saw that even when we controlled for wealth and literacy rates, the associates persisted. There are other variables that might play a role in this relationship. Feel free to further investigate and share your thoughts in the comments below.</strong></p>

<p><br /></p>

<p>For more information on maps, please check these materials:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>Eric Weinberg, “<a href="https://programminghistorian.org/en/lessons/geospatial-data-analysis">Using Geospatial Data to Inform Historical Research in R</a>” Programming Historian 7 (2018), https://doi.org/10.46430/phen0075.</li>
  <li>Moraga, Paula. (2023). <a href="https://www.paulamoraga.com/book-spatial/index.html">Spatial Statistics for Data Science: Theory and Practice with R</a>. Chapman &amp; Hall/CRC.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>st_as_sf is used to convert a SpatialPolygonsDataFrame to sf;</li>
  <li>geom_sf is used to plot sf objects in ggplot2;</li>
  <li>maps can be a powerful tool to visualize relationships that involve space;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="maps" /><category term="ggplot2" /><category term="historicaldata" /><summary type="html"><![CDATA[Turn data into storytelling with geospatial data visualization in R. Utilize st_as_sf and geom_sf for impactful map creation.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_14.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_14.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Use R to explore the link between literacy and suicide in 1830s France</title><link href="http://localhost:4000/2023/08/16/Study-of-Relationships.html" rel="alternate" type="text/html" title="Use R to explore the link between literacy and suicide in 1830s France" /><published>2023-08-16T00:00:00+02:00</published><updated>2023-08-16T00:00:00+02:00</updated><id>http://localhost:4000/2023/08/16/Study-of-Relationships</id><content type="html" xml:base="http://localhost:4000/2023/08/16/Study-of-Relationships.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘Happiness in intelligent people is the rarest thing I know’</strong></p>

<p>A character in Ernest Hemingway’s novel “The Garden of Eden”</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists!</p>

<p><br /></p>

<p>In this lesson, we will learn how to evaluate the relationship between two variables with R. Check out the video below for a short introduction.</p>

<p><br /></p>

<div class="videoWrapper">

<iframe width="560" height="315" src="https://www.youtube.com/embed/Fee7FMwAv_Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The Guerry dataset is provided by the R package <a href="https://cran.r-project.org/web/packages/HistData/index.html">HistData</a>. To know more about this package, please refer to our lesson <a href="/2023/07/12/HistData.html">‘Uncovering History with R - A Look at the HistData Package’</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-the-relationship-between-literacy-and-suicides-in-1830s-france">Coding the past: the relationship between literacy and suicides in 1830s France</h1>

<p><br /></p>

<h2 id="1-exploring-andre-michel-guerrys-pioneering-data-moral-statistics-of-1830s-france">1. Exploring Andre-Michel Guerry’s Pioneering Data: Moral Statistics of 1830s France</h2>

<p>Andre-Michel Guerry was a French lawyer who was passionate about statistics. He is considered to be the founder of moral statistics and had a major influence on the development of modern social science. His work “Essay on the Moral Statistics of France” includes data on several social variables of 86 French departments in the 1830s.</p>

<p><br /></p>

<p>To access this data, we need to load the HistData package. After doing so, we can use the command <code class="language-plaintext highlighter-rouge">help(Guerry)</code> to see the description of the dataset and the details about each of the 23 variables. Variables include information such as population, crime, literacy, suicide, wealth, and location of the 86 French departments.</p>

<p><br /></p>

<p>You can use <code class="language-plaintext highlighter-rouge">df &lt;- Guerry</code> to load the data. Feel free to explore the dataset and check the <strong>str</strong>ucture of the dataframe with <code class="language-plaintext highlighter-rouge">str(df)</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">HistData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">help</span><span class="p">(</span><span class="n">Guerry</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Guerry</span><span class="w">

</span><span class="n">str</span><span class="p">(</span><span class="n">df</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-add-a-new-column-to-a-dataframe-in-r">2. Add a new column to a dataframe in R</h2>

<p>In the documentation of the dataset, the author states “Note that most of the variables (e.g., Crime_pers) are scaled so that ‘more is better’ morally.”. Thus, suicide, for example, is expressed as the population divided by the number of suicides. In this way, the fewer the suicides, the larger the value in the <code class="language-plaintext highlighter-rouge">Suicides</code> column.</p>

<p><br /></p>

<p>To make our analysis easier to interpret, we can calculate the inverse of <code class="language-plaintext highlighter-rouge">Suicides</code>, that is, instead of having <strong>population/suicides</strong>, we will consider <strong>suicides/population</strong> (suicides per inhabitants). Moreover, to avoid very small numbers, let us multiply this by 100,000 so that we have suicides per 100,000 population. The code below creates this new variable.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="n">df</span><span class="o">$</span><span class="n">Suicides</span><span class="p">)</span><span class="o">*</span><span class="m">100000</span></code></pre></figure>

</div>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content">  Note that "Pop1831" tells us the population of French departments in the thousands in 1831. "summary(df$Pop1831)" tells us that the least populated department had a population of 129,000 inhabitants and the most populated had around 990,000 inhabitants.
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-use-geom_point-to-create-a-scatter-plot">3. Use geom_point to create a scatter plot</h2>

<p>Now, we’ll examine the relationship between <code class="language-plaintext highlighter-rouge">Suicides_Pop</code> and <code class="language-plaintext highlighter-rouge">Literacy</code> using a scatter plot. As per the documentation, <code class="language-plaintext highlighter-rouge">Literacy</code> represents the “percentage of military conscripts who can read and write” in a department. Keep in mind that the relationships studied in this lesson apply only to this subgroup which is not representative of the whole population. The code below leverages <code class="language-plaintext highlighter-rouge">geom_point</code> to visualize this relationship.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Relationship between Suicides and Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage of literate conscripts"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Suicides (per 100,000 population)"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p>Please note, the code above incorporates the function <code class="language-plaintext highlighter-rouge">theme_coding_the_past</code> to style the plot. You can access this theme in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate Data Visualization’</a></p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_01.png" alt="Percentage of literate conscripts vs Suicides per inhabitants" /></p>

<p><br /></p>

<p>The plot suggests that as literacy percentages rise, suicide rates tend to increase. In the distribution of literacy rates below, we also see that the majority of the French departments recorded literacy rates lower than 50% (indicated by the dashed line). If you count the departments to the right of the dashed line, you will find 24 departments, which represents only 24/86 = 28% of the total departments. Notably, the highest suicide rates are in this subgroup.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w">  </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Distribution of literacy percentages"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_02.png" alt="Distribution of literacy percentages" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-corttest-in-r">4. cort.test in R</h2>

<p>Having observed a graphical association between <code class="language-plaintext highlighter-rouge">Literacy</code> and <code class="language-plaintext highlighter-rouge">Suicides</code>, let’s use <code class="language-plaintext highlighter-rouge">cor.test</code> to find this association analytically. This function takes two arguments <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> and returns a Pearson correlation coefficient (by default) and its statistical significance. As explained in the lesson <a href="/2023/02/07/Linear-Models-in-R.html">R programming for climate data analysis and visualization</a> “correlation measures how much two variables change together. It ranges from 1 to -1, where 1 means perfect positive correlation, 0 means no correlation at all and -1 means perfect negative correlation”.</p>

<p><br /></p>

<p>Using <code class="language-plaintext highlighter-rouge">cor.test(x = df$Literacy, df$Suicides_Pop)</code> we obtain a correlation coefficient of 0.4 which means a moderate positive correlation. As literacy increases so does suicide proportion. The p-value is less than 0.01, meaning there is a statistically significant association between <code class="language-plaintext highlighter-rouge">Literacy</code> and <code class="language-plaintext highlighter-rouge">Suicides_Pop</code>. Framed differently, under the hypothesis that there is no correlation between the two variables, the probability of finding a coefficient of 0.4 or higher would be less than 1%. So we can reject the null hypothesis.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-linear-models-with-r">5. Linear models with R</h2>

<p>To further study the relationship between these two variables let’s model 3 linear regressions. To know more about linear regression, check out the lesson <a href="/2023/02/07/Linear-Models-in-R.html">R programming for climate data analysis and visualization</a>.</p>

<p><br /></p>

<p>The first model will only include <code class="language-plaintext highlighter-rouge">Suicides_Pop</code> as the dependent variable and <code class="language-plaintext highlighter-rouge">Literacy</code> as the independent variable. Use <code class="language-plaintext highlighter-rouge">summary(lm(Suicides_Pop ~ Literacy, data = df))</code> to see the results of this model. The literacy coefficient tells us that if we increase the literacy rate by 1%, then the suicide proportion grows by 0.11. Put differently, a 10% increase in literacy is associated with around 1 suicide more per 100,000 population. This estimate is statistically significant.</p>

<p><br />
In the code below, we use <code class="language-plaintext highlighter-rouge">geom_smooth</code> to plot the regression line describing the positive link between literacy and suicides. The <code class="language-plaintext highlighter-rouge">method</code> argument tells ggplot to use a linear model (lm) to depict the relationship.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-13-5">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lm"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">se</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Relationship between Suicides and Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage of literate conscripts"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Suicides (per 100,000 population)"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_03.png" alt="geom_smooth" /></p>

<p><br /></p>

<p>Note that we cannot say that higher literacy rates directly cause more suicides, as factors beyond literacy rates might influence suicide rates. In the next section, we will check whether wealth and the distance to Paris influence suicides as well. Moreover, we will determine if the association between literacy and suicides holds even after controlling for these variables. To show the results, we will use <a href="https://cran.r-project.org/web/packages/stargazer/index.html">stargazer</a>, a very handy package designed for displaying linear model results.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-how-to-use-stargazer-in-r">6. How to use stargazer in R</h2>

<p>The <code class="language-plaintext highlighter-rouge">stargazer</code> package offers a very neat and practical way of presenting the results of several linear models. Users can set it up to produce LaTeX or HTML outputs using the <code class="language-plaintext highlighter-rouge">type</code> argument. In the code that follows, we configure it to generate HTML, making it suitable for this blog post. First, we create three models adding variables indicating the wealth and distance to Paris of each department. Second, we pass these models to stargazer.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-13-6">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">linear_model_01</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">linear_model_02</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Wealth</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">linear_model_03</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Wealth</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Distance</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">stargazer</span><span class="p">)</span><span class="w">

</span><span class="n">stargazer</span><span class="p">(</span><span class="n">linear_model_01</span><span class="p">,</span><span class="w"> </span><span class="n">linear_model_02</span><span class="p">,</span><span class="w"> </span><span class="n">linear_model_03</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"html"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">stargazer</code> table can be seen below. Note in model 2 that <code class="language-plaintext highlighter-rouge">Wealth</code> appears to influence <code class="language-plaintext highlighter-rouge">Suicides</code> negatively, meaning that richer areas are associated with fewer suicides. The coefficient regarding <code class="language-plaintext highlighter-rouge">Literacy</code> decreases a bit but remains statistically significant. Finally, model 3 includes the distance to Paris as an additional variable. The coefficient of <code class="language-plaintext highlighter-rouge">Literacy</code> decreases again but remains statistically significant. Moreover, being close to Paris is associated with more suicides.</p>

<p><br /></p>

<table style="text-align:center; width: 100%;"><tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left"></td><td colspan="3"><em>Dependent variable:</em></td></tr>
<tr><td></td><td colspan="3" style="border-bottom: 1px solid white"></td></tr>
<tr><td style="text-align:left"></td><td colspan="3">Suicides_Pop</td></tr>
<tr><td style="text-align:left"></td><td>(1)</td><td>(2)</td><td>(3)</td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left">Literacy</td><td>0.112<sup>***</sup></td><td>0.080<sup>***</sup></td><td>0.064<sup>**</sup></td></tr>
<tr><td style="text-align:left"></td><td>(0.027)</td><td>(0.026)</td><td>(0.025)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Wealth</td><td></td><td>-0.080<sup>***</sup></td><td>-0.059<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td></td><td>(0.018)</td><td>(0.018)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Distance</td><td></td><td></td><td>-0.014<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td>(0.004)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Constant</td><td>0.645</td><td>5.347<sup>***</sup></td><td>7.901<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td>(1.168)</td><td>(1.489)</td><td>(1.604)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left">Observations</td><td>86</td><td>86</td><td>86</td></tr>
<tr><td style="text-align:left">R<sup>2</sup></td><td>0.167</td><td>0.329</td><td>0.408</td></tr>
<tr><td style="text-align:left">Adjusted R<sup>2</sup></td><td>0.157</td><td>0.313</td><td>0.386</td></tr>
<tr><td style="text-align:left">Residual Std. Error</td><td>4.360 (df = 84)</td><td>3.938 (df = 83)</td><td>3.720 (df = 82)</td></tr>
<tr><td style="text-align:left">F Statistic</td><td>16.826<sup>***</sup> (df = 1; 84)</td><td>20.321<sup>***</sup> (df = 2; 83)</td><td>18.841<sup>***</sup> (df = 3; 82)</td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left"><em>Note:</em></td><td colspan="3" style="text-align:right"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr>
</table>

<p><br /></p>

<hr />

<p><br /></p>

<p>Like all social phenomena, the incidence of suicide is shaped by a multitude of factors.  While we cannot definitively claim that literacy directly caused suicides in 19th-century France, our analysis above does indicate an association between these variables. Delving deeper into the contextual nuances of France in the 1830s might shed light on whether literacy indeed influenced the decision to commit suicide. For instance, check this article by Lisa Lieberman <a href="https://www.cambridge.org/core/journals/comparative-studies-in-society-and-history/article/abs/romanticism-and-the-culture-of-suicide-in-nineteenthcentury-france/FA6EBEDC86A5F6812B37DCA03D609C67">“Romanticism and the Culture of Suicide in Nineteenth-Century France”</a></p>

<p><br /></p>

<p>If you are interested in this topic, <a href="https://en.wikipedia.org/wiki/The_Sorrows_of_Young_Werther">The Sorrows of Young Werther</a>, by Johann Wolfgang Goethe, is a literary representation of a particular view on suicide that would influence the Romantic movement in 19th-century Europe.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_13.jpeg" alt="The Sorrows of Young Werther" />
Daniel Chodowiecki. Goethe’s Werther in his bedroom, with him lying dead on his bed. Public Domain.</p>

<p><br /></p>

<p><br /></p>

<p><strong>If you have any questions or would like to share your thoughts on this topic, please feel free to ask in the comments below.</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>Association between two variables can be identified with a scatter plot;</li>
  <li>It can also be explored analytically with <code class="language-plaintext highlighter-rouge">cor.test</code>;</li>
  <li>Linear regression helps us further understand the relationship of two variables, given other relevant variables</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="regression" /><category term="ggplot2" /><summary type="html"><![CDATA[Use R to analyze the relationship between two variables. Learn how to create linear models with R.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_13.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_13.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">When Numbers Meet Stories - an introduction to the synthetic control method in R</title><link href="http://localhost:4000/2023/07/21/Synthetic-Control.html" rel="alternate" type="text/html" title="When Numbers Meet Stories - an introduction to the synthetic control method in R" /><published>2023-07-21T00:00:00+02:00</published><updated>2023-07-21T00:00:00+02:00</updated><id>http://localhost:4000/2023/07/21/Synthetic-Control</id><content type="html" xml:base="http://localhost:4000/2023/07/21/Synthetic-Control.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Qualitative flesh on quantitative bones.”</p>

<p>Sidney Tarrow</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists!</p>

<p><br /></p>

<p>As our world grows increasingly data-driven, novel methods emerge that allow us to explore present and past social phenomena using sophisticated algorithms and statistical models. One such method is the synthetic control.</p>

<p><br /></p>

<p>Alberto Abadie, Alexis Diamond, and Jens Hainmueller, in their groundbreaking work, “Comparative Politics and the Synthetic Control Method,” have used the synthetic control method to bridge the often disparate domains of qualitative and quantitative research. Their article presents a systematic framework for selecting comparison units in comparative case studies. As an illustrative example, the authors examine the economic impact of the 1990 German reunification on West Germany.</p>

<p><br /></p>

<p>In this lesson we present the synthetic control method and show how to replicate Abadie et al. (2015)’s study of the impact of German reunification on West German GDP using <code class="language-plaintext highlighter-rouge">Synth</code>, an R package. I also present other applications of the synthetic control method.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_01.jpeg" alt="Berlin Wall" /></p>
<p class="fig-caption">The Berlin Wall. Rieste, CC0, via Wikimedia Commons. Public Domain.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The data required to replicate Abadie’s study is available in the <a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/24714">Harvard Database</a>, which includes both the R script needed for replication and the relevant dataset. This dataset contains information about West Germany and 16 other developed countries. The included variables encompass aspects such as education, income, trade openness, industry share, inflation rate, and investment rate. Note that you do not need to go over the R script provided by the authors since I will simplify and explain it for you in this lesson.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-the-synthetic-control-method">Coding the past: the synthetic control method</h1>

<p><br /></p>

<h2 id="1-the-synthetic-control-method">1. The Synthetic Control Method</h2>

<p>In the article, <a href="https://doi.org/10.1590/1981-3821202300010005">Better Incentives, Better Marks: A Synthetic Control Evaluation of Educational Policies in Ceará, Brazil</a>, I explain that the fundamental issue in evaluating the impact of an event, treatment, or intervention is that, once it occurs in a specific place and time, one can no longer assess how the outcome of interest would have developed in the absence of that event or intervention.</p>

<p><br /></p>

<p>Consider our example of Germany’s reunification; after it happened, it became impossible to determine how its Gross Domestic Product (GDP) would have progressed had reunification not taken place. The synthetic control method is a tool designed to overcome this limitation.</p>

<p><br /></p>

<p>How does the synthetic control method estimate what would have happened to West Germany’s GDP in the absence of reunification?</p>

<p><br /></p>

<p>A straightforward approach would be to select a country similar to West Germany, one that did not experience any significant political events, and examine how its GDP evolved over the same period. Would Denmark, France, New Zealand, or Norway serve as suitable comparison units? Rather than choosing a single country as a comparison reference, the synthetic control method estimates a weighted average of several similar countries. The primary skill of synthetic control lies in its use of optimization to find the best weights for calculating this weighted average, ensuring that this artificial unit — the composite of all the similar countries — most closely resembles West Germany in the period prior to the event. The set of similar countries is called the donor pool.</p>

<p><br /></p>

<p>To calculate these weights, we require data on the characteristics of West Germany and the similar countries over time. Ultimately, the synthetic control method generates a synthetic West Germany that did not undergo reunification, which can be used as a reference to assess the impact of the actual reunification. This concept will become clearer as we proceed with the replication outlined below.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> For more information on the optimization process, please refer to
        
        <a href="https://www.aeaweb.org/articles?id=10.1257/jel.20191450" target="_blank"> Abadie (2021)</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-the-synth-package">2. The synth package</h2>

<p><code class="language-plaintext highlighter-rouge">Synth</code> is an R implementation of the synthetic control method. Its most relevant functions are as follows:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">dataprep()</code>: this function prepares the data for the optimization process;</li>
  <li><code class="language-plaintext highlighter-rouge">synth()</code>:  it calculates the optimal weights for each candidate comparison unit and each characteristic;</li>
  <li><code class="language-plaintext highlighter-rouge">path.plot()</code> and <code class="language-plaintext highlighter-rouge">gaps.plot()</code>: These functions provide plots of the trend of the affected unit and its synthetic version, along with the gap between them (the effect).</li>
</ul>

<p><br /></p>

<p>The primary task for computing the synthetic control involves configuring the <code class="language-plaintext highlighter-rouge">dataprep()</code> function. This function provides necessary information to <code class="language-plaintext highlighter-rouge">synth()</code> about which unit was affected by the event, which units will act as comparisons (donor pool), and the characteristics used to estimate the synthetic control. Below are the main arguments <code class="language-plaintext highlighter-rouge">dataprep()</code>:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>foo: a data frame containing the necessary data;</li>
  <li>predictors: a vector containing the names of the variables with characteristics (predictors);</li>
  <li>special.predictors: a list object identifying additional numeric predictors, their associated pretreatment years and the measure of central tendency to use (e.g., mean, median);</li>
  <li>dependent: the name of the variable of interest (e.g., GDP);</li>
  <li>unit.variable: the name of the variable containing the code of the units. It must be numerical (e.g., codes for each country)</li>
  <li>time.variable: the name of the variable indicating time (year). It must be numerical.</li>
  <li>treatment.identifier: the code of the unit that suffered the event or intervention;</li>
  <li>controls.identifier: the codes of the units that did not undergo the event or intervention (donor pool);</li>
  <li>time.predictors.prior: time period to calculate the average of characteristics (predictors of the dependent variable);</li>
  <li>time.optimize.ssr: the period of optimization, during which the mean squared prediction error (MSPE) between treated and synthetic control units is minimized.</li>
  <li>time.plot: the periods for the plots made by path.plot and gaps.plot ;</li>
  <li>unit.names.variable: the name of the variable with unit (country) names.  It must be of character type.</li>
</ul>

<p><br /></p>

<p>Some of these arguments might not be clear for you right now, but they will make sense once we explain them with the example below. After estimating the synthetic control, we can use the <code class="language-plaintext highlighter-rouge">path.plot()</code> and <code class="language-plaintext highlighter-rouge">gaps.plot()</code> functions to visualize the effects.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_12_02.png" alt="synthetic control estimation flow " /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-synthetic-control-in-r">3. Synthetic control in R</h2>

<p>The first step to replicate the study is to load the <code class="language-plaintext highlighter-rouge">Synth</code> package and the dataset. We use the <code class="language-plaintext highlighter-rouge">foreign</code> package to load the file <code class="language-plaintext highlighter-rouge">repgermany.dta</code>. The dataset contains information about West Germany and 16 other developed countries: Australia, Austria, Belgium, Denmark, France, Greece, Italy, Japan, the Netherlands, New Zealand, Norway, Portugal, Spain, Switzerland, the United Kingdom, and the United States. Information on education, income, trade openness, industry share, inflation rate, and investment rate is included. The data spans the period from 1960 to 2001.
<br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">foreign</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">Synth</span><span class="p">)</span><span class="w">

</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.dta</span><span class="p">(</span><span class="s2">"repgermany.dta"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>The next step is to prepare the data for the synth function. We use the <code class="language-plaintext highlighter-rouge">dataprep()</code> function to do that. The code below specifies the following:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">foo = d</code>: the full dataframe containing the data;</li>
  <li><code class="language-plaintext highlighter-rouge">predictors = c("gdp","trade","infrate")</code>: the predictors of the dependent variable (GDP).</li>
  <li><code class="language-plaintext highlighter-rouge">special.predictors = list(list("industry" ,1981:1990, c("mean")), list("schooling",c(1980,1985), c("mean")), list("invest80" ,1980, c("mean")))</code>: additional predictors and their associated pretreatment years. This argument allows us to choose the time periods and which measure of central tendency (eg. “mean”, “median”) to use. Note that the <code class="language-plaintext highlighter-rouge">synth</code> function requires a summary statistic of the predictors rather than the complete time series. In this case, we use the mean of the industry share, schooling, and investment rate in the 1980s. The predictors specified in the <code class="language-plaintext highlighter-rouge">predictors</code> argument also use the mean by default;</li>
  <li><code class="language-plaintext highlighter-rouge">dependent = "gdp"</code>: the dependent variable, which is GDP;</li>
  <li><code class="language-plaintext highlighter-rouge">unit.variable = "index"</code>: the variable containing country codes;</li>
  <li><code class="language-plaintext highlighter-rouge">time.variable = "year"</code>: the variable indicating time (year);</li>
  <li><code class="language-plaintext highlighter-rouge">treatment.identifier = 7</code>: the code of the unit that suffered the event (West Germany);</li>
  <li><code class="language-plaintext highlighter-rouge">controls.identifier = unique(d$index)[-7]</code>: all country codes, except for West Germany;</li>
  <li><code class="language-plaintext highlighter-rouge">time.predictors.prior = 1981:1990</code>: the mean of the predictors specified in the <code class="language-plaintext highlighter-rouge">predictors</code> argument will be calculated in the period from 1981 to 1990;</li>
  <li><code class="language-plaintext highlighter-rouge">time.optimize.ssr = 1960:1989</code>: the optimization will be performed in the period from 1960 to 1989;</li>
  <li><code class="language-plaintext highlighter-rouge">time.plot = 1960:2003</code>: the plots will be made from 1960 to 2003;</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dataprep_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">
  </span><span class="n">dataprep</span><span class="p">(</span><span class="w">
    </span><span class="n">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">d</span><span class="p">,</span><span class="w">
    </span><span class="n">predictors</span><span class="w">    </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"gdp"</span><span class="p">,</span><span class="s2">"trade"</span><span class="p">,</span><span class="s2">"infrate"</span><span class="p">),</span><span class="w">
    </span><span class="n">dependent</span><span class="w">     </span><span class="o">=</span><span class="w"> </span><span class="s2">"gdp"</span><span class="p">,</span><span class="w">
    </span><span class="n">unit.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"index"</span><span class="p">,</span><span class="w">
    </span><span class="n">time.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"year"</span><span class="p">,</span><span class="w">
    </span><span class="n">special.predictors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"industry"</span><span class="w"> </span><span class="p">,</span><span class="m">1981</span><span class="o">:</span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">)),</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"schooling"</span><span class="p">,</span><span class="nf">c</span><span class="p">(</span><span class="m">1980</span><span class="p">,</span><span class="m">1985</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">)),</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"invest80"</span><span class="w"> </span><span class="p">,</span><span class="m">1980</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">))</span><span class="w">
    </span><span class="p">),</span><span class="w">
    </span><span class="n">treatment.identifier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7</span><span class="p">,</span><span class="w">
    </span><span class="n">controls.identifier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">d</span><span class="o">$</span><span class="n">index</span><span class="p">)[</span><span class="m">-7</span><span class="p">],</span><span class="w">
    </span><span class="n">time.predictors.prior</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1981</span><span class="o">:</span><span class="m">1990</span><span class="p">,</span><span class="w">
    </span><span class="n">time.optimize.ssr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1960</span><span class="o">:</span><span class="m">1989</span><span class="p">,</span><span class="w">
    </span><span class="n">unit.names.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"country"</span><span class="p">,</span><span class="w">
    </span><span class="n">time.plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1960</span><span class="o">:</span><span class="m">2003</span><span class="w">
  </span><span class="p">)</span><span class="w">

</span><span class="n">synth_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">synth</span><span class="p">(</span><span class="n">dataprep_out</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>The final step is to pass the output of <code class="language-plaintext highlighter-rouge">dataprep()</code> to the <code class="language-plaintext highlighter-rouge">synth()</code>function. This provides the weights for each candidate comparison unit (solution.w) and each characteristic (solution.v) used in the optimization. Note that the optimization algorithm assigned the largest weights to Austria and the United States, which makes sense given the economic and historical similarities of these countries with West Germany.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-visualizing-synthetic-control-models">4. Visualizing synthetic control models</h2>

<p>Now we can use <code class="language-plaintext highlighter-rouge">Synth</code> functions path.plot() and gaps.plot() to visualize the effects. The <code class="language-plaintext highlighter-rouge">path.plot()</code> function plots the trend of the affected unit and its synthetic version. The <code class="language-plaintext highlighter-rouge">gaps.plot()</code> function plots the gap between them (the effect). You can set the labels of the axes and the title of the plot using the arguments <code class="language-plaintext highlighter-rouge">Ylab</code>, <code class="language-plaintext highlighter-rouge">Xlab</code>, and <code class="language-plaintext highlighter-rouge">Main</code>. You can also set the legend text using the argument <code class="language-plaintext highlighter-rouge">Legend</code> and a dashed line to indicate the year of the event using the argument <code class="language-plaintext highlighter-rouge">tr.intake</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">path.plot</span><span class="p">(</span><span class="n">synth.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">synth_out</span><span class="p">,</span><span class="w">
          </span><span class="n">dataprep.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dataprep_out</span><span class="p">,</span><span class="w">
          </span><span class="n">tr.intake</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w">
          </span><span class="n">Ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Per capita GDP"</span><span class="p">,</span><span class="w">
          </span><span class="n">Xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Year"</span><span class="p">,</span><span class="w">
          </span><span class="n">Legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"West Germany"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Synthetic West Germany"</span><span class="p">),</span><span class="w">
          </span><span class="n">Main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"West Germany vs Synthetic West Germany"</span><span class="p">)</span><span class="w">

</span><span class="n">gaps.plot</span><span class="p">(</span><span class="n">synth.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">synth_out</span><span class="p">,</span><span class="w">
          </span><span class="n">dataprep.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dataprep_out</span><span class="p">,</span><span class="w">
          </span><span class="n">tr.intake</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w">
          </span><span class="n">Ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Effect"</span><span class="p">,</span><span class="w">
          </span><span class="n">Xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Year"</span><span class="p">,</span><span class="w">
          </span><span class="n">Main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" Gap between per capita GDP in West Germany and its synthetic version"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_03.png" alt="West Germany GDP vs Synthetic West Germany" /></p>

<p><br /></p>

<p>In this first plot, we can observe that the per capita GDP of synthetic West Germany closely resembles that of actual West Germany during the period prior to reunification. Upon the implementation of reunification, the model suggests that the synthetic West Germany, unaffected by reunification, would have continued following the same trend in its GDP per capita, while the actual West Germany experienced a decrease. The difference between their trajectories represents the effect of reunification on GDP per capita.</p>

<p><br /></p>

<p>It is important to note that during the first two years of German reunification, West Germany actually experienced an increase in GDP per capita. According to Abadie et al. (2015), this increase can be attributed to a demand boom in goods and services. However, starting from 1992 onwards, the effect of reunification on GDP turned negative.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_04.png" alt="Effect of Reunification on GDP per capita" /></p>

<p><br /></p>

<p>The plot above clearly illustrates the effect by highlighting the difference between the synthetic West Germany and the actual West Germany. Following the initial demand boom, the gap between the two units widens significantly after 1992, indicating a negative impact of reunification on West Germany’s GDP. For instance, in 2003, the gap amounts to approximately 3,000 dollars. Considering that West Germany’s GDP per capita in 2003 was around 29,000 dollars, the effect of reunification resulted in a decrease of approximately 10% in GDP per capita that year. Over the entire period, the authors estimate that reunification led to an average reduction of about 1,600 USD in GDP per year (Abadie et al., 2015).</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-synthetic-control-for-policy-evaluation">5. Synthetic Control for policy evaluation</h2>

<p>Besides its application to evaluate historical events, like the German reunification, synthetic control is also used to evaluate the impact of policies.</p>

<p><br /></p>

<p>Abadie et al. (2010) evaluate the effect of a tobacco control program in California. The authors use the synthetic control method to estimate the effect of the program on cigarette consumption.</p>

<p><br /></p>

<p>In the article <a href="https://doi.org/10.1590/1981-3821202300010005">Better Incentives, Better Marks: A Synthetic Control Evaluation of Educational Policies in Ceará, Brazil</a>, I employed the synthetic control method to evaluate the impact of the educational policies implemented in Ceará, Brazil. The study revealed that a combination of technical assistance (TA) and tax incentives (TI) resulted in up to a 12 percent increase in student test scores. The figure below illustrates the estimated models, where the green line represents the treated Ceará, and the yellow line represents the synthetic Ceará. The gap between these lines represents the effect of the policies.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_05.jpeg" alt="Synthetic control used for policy evaluation" /></p>

<p><br /></p>

<p><strong>If you have any questions about the synthetic control method, please feel free to ask in the comments below.</strong></p>

<p><br /></p>

<p>Moreover, I recommend checking out <a href="https://www.aeaweb.org/articles?id=10.1257/jel.20191450">Using Synthetic Controls: Feasibility, Data Requirements, and Methodological Aspects</a>, a clarifying article by Abadie (2021) that provides a comprehensive overview of the synthetic control method.</p>

<p><br /></p>

<hr />

<p><br /></p>

<p><strong>Articles cited</strong></p>

<p><br /></p>

<ul class="conclusion-list">
  <li>Abadie, Alberto. 2021. “Using Synthetic Controls: Feasibility, Data Requirements, and Methodological Aspects.” Journal of Economic Literature, 59 (2): 391-425 DOI: 10.1257/jel.20191450</li>
  <li>Abadie, Alberto, Alexis Diamond, and Jens Hainmueller. 2015. “Comparative Politics and the Synthetic Control Method.” American Journal of Political Science 59 (2): 495-510. doi: 10.1111/ajps.12116</li>
  <li>Abadie, Alberto, Alexis Diamond &amp; Jens Hainmueller. 2010. “Synthetic Control Methods for Comparative Case Studies: Estimating the Effect of California’s Tobacco Control Program” Journal of the American Statistical Association, 105:490, 493-505, DOI: 10.1198/jasa.2009.ap08746</li>
  <li>Ponne, Bruno Gasparotto. 2023. “Better Incentives, Better Marks: A Synthetic Control Evaluation of the Educational Policies in Ceará, Brazil”. Braz. political sci. rev., 17(1), e0005. https://doi.org/10.1590/1981-3821202300010005</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>Synthetic control is a method that allows us to estimate the effect of an event, treatment, or intervention by creating an artificial comparison unit;</li>
  <li>The <code class="language-plaintext highlighter-rouge">Synth</code> package is an R implementation that allows us to estimate synthetic control models;</li>
  <li>Besides being used to evaluate historical events, synthetic control is also used to evaluate the impact of policies.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="historicaldata" /><summary type="html"><![CDATA[Use the synth package to estimate synthetic control models, a powerful causal inference tool. Explore its strengths, limitations and main applications.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_12.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_12.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>