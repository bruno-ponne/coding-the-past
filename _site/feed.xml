<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-22T13:50:16+02:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">My Journey Learning R as a Humanities Undergrad</title><link href="http://localhost:4000/2025/04/22/How-I-learned-R.html" rel="alternate" type="text/html" title="My Journey Learning R as a Humanities Undergrad" /><published>2025-04-22T00:00:00+02:00</published><updated>2025-04-22T00:00:00+02:00</updated><id>http://localhost:4000/2025/04/22/How-I-learned-R</id><content type="html" xml:base="http://localhost:4000/2025/04/22/How-I-learned-R.html"><![CDATA[<p><br /></p>

<h2 id="1-a-passion-for-the-past">1. A Passion for the Past</h2>

<p>Since I was a teenager, History has been one of my passions. I was very lucky in high school to have a great History teacher whom I could listen to for hours. My interest was, of course, driven by curiosity about all those dead humans in historical plots that exist no more except in books, images, movies, and — mostly — in our imagination.</p>

<p><br /></p>

<p>However, what really triggered my passion was realizing how different texts can describe the same event from such varied perspectives. We are able to see the same realities in different ways, which gives us the power  to shape our lives — and our future — ­­­into something more meaningful, if we so choose.</p>

<p><br /></p>

<h2 id="2-first-encounters-with-r">2. First Encounters with R</h2>

<p>When I began my master’s in public policy at the Hertie School in Berlin, Statistics I was a mandatory course for both management and policy analysis, the two areas of concentration offered in the course.  I began the semester certain I would choose management because I’d always struggled with mathematical abstractions. However, as the first semester passed, I became intrigued by some of the concepts we were learning in Statistics I. Internal and external validity, selection bias, and regression to the mean were concepts that truly captured my interest and have applications far beyond statistics, reaching into many areas of research.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_27_01.jpg" alt="The Hertie School Building" />
The Hertie School Building. Source: Zugzwang1972, CC BY 3.0, via Wikimedia Commons</p>

<p><br /></p>

<p>Then came our first R programming assignments. I struggled endlessly with function syntax and felt frustrated by every error — especially since I needed strong grades to pass Statistics I. Yet each failure also felt like a challenge I couldn’t put down. I missed RStudio’s help features and wasted time searching the web for solutions, but slowly the pieces began to click.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-discovering-datacamp">3. Discovering DataCamp</h2>

<p>By semester’s end, I was eager to dive deeper. That’s when I discovered that as Master candidates, we had free access to DataCamp — a platform that combines short, focused videos with in-browser coding exercises, no software installation required. The instant feedback loop—seeing my ggplot chart render in seconds—gave me a small win every day. Over a few months, I completed courses from <strong>Introduction to R</strong> and <strong>ggplot2</strong> to more advanced statistical topics. DataCamp’s structured approach transformed my frustration into momentum. <a href="https://datacamp.pxf.io/nXWj4a">Introduction to Statistics in R</a> was one of my first courses and helped me pass Stats I with a better grade. You can test the first chapter for free to see if it matches your learning style.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_27_02.png" alt="DataCamp Methodology" />
DataCamp Method. Source: AI Generated.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> The links to DataCamp in this post are affiliate links. That means if you click them and sign up, I receive a small share of the subscription value from DataCamp, which helps me maintain this blog. That being said, there are many free resources on the Internet that are very effective for learning R without spending any money. One suggestion is the HTML free version of "R Cookbook" that helped me a lot to deepen my R skills.:
        
        <a href="https://rc2e.com/" target="_blank"> R Cookbook</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-building-confidence-and-choosing-policy-analysis">4. Building Confidence and Choosing Policy Analysis</h2>

<p>Armed with new R skills, I chose policy analysis for my concentration area—and I’ve never looked back. Learning to program in R created a positive feedback loop for my statistical learning, as visualizations and simulations gave life to abstract concepts I once found very difficult to understand.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-pandemic-pivot">5. Pandemic Pivot</h2>

<p>Then the pandemic of 2020 hit, which in some ways only fueled my R learning since we could do little besides stay home at our computers. Unfortunately, my institution stopped providing us with free DataCamp accounts, but I continued to learn R programming and discovered <a href="https://stackoverflow.com/questions">Stack Overflow</a> — a platform of questions and answers for R and Python, among other languages — to debug my code.</p>

<p><br /></p>

<p>I also began reading more of the official documentation for functions and packages, which was not as pleasant or easy as watching DataCamp videos, which summarized everything for me. As I advanced, I had to become more patient and persevere to understand the packages and functions I needed. I also turned to books—mostly from <a href="https://www.oreilly.com/">O’Reilly Media</a>, a publisher with extensive programming resources. There are also many free and great online books, such as <a href="https://r4ds.had.co.nz/introduction.html">R for Data Science</a>.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_27_03.png" alt="My resources to learn R" />
Main Resources Used to Learn R. Source: Author.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-thesis--beyond">6. Thesis &amp; Beyond</h2>

<p>In 2021, I completed my master’s degree with a thesis evaluating educational policies in Brazil. To perform this analysis, I used the synthetic control method—implemented via an <a href="https://cran.r-project.org/web/packages/Synth/index.html">R package</a>. If you’re interested, you can read my thesis here: <a href="https://doi.org/10.1590/1981-3821202300010005">Better Incentives, Better Marks: A Synthetic Control Evaluation of Educational Policies in Ceará, Brazil</a>. 
My thesis is also an example of how you can learn R by working on a project with goals and final results. It also introduced me to <a href="https://git-scm.com/">Git</a> and <a href="https://github.com/">GitHub</a>, a well known system for controling the versions of your coding projects and a nice tool to showcase your coding skills.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-ai-as-a-resource-to-learn-programming">7. AI as a resource to learn programming</h2>

<p>Although AI wasn’t part of my initial learning journey, I shouldn’t overlook its growing influence on programming in recent years. I wouldn’t recommend relying on AI for your very first steps in R, but it can be a valuable tool when you’ve tried to accomplish something and remain stuck. Include the error message you’re encountering in your prompt, or ask AI to explain the code line by line if you’re unsure what it does. However, avoid asking AI to write entire programs or scripts for you, as this will limit your learning and you may be surprised by errors. Use AI to assist you, but always review its suggestions and retain final control over your code.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="key-takeaways">Key Takeaways</h2>

<ul class="conclusion-list">
  <li>Learning R as a humanities major can be daunting, but persistence pays off.</li>
  <li>Embrace small, consistent wins — DataCamp’s bite‑sized exercises are perfect for that.</li>
  <li>Visualizations unlock understanding — seeing data come to life cements concepts.</li>
  <li>Phase in documentation and books when you need to tackle more advanced topics.</li>
  <li>Use AI to debug your code and explain what the code of other programmers does.</li>
  <li>Join the community — Stack Overflow, GitHub, online books and peer groups bridge gaps when videos aren’t enough.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="ready-to-start-your-own-journey">Ready to Start Your Own Journey?</h2>

<p>If you’re also beginning or if you want to deepen your R skills, DataCamp is a pleasant and productive way to get going. Using my discounted link below supports Coding the Past and helps me keep fresh content coming on my blog:</p>

<p><br /></p>

<h3 id="start-learning-r-on-datacamp-with-my-discounted-link"><a href="https://datacamp.pxf.io/Wy2ybP">Start Learning R on DataCamp with My Discounted Link</a></h3>

<p><br /></p>

<p><br /></p>

<p>What was the biggest challenge you faced learning R? Share your story in the comments below!</p>]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics," /><category term="digitalhumanities" /><summary type="html"><![CDATA[Discover how a public policy master's student transformed frustration into successfully learning R — from first syntax errors in RStudio to mastering ggplot2 on DataCamp.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_27.png" /><media:content medium="image" url="http://localhost:4000/lesson_27.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Understand geom_bar and its statistical transformations</title><link href="http://localhost:4000/2025/02/24/geom_bar.html" rel="alternate" type="text/html" title="Understand geom_bar and its statistical transformations" /><published>2025-02-24T00:00:00+01:00</published><updated>2025-02-24T00:00:00+01:00</updated><id>http://localhost:4000/2025/02/24/geom_bar</id><content type="html" xml:base="http://localhost:4000/2025/02/24/geom_bar.html"><![CDATA[<p><br /></p>

<p><strong>ggplot2</strong> is a powerful and well-known data visualization package for R. But do you know what <strong>gg</strong> stands for? It actually refers to the <strong>Grammar of Graphics</strong>, a conceptual framework for understanding and constructing graphs. The core idea behind the Grammar of Graphics is that a plot consists of multiple layers.</p>

<p><br /></p>

<p>The most well-known layers are <strong>geometries</strong> — the geometric forms that represent data in a plot — and <strong>aesthetic mappings</strong>, which connect data to specific visual properties. A lesser-known but equally important layer is the <strong>statistical layer</strong>, which transforms the original data to enable specific types of plots. This may sound complex at first, but it’s actually quite intuitive. In this lesson, we will explore how <code class="language-plaintext highlighter-rouge">geom_bar()</code> applies a statistical transformation to make bar plots simpler and more straightforward.</p>

<p><br /></p>

<h2 id="1-how-does-geom_bar-work-by-default">1. How does geom_bar work by default?</h2>

<p>To exemplify geom_bar’s default behavior, we will use <a href="https://github.com/sharonhoward/ll-coroners/blob/master/coroners_inquests/wa_coroners_inquests_v1-1.tsv">a dataset</a> about Westminster inquests conducted between 1760 and 1799. 
These inquests document investigations into deaths that occurred under sudden, unexplained, or suspicious circumstances. To learn more, please visit the project webpage <a href="https://www.londonlives.org/">London Lives 1690-1800: Crime, Poverty and Social Policy in the Metropolis</a>.</p>

<p><br /></p>

<p>The first step is to load the data using <code class="language-plaintext highlighter-rouge">read_tsv()</code>, a function from the <code class="language-plaintext highlighter-rouge">readr</code> package used to read <em>tab-separated values</em>. The verdict variable tells us the conclusion of the investigation, which could be, for example that the death was a homicide or a suicide. 
To simplify our analysis we unify ‘suicide (delirious)’, ‘suicide (felo de se)’, and ‘suicide (insane)’ into a single category: ‘suicide’. We also filter out observations where the verdict or gender is missing.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s2">"wa_coroners_inquests_v1-1.tsv"</span><span class="p">)</span><span class="w">

</span><span class="n">df_prep</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"-"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">gender</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"m"</span><span class="p">,</span><span class="w"> </span><span class="s2">"f"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recode</span><span class="p">(</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="s2">"suicide (delirious)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (felo de se)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (insane)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p>Each row of <code class="language-plaintext highlighter-rouge">df_prep</code> contains data about the investigation of one death, including the date, gender, and verdict. 
We would like to have a first overview about the verdicts to determine how many deaths were classified as homicide, suicide, accidental, etc. 
The default behavior of geom_bar makes it very easy to visualize this information:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">theme_set</span><span class="p">(</span><span class="n">theme_bw</span><span class="p">())</span><span class="w"> </span><span class="c1"># chooses a lighter ggplot2 theme: theme_bw()</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_prep</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">verdict</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_26_01.png" alt="geom_bar plot" /></p>

<p><br /></p>

<p>Why does this work if we mapped a categorical variable to x? Where does ggplot2 get the count for each cause of death? 
Well, every geometry in ggplot2 has an associated default statistical transformation that tells ggplot whether it should consider the raw input data or whether it should first transform the dataset and then plot it. 
In the case of geom_bar, the default stat is “count”. That means ggplot will create a second dataframe with the values of verdict and their respective frequency/count, as shown in the figure below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_26_02.png" alt="Statistical transformation in ggplot2" /></p>

<p><br /></p>

<p>As you can see, ggplot2 does this work for you. But what if your data has already been transformed? In that case, you need to explicitly set <code class="language-plaintext highlighter-rouge">geom_bar(aes(x=verdict, y = count), stat = "identity")</code>. If stat is set to “identity”, then ggplot takes the raw input data and does not perform any transformation. In that case, note that an x and y are necessary.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content">  You can use the command `layer_data(plot = last_plot(), i = 1L)` to check out the data ggplot transformed for you. Use this command after the plot command. It will get the transformed data from the last plot, regarding i = 1L, or the first layer of our plot (geom_bar in this case).
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-reorder-geom_bar">2. How to reorder geom_bar?</h2>

<p>One improvement we can make to our plot is to reorder the verdicts so that the most frequent one comes first. This can be done with the help of the <a href="https://forcats.tidyverse.org/">forcats package</a>. One of its functions, <code class="language-plaintext highlighter-rouge">fct_infreq()</code>, reorders a variable based on the frequency of its values (largest first).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_prep</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">fct_infreq</span><span class="p">(</span><span class="n">verdict</span><span class="p">)))</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<p><img src="/assets/images/lesson_26_03.png" alt="reorder geom_bar" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-stacked-and-percent-stacked-geom_bar">3. Stacked and percent stacked geom_bar</h2>

<p>Imagine now that you would like to investigate how the verdicts compare across genders, highlighting the cases involving female individuals. 
This can easily be achieved by mapping gender to the fill aesthetics. The result is two bars on top of each other, one referring to male and other to female.</p>

<p><br /></p>

<p>In the code below, we also make our plot more visually attractive by changing the colors, legend title, and labels. Moreover, we adjust the axis labels.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_prep</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">fct_infreq</span><span class="p">(</span><span class="n">verdict</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gender</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"#f79326"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gray"</span><span class="p">),</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Number of Cases"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_26_04.png" alt="stacked geom_bar" /></p>

<p><br /></p>

<p>The stacked bar chart above results from the default <code class="language-plaintext highlighter-rouge">position = "stack"</code> configuration. 
To better visualize the distribution of female and male cases for each cause of death (verdict), we can display the percentages instead of absolute counts. 
This approach makes it easier to see in which verdict category females have a higher proportion.
To achieve this, you need to change position to <code class="language-plaintext highlighter-rouge">position = "fill"</code> in geom_bar().</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_prep</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">fct_infreq</span><span class="p">(</span><span class="n">verdict</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gender</span><span class="p">),</span><span class="w"> </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"fill"</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"#f79326"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gray"</span><span class="p">),</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_26_05.png" alt="percent stacked geom_bar" /></p>

<p><br /></p>

<p>Now it is clearer that, among all causes of death, homicides have the highest proportion of women. Moreover, the smallest percentage of female cases corresponds to accidental deaths.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-use-stat_bin-to-group-observations-by-date">4. Use stat_bin to group observations by date</h2>

<p>Further examining the data, you want to study how the proportion of suicide cases among women has evolved over time. 
One way to do this is by filtering only suicide verdicts and visualizing the proportion of female suicide cases across time. 
Since we have data spanning multiple years, it is a good idea to group them into bins and count the cases within each period. 
This can be done using stat_bin(), which works similarly to geom_bar() but groups data into bins.</p>

<p><br />
Since our dataset is in a tidy format — where each row represents a single case — we can count the number of occurrences within a specific bin to determine how many cases fall into each time interval. That’s why we set x to doc_date, the date of the investigation. Additionally, we can specify the number of bins by setting a value for the bins parameter. In the code below, we set bins = 10. We also set color = “white” to create white borders around the bars. Apart from these modifications, the code remains the same as in the geom_bar() example above.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-26-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-26-6">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_prep_2</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">stat_bin</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">doc_date</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gender</span><span class="p">),</span><span class="w"> 
             </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"fill"</span><span class="p">,</span><span class="w"> 
             </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"#f79326"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gray"</span><span class="p">),</span><span class="w"> </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_26_06.png" alt="percent stacked geom_bar for suicide cases" /></p>

<p><br /></p>

<p>The plot shows a slight decreasing trend in the proportion of female suicide cases between 1760 and 1800. It also highlights that, throughout the entire period, males accounted for at least 60% of suicide cases.</p>

<p><br /></p>

<p>I would love to hear any feedback or suggestions for improving the plots above. Feel free to share your thoughts or ask any questions in the comments below! Happy coding!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>geom_bar and stat_bin are powerful tools to depict frequencies of subgroups in your data;</li>
  <li>The geom_bar <code class="language-plaintext highlighter-rouge">stat</code> and <code class="language-plaintext highlighter-rouge">position</code> parameters allow users to plot several kinds of bar plots, turning geom_bar into a versatile visualization tool.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<p>**I would like to thank June Choe for <a href="https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2/">this brilliant explanation</a> about stat_layers in ggplot2.
Also, thanks a lot to <a href="https://sharonhoward.org/">Sharon Howard</a> for preparing this instigating dataset and for making it available.</p>]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="ggplot2" /><summary type="html"><![CDATA[Learn how to use geom_bar() in ggplot2 to create bar charts effortlessly. Discover default behaviors, statistical transformations, stacking, reordering, and more to improve your data visualizations in R]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_26.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_26.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to calculate Z-Scores in Python</title><link href="http://localhost:4000/2024/11/28/Python-z-score.html" rel="alternate" type="text/html" title="How to calculate Z-Scores in Python" /><published>2024-11-28T00:00:00+01:00</published><updated>2024-11-28T00:00:00+01:00</updated><id>http://localhost:4000/2024/11/28/Python-z-score</id><content type="html" xml:base="http://localhost:4000/2024/11/28/Python-z-score.html"><![CDATA[<p><br /></p>

<p>If you’ve worked with statistical data, you’ve likely encountered z-scores. A z-score measures how far a data point is from the mean, expressed in terms of standard deviations. It helps identify outliers and compare data distributions, making it a vital tool in data science.</p>

<p><br /></p>

<p>In this guide, we’ll show you how to calculate z-scores in Python using a custom function and built-in libraries like SciPy. You’ll also learn to visualize z-scores for better insights.</p>

<p><br /></p>

<h2 id="1-what-is-a-z-score">1. What is a z-score?</h2>

<p>A z-score measures how many standard deviations a data point is from the mean. The formula for calculating the z-score of a data point X is:</p>

\[Z_{X} = \frac{X - \overline{X}}{S}\]

<p>Where:</p>

<ul class="conclusion-list">
  <li>\(Z_{X}\) is the z score of the point \(X\);</li>
  <li>\(X\) is the value for which we want to calculate the Z score;</li>
  <li>\(\overline{X}\) is the mean of the sample;</li>
  <li>\(S\) is the standard deviation of the sample.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-python-z-score-using-a-custom-function">2. Python z score using a custom function</h2>

<p>A custom function allows you to implement the z-score formula directly. Here’s how to define and use it in Python:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-25-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-25-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">calculate_z</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">X_mean</span><span class="p">,</span> <span class="n">X_sd</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">X</span> <span class="o">-</span> <span class="n">X_mean</span><span class="p">)</span> <span class="o">/</span> <span class="n">X_sd</span></code></pre></figure>


</div>

<p><br /></p>

<p>The function takes three arguments:</p>
<ul class="conclusion-list">
  <li>a vector <strong>X</strong> of values for which you want to calculate the z-scores, like a pandas dataframe column, for example;</li>
  <li>the mean of the values in <strong>X</strong>;</li>
  <li>the standard deviation of the values in <strong>X</strong>.</li>
</ul>

<p><br /></p>

<p>Finally, in the return clause, we apply the z-score formula explained above.</p>

<p><br /></p>

<p>To test our function, we will use data from Playfair (1821). He collected data regarding the price of wheat and the typical weekly wage for a “good mechanic” in England from 1565 to 1821. His objective was to show how well-off working men were in the 19th century. This dataset is available in the HistData R package and also on the <a href="https://vincentarelbundock.github.io/Rdatasets/">webpage of Professor Vincent Arel-Bundock</a>, a great source of datasets. It consists of 3 variables: year, price of wheat (in Shillings) and weekly wages (in Shillings).</p>

<p><br /></p>

<p>We will be calculating the z-scores for the weekly wages. First we load the dataset directly from the website, as indicated in the code below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-25-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-25-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Wheat.csv</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Wages</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Wages</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">())</span>

<span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wages</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">calculate_z</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Wages</span><span class="sh">"</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Wages</span><span class="sh">"</span><span class="p">].</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Wages</span><span class="sh">"</span><span class="p">].</span><span class="nf">std</span><span class="p">())</span></code></pre></figure>


</div>

<p><br /></p>

<p>The average weekly wage during the period was 11.58 Shillings, with a standard deviation of 7.34. With this information, we can calculate the Z score for each observation in the dataset. This is done and stored in a new column called “z-score_wages”.</p>

<p><br /></p>

<p>If you check the first row of the data frame, you will find out that in 1565 the z score was around -0.9, that is, the wages were 0.9 standard deviations below the mean of the values for the whole period.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-python-z-score-using-scipy">3. Python z score using SciPy</h2>

<p>A second option to calculate z-scores in Python is to use the <code class="language-plaintext highlighter-rouge">zscore</code> method of the SciPy library as shown below. Ensure you set a policy for handling missing values if your dataset is incomplete.</p>

<p><br /></p>

<p>In the code below, we calculate the z-scores for Wheat prices. If you look at the z-score summary statistics, you will see that the price of wheat varied between -1.13 and 3.65 standard deviations away from the mean in the observed period.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-25-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-25-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">stats</span>

<span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wheat</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="nf">zscore</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Wheat</span><span class="sh">"</span><span class="p">],</span> <span class="n">nan_policy</span><span class="o">=</span><span class="sh">"</span><span class="s">omit</span><span class="sh">"</span><span class="p">)</span>

<span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wheat</span><span class="sh">"</span><span class="p">].</span><span class="nf">describe</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-visualising-z-scores">3. Visualising z scores</h2>

<p>Below you can better visualize the basic idea of z scores: to measure how far away a data point is from the mean in terms of standard deviations. This visualization was created in <a href="https://d3js.org/">D3</a>, a JavaScript library for interactive data visualization. Click “See average wage” to see the averave wage for the whole period. Then check out how far from the mean each data point is and finally note that the z-score consists of this distance in terms of standard deviation.</p>

<div id="chart"></div>
<div id="buttons">
    <button class="myBtn" id="showHorizontalLine">1. See Average Wage</button>
    <button class="myBtn" id="showPointLines">2. See Distance to the Mean</button>
    <button class="myBtn" id="seeZScores">3. See Z-Scores</button>
    <button class="myBtn" id="reset">Reset</button>
</div>

<script>
    const margin = { top: 50, right: 50, bottom: 70, left: 70 }; // Increased margins for labels
    const width = 600; // Inner width of the plot
    const height = 400; // Inner height of the plot
    const outerWidth = width + margin.left + margin.right;
    const outerHeight = height + margin.top + margin.bottom;

    // Create SVG with viewBox for responsiveness
    const svg = d3.select("#chart")
        .append("svg")
        .attr("viewBox", `0 0 ${outerWidth} ${outerHeight}`) // Includes margins
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    const linesGroup = svg.append("g").attr("class", "lines-group");
    const circlesGroup = svg.append("g").attr("class", "circles-group");

    const tooltip = d3.select("body")
        .append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

    let currentMode = 'wage'; // Tracks current mode ('wage' or 'z-score')
    let averageShown = false; // Tracks if the average line is displayed

    // Load data
    d3.csv("https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Wheat.csv").then(data => {
        data = data.filter(d => {
            d.Year = parseFloat(d.Year);
            d.Wages = parseFloat(d.Wages);
            return !isNaN(d.Year) && !isNaN(d.Wages);
        });

        const avgWage = d3.mean(data, d => d.Wages);
        const stdDevWage = d3.deviation(data, d => d.Wages);
        data.forEach(d => {
            d.zScore = (d.Wages - avgWage) / stdDevWage;
        });

        let yScale = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.Wages)])
            .range([height, 0]);

        const xScale = d3.scaleLinear()
            .domain([1550, d3.max(data, d => d.Year)]) // X-axis starts at 1550
            .range([0, width]);

        const yAxis = svg.append("g")
            .attr("class", "y-axis axis")
            .call(d3.axisLeft(yScale).tickFormat(d3.format(".2f")));

        const xAxis = svg.append("g")
            .attr("class", "x-axis axis")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(xScale).tickFormat(d3.format("d")));

        // Add axis labels
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", height + 50) // Space for the label below the x-axis
            .style("text-anchor", "middle")
            .text("Year");

        svg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", -50) // Space for the label beside the y-axis
            .attr("x", -height / 2)
            .style("text-anchor", "middle")
            .text("Wages");

        const circles = circlesGroup.selectAll("circle")
            .data(data)
            .enter()
            .append("circle")
            .attr("cx", d => xScale(d.Year))
            .attr("cy", d => yScale(d.Wages))
            .attr("r", 5)
            .attr("fill", "#FF6885")
            .on("mouseover", (event, d) => {
                tooltip.transition().duration(200).style("opacity", 1);
                tooltip.html(`Year: ${d.Year}<br>Wages: ${d.Wages.toFixed(2)}<br>Z-Score: ${d.zScore.toFixed(2)}`)
                    .style("left", `${event.pageX + 10}px`)
                    .style("top", `${event.pageY - 20}px`);
            })
            .on("mouseout", () => {
                tooltip.transition().duration(200).style("opacity", 0);
            });

        const avgLine = svg.append("line")
            .attr("class", "average-line")
            .attr("x1", 0)
            .attr("x2", width)
            .attr("y1", yScale(avgWage))
            .attr("y2", yScale(avgWage))
            .style("stroke", "white")
            .style("stroke-dasharray", "5,5")
            .style("opacity", 0);

        // Function to draw lines
        function drawLines() {
            const averageValue = currentMode === 'wage' ? avgWage : 0;

            linesGroup.selectAll(".point-line")
                .data(data)
                .join("line")
                .attr("class", "point-line")
                .attr("x1", d => xScale(d.Year))
                .attr("x2", d => xScale(d.Year))
                .attr("y1", d => yScale(currentMode === 'wage' ? d.Wages : d.zScore))
                .attr("y2", d => yScale(currentMode === 'wage' ? d.Wages : d.zScore))
                .style("stroke", "white")
                .transition()
                .duration(1000)
                .attr("y2", yScale(averageValue));
        }

        // Event handlers
        document.getElementById("showHorizontalLine").addEventListener("click", () => {
            if (!averageShown) {
                avgLine.transition()
                    .duration(1000)
                    .style("opacity", 0.5);
                averageShown = true;
            }
        });

        document.getElementById("showPointLines").addEventListener("click", () => {
            if (averageShown) {
                drawLines();
            }
        });

        document.getElementById("seeZScores").addEventListener("click", () => {
            if (currentMode !== 'z-score') {
                // Remove existing lines
                linesGroup.selectAll(".point-line").remove();

                // Update scale to z-scores
                yScale = d3.scaleLinear()
                    .domain([d3.min(data, d => d.zScore), d3.max(data, d => d.zScore)])
                    .range([height, 0]);

                yAxis.transition()
                    .duration(1000)
                    .call(d3.axisLeft(yScale).tickFormat(d3.format(".2f")));

                avgLine.transition()
                    .duration(1000)
                    .attr("y1", yScale(0))
                    .attr("y2", yScale(0))
                    .style("opacity", 0.5);

                circles.transition()
                    .duration(1000)
                    .attr("cy", d => yScale(d.zScore));

                currentMode = 'z-score';
                averageShown = true; // Ensure the average is shown
                drawLines();
            }
        });

        document.getElementById("reset").addEventListener("click", () => {
            yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Wages)])
                .range([height, 0]);

            yAxis.transition()
                .duration(1000)
                .call(d3.axisLeft(yScale).tickFormat(d3.format(".2f")));

            avgLine.transition()
                .duration(1000)
                .attr("y1", yScale(avgWage))
                .attr("y2", yScale(avgWage))
                .style("opacity", 0);

            circles.transition()
                .duration(1000)
                .attr("cy", d => yScale(d.Wages));

            linesGroup.selectAll(".point-line").remove();

            currentMode = 'wage';
            averageShown = false;
        });
    });
</script>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-visualizing-z-scores-with-matplotlib">4. Visualizing z scores with Matplotlib</h2>

<p>The code below plots the wage z scores over time and shows them as the distance from the point to the mean, as demonstrated in the D3 visualization above. Please consult the lesson <a href="/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html">‘Storytelling with Matplotlib - Visualizing historical data’</a> to learn more about Matplotlib visualizations.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-25-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-25-4">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># Calculate mean wage
</span><span class="n">mean_wage</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wages</span><span class="sh">"</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>

<span class="c1"># Create the plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="c1"># Scatter plot of wages over years
</span><span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Year</span><span class="sh">"</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wages</span><span class="sh">"</span><span class="p">],</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">#FF6885</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Wage Z-scores</span><span class="sh">"</span><span class="p">,</span> <span class="n">markeredgewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Add a horizontal line for the mean wage
</span><span class="n">ax</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">mean_wage</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">dashed</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Z-score = </span><span class="si">{</span><span class="n">mean_wage</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Add gray lines connecting points to the mean
</span><span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">wage</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">Year</span><span class="sh">"</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">z-score_wages</span><span class="sh">"</span><span class="p">]):</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="n">year</span><span class="p">,</span> <span class="n">year</span><span class="p">],</span> <span class="p">[</span><span class="n">mean_wage</span><span class="p">,</span> <span class="n">wage</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">dotted</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Customize the plot
</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Year</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Z-scores</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Z-scores Over Time</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>

<span class="c1"># Show the plot
</span><span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_25_01.png" alt="Python z scores over time plotted with matplolib" /></p>

<p><br /></p>

<p>Have questions or insights? Leave a comment below, and I’ll be happy to help.</p>

<p>Happy coding!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>A z score is a measure of how many standard deviations a data point is away from the mean. It can be easily calculated in Python;</li>
  <li>You can visualize z-scores using traditional python libraries like Matplotlib or Seaborn.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="statistics" /><summary type="html"><![CDATA[Master statistics by learning how to calculate and visualize Z-scores in Python. Learn data visualization techniques and enhance your statistical analysis skills!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_25.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_25.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sentiment Analysis in R</title><link href="http://localhost:4000/2024/10/21/Sentiment-analysis-in-R.html" rel="alternate" type="text/html" title="Sentiment Analysis in R" /><published>2024-10-21T00:00:00+02:00</published><updated>2024-10-21T00:00:00+02:00</updated><id>http://localhost:4000/2024/10/21/Sentiment-analysis-in-R</id><content type="html" xml:base="http://localhost:4000/2024/10/21/Sentiment-analysis-in-R.html"><![CDATA[<p><br /></p>

<p>In this lesson on sentiment analysis in R, you will learn how to perform sentiment analysis using the <code class="language-plaintext highlighter-rouge">sentimentr</code> package. To demonstrate the use of the package, you will compare the sentiment in the speeches of Adolf Hitler and Franklin Roosevelt about the declaration of war by Germany against the United States in 1941.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> These speeches are analyzed here strictly for research purposes. Read more about an academic project to make Hitler speeches available for research:
        
        <a href="https://aktuelles.uni-frankfurt.de/en/english/putting-hitler-research-on-a-new-footing/" target="_blank"> Collection of Adolf Hitlers Speeches, 1933-1945</a>
        
    </div>
</div>

<p><br /></p>

<h2 id="1-what-is-sentiment-analysis">1. What is sentiment analysis?</h2>
<p>Sentiment analysis or opinion mining consists of detecting the emotional tone of natural language. It works by assigning an emotion or emotional score to each word in a text. Some methods consider each word separately and others approach them in a wider context, for example, by evaluating their emotion considering its position in a sentence.</p>

<p><br /></p>

<p>In this post we will be taking the latter approach, because the context of the word not rarely influences the emotion conveyed by it. 
In this context, the <a href="https://github.com/trinker/sentimentr"><code class="language-plaintext highlighter-rouge">sentimentr</code> package</a> is a great option for sentiment analysis in R, because it calculates the sentiment at the sentence level. 
Each sentence is assigned a score that, in our example, varies from around -1.2 (very negative) to around 1.2 (very positive).</p>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">sentimentr</code> package takes into account valence shifters that can change the emotion of a sentence, for example:</p>

<ul class="conclusion-list">
  <li><strong>negator</strong>: I do <strong>not</strong> like it.</li>
  <li><strong>amplifier</strong>: I <strong>really</strong> like it.</li>
  <li><strong>de-amplifier</strong>: I <strong>hardly</strong> like it.</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Check the package repository if you are interested in the math behind the methodology:
        
        <a href="https://github.com/trinker/sentimentr" target="_blank"> Rinker, Tyler W. 2021. sentimentr: Calculate Text Polarity Sentiment. Buffalo, New York.</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-get-the-data">2. How to get the data?</h2>
<p>We will gather the data for this example from two webpages using web scraping. If you want to learn more about web scraping, please consult  <a href="/2024/09/10/How-to-webscrape-in-R.html">‘How to webscrape in R?’</a>.
The <a href="https://rvest.tidyverse.org/">rvest</a> package will be used to webscrape, specifically, the following three functions:</p>

<ul class="conclusion-list">
  <li><strong>read_html</strong>: Extracts the HTML source code associated with an URL;</li>
  <li><strong>html_elements</strong>: Extracts the relevant HTML elements from the HTML code;</li>
  <li><strong>html_text</strong>: Extracts the text (content) from the HTML elements;</li>
</ul>

<p><br /></p>

<p>The first step is to load the necessary packages and to save the URLs of the two speeches in variables.
Please follow the instructions of the <a href="https://github.com/trinker/sentimentr"><code class="language-plaintext highlighter-rouge">sentimentr</code> package</a> webpage to install it.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">rvest</span><span class="p">)</span><span class="w"> </span><span class="c1"># for webscraping</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidytext</span><span class="p">)</span><span class="w"> </span><span class="c1"># for cleaning text data</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w"> </span><span class="c1"># for data preparation</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w"> </span><span class="c1"># for data viz</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">sentimentr</span><span class="p">)</span><span class="w"> </span><span class="c1"># for sentiment analysis in R</span><span class="w">


</span><span class="n">url_h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://en.wikisource.org/wiki/Adolf_Hitler%27s_Declaration_of_War_against_the_United_States"</span><span class="w">
</span><span class="n">url_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://www.archives.gov/milestone-documents/president-franklin-roosevelts-annual-message-to-congress#transcript"</span></code></pre></figure>


</div>

<p><br /></p>

<p>If you inspect the source code of the webpages referenced above, you will realise that while the text from Wikipedia can be gathered by simply extracting the <code class="language-plaintext highlighter-rouge">p</code> elements,
for the speech from the American archives, we need to specify the particular <code class="language-plaintext highlighter-rouge">div</code> element where the speech is located. This is because the webpage contains an initial section with several paragraphs introducing President Roosevelt’s speech. 
In the code below, note that Roosevelt’s speech requires an additional step to specify that the speech is within the <code class="language-plaintext highlighter-rouge">div.col-sm-9</code> (a <code class="language-plaintext highlighter-rouge">div</code> with the class “col-sm-9”). 
Also, note that we exclude the first text element of Hitler’s speech because it is actually metadata about the speech.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Webscraping Hitler´s speech</span><span class="w">
</span><span class="n">speech_h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="n">url_h</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_elements</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_text</span><span class="p">()</span><span class="w">

</span><span class="c1"># Webscraping Roosevelt´s speech</span><span class="w">
</span><span class="n">speech_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="n">url_r</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_elements</span><span class="p">(</span><span class="s2">"div.col-sm-9"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_elements</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_text</span><span class="p">()</span><span class="w">

</span><span class="c1"># Excluding first text element of Hitler's speech, because it is meta data</span><span class="w">
</span><span class="n">speech_h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">speech_h</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">155</span><span class="p">]</span><span class="w"> </span></code></pre></figure>
 

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-performing-sentiment-analysis-in-r-with-sentimentr">3. Performing sentiment analysis in R with sentimentr</h2>

<p>Our next objective is to further split each of the paragraphs of our speeches into sentences. This can be achieved with the <code class="language-plaintext highlighter-rouge">get_sentences</code> function from the <code class="language-plaintext highlighter-rouge">sentimentr</code> package. 
This function takes a character vetor, splits each element of this vector in sentences and delivers them in a list object. Each paragraph of our speeches becomes one list element that consists of a character vector containing the sentences of the respective paragraph.
<br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sentences_h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_sentences</span><span class="p">(</span><span class="n">speech_h</span><span class="p">)</span><span class="w">
</span><span class="n">sentences_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_sentences</span><span class="p">(</span><span class="n">speech_r</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br /></p>

<p><img src="/assets/images/lesson_24_01.png" alt="Explanation of an R list and its elements" /></p>

<p><br /></p>

<p>Finally we can apply sentiment analysis to our sentences. We do that by using the <code class="language-plaintext highlighter-rouge">sentiment</code> function. It delivers a data frame containing:</p>

<ul class="conclusion-list">
  <li><strong>element_id</strong>: identifies the paragraph;</li>
  <li><strong>sentence_id</strong>: identifies the sentence;</li>
  <li><strong>word_count</strong>: informs how many words the sentence has;</li>
  <li><strong>sentiment</strong>: informs the sentiment score attributed to that sentence;</li>
</ul>

<p><br />
In the code below we also check the most negative sentence in both speeches by ordering the data frames by sentiment (ascending) and getting the IDs of the sentences.
Note that to access a sentence in the list, you use the following syntax: <code class="language-plaintext highlighter-rouge">list[[element_id]][sentence_id]</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sentiment_h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sentiment</span><span class="p">(</span><span class="n">sentences_h</span><span class="p">)</span><span class="w">
</span><span class="n">sentiment_r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sentiment</span><span class="p">(</span><span class="n">sentences_r</span><span class="p">)</span><span class="w">

</span><span class="c1"># Checking the most negative sentences (element n sentence id)</span><span class="w">
</span><span class="n">sentiment_h</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">arrange</span><span class="p">(</span><span class="n">sentiment</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">head</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="n">sentiment_r</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">arrange</span><span class="p">(</span><span class="n">sentiment</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">head</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="c1"># Checking the most negative sentences (text)</span><span class="w">

</span><span class="n">sentences_h</span><span class="p">[[</span><span class="m">148</span><span class="p">]][</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">sentences_r</span><span class="p">[[</span><span class="m">39</span><span class="p">]][</span><span class="m">1</span><span class="p">]</span></code></pre></figure>
 

</div>

<p><br /></p>
<ul class="conclusion-list">
  <li>Hitler’s most negative sentence: <em>The government of the United States of America, having violated in the most flagrant manner and in ever increasing measure all rules of neutrality in favor of the adversaries of Germany, and having continually been guilty of the most severe provocations toward Germany ever since the outbreak of the European war, brought on by the British declaration of war against Germany on 3 September 1939, has finally resorted to open military acts of aggression.</em></li>
  <li>Roosevelt’s most negative sentence: <em>I am not satisfied with the progress thus far made.</em></li>
</ul>

<p><br /></p>

<p>The next step is to visualize how the sentiment of both authors changed over the duration of the speech. For that, we will add two variables to the dataframe.
One to identify the author of the speech and the other to identify the order of the sentence in the speech (a sort of time variable). We also union the two data frames to make the plot coding with <code class="language-plaintext highlighter-rouge">ggplot2</code> easier.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># adding a column to identify author and sentence order</span><span class="w">
</span><span class="n">sentiment_h</span><span class="o">$</span><span class="n">author</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"Adolf Hitler"</span><span class="w">
</span><span class="n">sentiment_h</span><span class="o">$</span><span class="n">sentence_n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">rownames</span><span class="p">(</span><span class="n">sentiment_h</span><span class="p">))</span><span class="w">

</span><span class="n">sentiment_r</span><span class="o">$</span><span class="n">author</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"Franklin Roosevelt"</span><span class="w">
</span><span class="n">sentiment_r</span><span class="o">$</span><span class="n">sentence_n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">rownames</span><span class="p">(</span><span class="n">sentiment_r</span><span class="p">))</span><span class="w">

</span><span class="c1"># union of the two df</span><span class="w">
</span><span class="n">df_union</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">sentiment_h</span><span class="p">,</span><span class="w"> </span><span class="n">sentiment_r</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br /></p>

<p>To plot the sentiment using <code class="language-plaintext highlighter-rouge">ggplot2</code>, we assign the sentence order to the x axis, sentiment to the y axis and author to the color aesthetics. We then use <code class="language-plaintext highlighter-rouge">geom_point</code> to plot one point per sentence according to its sentiment and order in the speech.
We use <code class="language-plaintext highlighter-rouge">geom_smooth</code> to visualise the trend of the sentiment through the speech. Read more about <code class="language-plaintext highlighter-rouge">geom_smooth</code> <a href="https://ggplot2.tidyverse.org/reference/geom_smooth.html">here</a>.</p>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">scale_color_manual</code> layer allows us to choose the colors attributed to each author. Feel free to choose your colors and <code class="language-plaintext highlighter-rouge">ggplot2</code> theme.
To add the same ggplot2 theme as used in these plots, please check <code class="language-plaintext highlighter-rouge">theme_coding_the_past()</code>, our theme that is available here: <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization with ggplot2’</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-24-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-24-6">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df_union</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sentence_n</span><span class="p">,</span><span class="w"> 
                            </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sentiment</span><span class="p">,</span><span class="w">
                            </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">author</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_point</span><span class="p">(</span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.4</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">scale_color_manual</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">values</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="s2">"white"</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">se</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Sentence Order"</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Sentiment"</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>
 

</div>

<p><br /></p>

<p><img src="/assets/images/lesson_24_02.png" alt="Results of the sentiment analysis in R shown in a scatter plot" /></p>

<p><br /></p>

<p>Note that the length of Roosevelt’s speech is shorter compared to Hitler’s. They both approach the declaration of war made by Germany against the US,
but it is quite clear that the tone and emotions of Roosevelt are more positive. He starts low and increases the emotional tone until the end of the speech.
The amplitude of Hitler’s emotions is a lot larger and, in general, the emotions are more negative.</p>

<p><br /></p>

<p>In this case, sentiment analysis could be a powerful tool for a researcher to preselect which speeches to further analyze according to the emotional tone of interest. The method could also enrich a research comparing 
the speeches of more than two personalities and help to find personal styles and traces in the speeches of each personality. Finally, from a data science perspective, it would be interesting to know the differences 
in the results of sentiment analysis at the word level versus the analysis at the sentence level (as carried out in this post).</p>

<p><br /></p>

<p><strong>Feel free to leave your comment or question below and happy coding!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">sentimentr</code> package allows you to perform sentiment analysis in R, providing a powerful tool to estimate the emotional tone of sentences;</li>
  <li>Sentiment analysis can be a powerful tool to preselect large amounts of texts and to find particular characteristics across different authors.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="digitalhumanities" /><category term="textanalysis" /><summary type="html"><![CDATA[Learn how to carry out sentiment analysis in R and apply it to historical speeches.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_24.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_24.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to webscrape in R?</title><link href="http://localhost:4000/2024/09/10/How-to-webscrape-in-R.html" rel="alternate" type="text/html" title="How to webscrape in R?" /><published>2024-09-10T00:00:00+02:00</published><updated>2024-09-10T00:00:00+02:00</updated><id>http://localhost:4000/2024/09/10/How-to-webscrape-in-R</id><content type="html" xml:base="http://localhost:4000/2024/09/10/How-to-webscrape-in-R.html"><![CDATA[<p><br /></p>

<p>In this lesson you will learn the basics of webscraping with the <code class="language-plaintext highlighter-rouge">rvest</code> R package. To demonstrate how it works, you will extract three speeches by Adolf Hitler from Wikipedia pages and analyze their word frequencies!</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> These speeches are analysed here strictly for research purposes. Read more about an academic project to make Hitler speeches available for research:
        
        <a href="https://aktuelles.uni-frankfurt.de/en/english/putting-hitler-research-on-a-new-footing/" target="_blank"> Collection of Adolf Hitlers Speeches, 1933-1945</a>
        
    </div>
</div>

<p><br /></p>

<h2 id="1-what-is-webscraping">1. What is webscraping?</h2>
<p>Simply put, webscraping is the process of gathering data on webpages. In its basic form, it consists of downloading the HTML code of a webpage, locating in which element of the HTML structure the content of interest is and, finally, extracting and storing it locally for further data analysis.</p>

<p><img src="/assets/images/lesson_23_01.png" alt="Visual explanation of web scraping steps" /></p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Keep in mind that webscraping can be more complex if the target website uses JavaScript to render content. In this case, consider combining rvest with other libraries, as described
        
        <a href="https://www.datacamp.com/tutorial/scraping-javascript-generated-data-with-r" target="_blank"> here.</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-webscrape-in-r">2. How to webscrape in R?</h2>
<p>There are several libraries developed to webscrape in R. In this lesson, we will stick to one of the most popular, <a href="https://rvest.tidyverse.org/">rvest</a>. This library is part of the tidyverse set of libraries and allows you to use the pipe operator (%&gt;%). It is inspired by Python’s <a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> and <a href="https://robobrowser.readthedocs.io/en/latest/readme.html">RoboBrowser</a>. The basic steps for webscraping with rvest would involve using the following functions:</p>

<ul class="conclusion-list">
  <li><strong>read_html</strong>: Extracts the HTML source code associated with an URL;</li>
  <li><strong>html_elements</strong>: Extracts the relevant HTML elements from the HTML code;</li>
  <li><strong>html_text</strong>: Extracts the text (content) from the HTML elements;</li>
</ul>

<p><b></b></p>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> There is a lot of debate on whether webscraping is ethical/legal or not. It depends a lot on where you are and the kind of content and purpose of your webscraping. Usually the robots.txt file of a website gives you hints about what is allowed and disallowed in a website. For more details on this debate, please check
        
        <a href="https://r4ds.hadley.nz/webscraping#scraping-ethics-and-legalities" target="_blank"> this link.</a>
        
    </div>
</div>

<p><br /></p>

<p>To illustrate how this works, we will extract the text of three speeches made by Adolt Hitler during the Second World War. The first step is to save the url of these speeches in a variable. We also load the necessary libraries. Please install them if you haven’t already done that.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-23-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-23-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">rvest</span><span class="p">)</span><span class="w"> </span><span class="c1"># for webscraping</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidytext</span><span class="p">)</span><span class="w"> </span><span class="c1"># for cleaning text data</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w"> </span><span class="c1"># for data preparation</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w"> </span><span class="c1"># for data viz</span><span class="w">

</span><span class="n">speech_01</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://en.wikisource.org/wiki/Adolf_Hitler%27s_Address_at_the_Opening_of_the_Winter_Relief_Campaign_(4_September_1940)"</span><span class="w">
</span><span class="n">speech_02</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://en.wikisource.org/wiki/Adolf_Hitler%27s_Address_to_the_Reichstag_(4_May_1941)"</span><span class="w">
</span><span class="n">speech_03</span><span class="w"> </span><span class="o">&lt;-</span><span class="s2">"https://en.wikisource.org/wiki/Adolf_Hitler%27s_Declaration_of_War_against_the_United_States"</span></code></pre></figure>


</div>

<p><br /></p>

<p>Since we are going to extract the content of three speeches, it is a good idea to create a function to perform this task, since the same steps will repeat three times. If you inspect the URLs above, you will realize that the text content is located inside <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> (paragraph) tags. Therefore, our target is to extract these elements. Note that in Firefox and Chrome, you can inspect a webpage by right clicking any area of the page and clicking “inspect”. For other browsers the procedure should be similar. If you have difficulty finding this option, please check the browser documentation.</p>

<p><br /></p>

<p>Our <code class="language-plaintext highlighter-rouge">read_speech</code> function is pretty straightforward. The <code class="language-plaintext highlighter-rouge">read_html</code> reads the URL of the webpage and delivers the HTML of it. The pipe operator <code class="language-plaintext highlighter-rouge">%&gt;%</code> passes the output of one function to the input of the next one. <code class="language-plaintext highlighter-rouge">html_elements</code> extracts only paragraph tags from the code and, finally, <code class="language-plaintext highlighter-rouge">html_text</code> extracts the text from the paragraph tags.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-23-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-23-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">read_speech</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">url</span><span class="p">){</span><span class="w">
  </span><span class="n">speech</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_elements</span><span class="p">(</span><span class="s2">"p"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">html_text</span><span class="p">()</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">speech_04_Sep_40</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_speech</span><span class="p">(</span><span class="n">speech_01</span><span class="p">)</span><span class="w">
</span><span class="n">speech_04_May_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_speech</span><span class="p">(</span><span class="n">speech_02</span><span class="p">)</span><span class="w">
</span><span class="n">speech_11_Dec_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_speech</span><span class="p">(</span><span class="n">speech_03</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br />
At this point, if you check the results, you will note that the function delivers a text vector in which each element of the vector is one paragraph. We still need to make some adjustments because the first paragraph is only a small presentation of the speech, rather than part of it. Therefore we should eliminate the first element of the vector. For the speech of 4th of September and the one of 11th December, that is all we need to do. If you print the speech of 4th of May, you will see that the last 5 elements are also metadata and need to be excluded. The code below uses indexing to filter the data accordingly. Moreover, we transform all the dataframes into <a href="https://r4ds.had.co.nz/tibbles.html">tibble</a> - a more modern kind of dataframe - to make it easier to prepare the data in the next steps.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-23-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-23-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">speech_04_Sep_40</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">speech_04_Sep_40</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">60</span><span class="p">]</span><span class="w">
</span><span class="n">speech_04_May_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">speech_04_May_41</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">60</span><span class="p">]</span><span class="w">
</span><span class="n">speech_11_Dec_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">speech_11_Dec_41</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">155</span><span class="p">]</span><span class="w">

</span><span class="c1"># tibble creates a modern kind of dataframe with two columns: paragraph and text</span><span class="w">
</span><span class="n">speech_04_Sep_40</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tibble</span><span class="p">(</span><span class="n">paragraph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">59</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">speech_04_Sep_40</span><span class="p">)</span><span class="w"> 
</span><span class="n">speech_04_May_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tibble</span><span class="p">(</span><span class="n">paragraph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">59</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">speech_04_May_41</span><span class="p">)</span><span class="w">
</span><span class="n">speech_11_Dec_41</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tibble</span><span class="p">(</span><span class="n">paragraph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">154</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">speech_11_Dec_41</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-visualizing-the-most-frequent-words-in-hitlers-speeches">3. Visualizing the most frequent words in Hitler’s speeches</h2>

<p>Our next objective is to visualize the top 10 words in each Hitler’s speech. In order to do that, we will first prepare the data, transforming the dataframes from the previous step to contain one word per row with its respective count. Note that we will eliminate stopwords - words with little meaning for the analysis, like articles.</p>

<p><br /></p>

<p>A function called <code class="language-plaintext highlighter-rouge">count_words</code> will be created to carry out data preparation. This function will expand the dataframe from the paragraph level to the word level. This is done by <code class="language-plaintext highlighter-rouge">unnest_tokens</code>, which transforms the table to one-token-per-row. It takes the “text” column as input and outputs a “word” column. <code class="language-plaintext highlighter-rouge">anti_join</code> eliminates rows containing stopwords. If you print stopwords you can see exactly which words are being eliminated. Finally, <code class="language-plaintext highlighter-rouge">count</code> counts how many times each word occurs.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-23-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-23-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">count_words</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">speech</span><span class="p">){</span><span class="w">
    </span><span class="n">speech_count</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">speech</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">unnest_tokens</span><span class="p">(</span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">word</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">text</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">anti_join</span><span class="p">(</span><span class="n">stop_words</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
    </span><span class="n">count</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="w"> </span><span class="n">sort</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> 
</span><span class="p">}</span><span class="w">

</span><span class="n">speech_04_Sep_40_count</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">count_words</span><span class="p">(</span><span class="n">speech_04_Sep_40</span><span class="p">)</span><span class="w">
</span><span class="n">speech_04_May_41_count</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">count_words</span><span class="p">(</span><span class="n">speech_04_May_41</span><span class="p">)</span><span class="w">
</span><span class="n">speech_11_Dec_41_count</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">count_words</span><span class="p">(</span><span class="n">speech_11_Dec_41</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br /></p>

<p>Great, now we can use <code class="language-plaintext highlighter-rouge">ggplot2</code> to visualize the top 10 words in each speech. Note that we specify the dataframe of interest with index filtering to keep only the top 10 words. Note, as well, that we reorder the bar plot so that bar start from most to least frequent word. We choose a color and eliminate the y-axis label. The same can be done for the two other speeches.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-23-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-23-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">speech_04_Sep_40_count</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">,],</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">reorder</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_col</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">)</span></code></pre></figure>
 

</div>

<p><br /></p>
<ul>
  <li>Top 10 words used in Hitler’s speech of 4th September 1940</li>
</ul>

<p><img src="/assets/images/lesson_23_02.png" alt="Top 10 words used in Hitler's speech of 4th September 1940" /></p>

<p><br /></p>
<ul>
  <li>Top 10 words used in Hitler’s speech of 4th May 1941</li>
</ul>

<p><img src="/assets/images/lesson_23_03.png" alt="Top 10 words used in Hitler's speech of 4th May 1941" /></p>

<p><br /></p>
<ul>
  <li>Top 10 words used in Hitler’s speech of 11th December 1941</li>
</ul>

<p><img src="/assets/images/lesson_23_04.png" alt="Top 10 words used in Hitler's speech of 11th December 1941" /></p>

<p><br /></p>

<p>To add the same ggplot2 theme as used in these plots, please check <code class="language-plaintext highlighter-rouge">theme_coding_the_past()</code>, our theme that is available here: <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization with ggplot2’</a>.</p>

<p><br /></p>

<p>Not surprisingly, “war” is a word that reaches the top 3 in all Hitler’s speeches. It is also interesting that other words refering to Britain, Balkans and Americans reflect the stage in which the war was. For example, in the speech of 11th of December, 1941, Hitler declares war on the US and therefore we observe a high frequency of words semantically related to the US. Please, leave your comment, questions or thoughts below and happy coding!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>R can be an effective tool to perform webscraping, notably with the <code class="language-plaintext highlighter-rouge">rvest</code> package;</li>
  <li>To smoothly clean webscraped content, you may use the <code class="language-plaintext highlighter-rouge">tidytext</code> package.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="digitalhumanities" /><category term="textanalysis" /><summary type="html"><![CDATA[Learn how to webscrape in R and use it to gather real data on the Internet.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_23.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_23.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">R vs Power BI</title><link href="http://localhost:4000/2024/06/23/r-vs-powerbi.html" rel="alternate" type="text/html" title="R vs Power BI" /><published>2024-06-23T00:00:00+02:00</published><updated>2024-06-23T00:00:00+02:00</updated><id>http://localhost:4000/2024/06/23/r-vs-powerbi</id><content type="html" xml:base="http://localhost:4000/2024/06/23/r-vs-powerbi.html"><![CDATA[<p><br /></p>

<h2 id="1-what-is-r">1. What is R?</h2>
<p>R is a programming language and an environment for statistical computing and visualization. R is not a  general-purpose programming language, like Python or Java, because its focus is on statistical computing. The language is very popular in the academic environment and allows for complex calculations and algorithms.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-what-is-power-bi">2. What is Power BI?</h2>
<p>Power BI is a set of softwares and applications focused on data analysis and visualization for Business Intelligence. For this article, when we talk about Power BI, we refer to Power BI Desktop, a drag and drop application used to transform, analyse and visualize data.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-r-vs-power-bi">3. R vs Power BI</h2>

<p>Below, a list of the main differences and similarities of R and Power BI is presented for several aspects:</p>

<ul class="conclusion-list">
  <li><strong>Scope</strong>: While R is more suitable for academic and complex statistical data analysis, Power BI is more adequate for quick visual analyses. While R is common in the academic context, it can also be used in companies and industries that leverage data science for decision making. In this case, R would be used to prepare the data, train models and the Power BI to visualize the findings;</li>
  <li><strong>Learning Curve</strong>: Power BI is user-friendly and allows the creation of beautiful visualizations with a few clicks. R, on the other hand, has a steep learning curve. It requires a lot more training and reading more complex documentation before you can produce effective visualizations;</li>
  <li><strong>Interface</strong>: R is a written programming language, while most of tasks in Power BI are achieved with drag and drop actions;</li>
  <li><strong>Data Visualization</strong>: Power BI is limited in its visuals and customization options of reports and graphs, while R is flexible and versatile. There are many more chart types that can be plotted in R compared to Power BI. On the other hand, it is much easier and faster to plot appealing visualizations in Power BI compared to R;</li>
  <li><strong>Data Analysis</strong>: R provides libraries for advanced statistical operations that allow statistical inference, causal inference, machine learning and more complex analysis. Power BI is more suitable for answering simple Business Intelligence questions.</li>
  <li><strong>Price</strong>: Both platforms are free, but companies offer paid tools to enrich their functionalities.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-r-vs-power-bi-for-digital-humanities">4. R vs Power BI for digital humanities</h2>

<p>R as well as Power BI might be used for digital humanities. R is perfect for analyses and visualizations for a scientific article. It is also the right option if you would like to implement complex algorithms. Power BI is a great fit if you would like to easily produce beautiful plots and enable user interactivity for a broader audience.</p>

<p><br /></p>

<p>In education, for example, Power BI could be used to produce an interactive dashboard exploring the casualties of World War II. This could be used to teach history or bring insights to researchers on possible research questions.</p>

<p><br /></p>

<p>Regarding R, this blog has plenty of examples of how to apply it to the humanities. I recommend this article where you learn about the use of synthetic control to investigate hypothesis in History: <a href="/2023/07/21/Synthetic-Control.html">‘When Numbers Meet Stories - an introduction to the synthetic control method in R’</a></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-r-vs-power-bi---examples">5. R vs Power BI - Examples</h2>

<p>To exemplify the differences and similarities of R and Power BI, we will replicate in Power BI the treemap plotted in R in the lesson <a href="/2024/05/09/Treemaps-in-R.html">Treemaps in R</a>.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_01.png" alt="Visual representation of a treemap." /></p>

<p><br /></p>

<p>The data used in R is also available in a <em>CSV</em> file at <a href="https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Cholera.csv">this link</a>. It is part of a great initiative by Professor Vincent Arel-Bundock to gather many interesting R datasets and make them available in <em>CSV</em> format on this page: <a href="https://vincentarelbundock.github.io/Rdatasets/articles/data.html">R Datasets</a>.</p>

<p><br /></p>

<p>Power BI Desktop is free and you can download it from the Power BI Microsoft official page. To learn more about it and how to get started, please consult <a href="https://learn.microsoft.com/en-us/power-bi/fundamentals/desktop-what-is-desktop">this resource</a>.</p>

<p><br /></p>

<p>In the lesson <a href="/2024/05/09/Treemaps-in-R.html">Treemaps in R</a> we learnt how to plot a treemap in R. In this lesson we will plot the same treemap in Power BI. To do that, download the data above and save it in the desired folder.</p>

<p><br /></p>

<p>When you open Power BI, you will see the option to load data from an Excel File. You can choose this option and a window will open to select the file with your data. You can then select <em>all files</em> to see also <em>csv</em> files. Select the <em>cholera.csv</em> file and confirm. You will be offered the option to transform your data in Power Query, a tool aimed at preparing your data before visualization. For this lesson, you can skip this step and load the data without transforming its structure.</p>

<p><br /></p>

<p>On the bar to the right, you will see the variables of your dataset. We would like to create a treemap in which we have bigger rectangles representing the regions of London and smaller rectangles representing the districts within their respective region. The size of the rectangles will inform us about the mortality caused by cholera in a given region and district. These are the relevant variables for us:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">region</code> will define our outer rectangles (categories) and will represent regions of London (West, North, Central, South, Kent);</li>
  <li><code class="language-plaintext highlighter-rouge">district</code> will define our inner rectangles (details), representing the districts of London;</li>
  <li><code class="language-plaintext highlighter-rouge">cholera_drate</code> represents deaths caused by cholera per 10,000 inhabitants in 1849 and will define the size of rectangles</li>
</ul>

<p><br /></p>

<p>The first step is to select the <em>cholera_drate</em> field, as shown in the image below. You will realise that Power BI automatically creates a bar chart with the sum of all death rates.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_02.png" alt="Showing death rates in a bar plot in Power BI" /></p>

<p><br /></p>

<p>Now, click on the bar plot and select the option Treemap in the Visualization tab, as shown in the image below.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_03.png" alt="Creating a treemap in Power BI" /></p>

<p><br /></p>

<p>The next step is to define which variable will determine the branches of our treemap, that is, the more general category. In our case, it is region. Finally, we define the field determining the leaves of our treemap. In this example, the leaves are the districts inside each region of London. Drag these two fields to <em>category</em> and <em>details</em> as shown below.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_04.png" alt="Adding a category to the Power BI treemap" /></p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_05.png" alt="Adding details to the Power BI treemap" /></p>

<p><br /></p>

<p>That’s it! Without any line of code, you created a treemap that offers a great visual of London cholera death rates by region and district. You have even automatically generated tooltips that provide additional information about each leaf in your tree. You can further format your plot to have your desired colors, fonts and sizes. Read more about how to format a visualization on <a href="https://learn.microsoft.com/en-us/power-bi/visuals/service-getting-started-with-color-formatting-and-axis-properties">this page</a>. Below you see the formatted version of the treemap.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_22_06.png" alt="Final Version of treemap in Power BI" /></p>

<p><br /></p>

<p>As you have seen, compared to R, it is easier to plot a treemap in Power BI. On the other hand, Power BI customization options are limited compared to R. Please, if you have any question or comments, feel free to write below and I wish you a great learning journey!</p>

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>Both R and Power BI are great tools for data analysis. While R is more suitable for complex and academic applications, Power BI is user-friendly and produces beautiful visualizations with drag-and-drop actions;</li>
  <li>Deciding whether to use R or Power BI depends on your goals and requirements, and the two tools can complement each other to produce effective results.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="digitalhumanities" /><summary type="html"><![CDATA[Understand R and Power BI differences and applications, from academic research to business intelligence, and discover how they can enrich your data analysis.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_22.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_22.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Treemaps In R</title><link href="http://localhost:4000/2024/05/09/Treemaps-in-R.html" rel="alternate" type="text/html" title="Treemaps In R" /><published>2024-05-09T00:00:00+02:00</published><updated>2024-05-09T00:00:00+02:00</updated><id>http://localhost:4000/2024/05/09/Treemaps-in-R</id><content type="html" xml:base="http://localhost:4000/2024/05/09/Treemaps-in-R.html"><![CDATA[<p><br /></p>

<h2 id="1-what-is-a-treemap">1. What is a treemap?</h2>

<p>A treemap consists of a set of rectangles that represent different categories in your data and whose sizes are defined by a numeric value associated with the respective category. For example, a treemap could illustrate the continents on Earth, sized according to their population. For a deeper analysis, treemaps can include nested rectangles, that is, categories within categories. Going back to our example of the continents, within each continent rectangle, new rectangles could represent countries and their populations.</p>

<p><br /></p>

<p>You might also think of the more general category — in our example, the continents — as branches of a tree and each branch has its own leaves — in our example, the countries. Below you see a visual representation of the concept behind a treemap.</p>

<p class="larger"><img src="/assets/images/lesson_21_01.png" alt="Visual representation of a treemap." /></p>

<hr />

<p><br /></p>

<h2 id="2-when-should-you-use-a-treemap">2. When should you use a treemap?</h2>

<p>One of the main advantages of a treemap is that it allows for the interpretation of a large amount of data at a single glance. It is well-suited to show part-to-whole relationships and to highlight the hierarchies in your data. Do not use treemaps when the variable defining the size of rectangles presents little variation.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-how-to-plot-a-treemap-in-r">3. How to plot a treemap in R?</h2>

<p>To exemplify a treemap in R, we will use the <code class="language-plaintext highlighter-rouge">Cholera</code> dataset, which contains that on the mortality caused by cholera in England in the years 1848-1849. This data comes from the <code class="language-plaintext highlighter-rouge">histdata</code> R package. Moreover, you will need to install the <code class="language-plaintext highlighter-rouge">treemap</code> package, one of the alternatives to plot a treemap in R. We will also use <code class="language-plaintext highlighter-rouge">RColorBrewer</code> package for a color palette and <code class="language-plaintext highlighter-rouge">dplyr</code> to transform the data.</p>

<p><br /></p>

<p>After you install the packages, load them and explore the structure of the <code class="language-plaintext highlighter-rouge">Cholera</code> data frame.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-21-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-21-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">HistData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">treemap</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">

</span><span class="c1"># Load the data to your R environment</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"Cholera"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check the dataframe structure</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">Cholera</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>We would like to create a treemap in which we have bigger rectangles representing the regions of London (branches) and smaller rectangles representing the districts (leaves) within their respective region. The size of the rectangles will inform us about the mortality caused by cholera in a given region and district. For us, the following variables are important:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">region</code> will define our outer rectangles (higher hierarchy) and will represent regions of London (West, North, Central, South, Kent);</li>
  <li><code class="language-plaintext highlighter-rouge">district</code> will define our inner rectangles (lower hierarchy), representing the districts of London;</li>
  <li><code class="language-plaintext highlighter-rouge">cholera_drate</code> represents deaths caused by cholera per 10,000 inhabitants in 1849 and will define the size of rectangles</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To learn more about the data, please see the
        
        <a href="https://cran.r-project.org/web/packages/HistData/HistData.pdf" target="_blank"> package documentation here.</a>
        
    </div>
</div>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">treemap</code> function is used to plot the treemap in R. The main arguments necessary are:</p>

<ul class="conclusion-list">
  <li>the first argument is the dataframe;</li>
  <li><code class="language-plaintext highlighter-rouge">index</code> defines the two levels of hierarchy in our plot: region (our branches) and district (our leaves);</li>
  <li><code class="language-plaintext highlighter-rouge">vSize</code> specifies the death rate to define the size of our rectangles;</li>
  <li><code class="language-plaintext highlighter-rouge">vColor</code> specifies the region to define the color of our higher hierarchy rectangles;</li>
  <li><code class="language-plaintext highlighter-rouge">type</code> informs the function that <code class="language-plaintext highlighter-rouge">vColor</code> is a categorical variable;</li>
  <li>the remaining parameters are used to adjust format options like color palette and position of elements.</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To further format your treemap, check more options in the
        
        <a href="https://cran.r-project.org/web/packages/treemap/treemap.pdf" target="_blank"> package documentation.</a>
        
    </div>
</div>

<p><br />
<span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-21-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-21-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">treemap</span><span class="p">(</span><span class="n">Cholera</span><span class="p">,</span><span class="w">
        </span><span class="n">index</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"region"</span><span class="p">,</span><span class="s2">"district"</span><span class="p">),</span><span class="w">
        </span><span class="n">vSize</span><span class="o">=</span><span class="s2">"cholera_deaths"</span><span class="p">,</span><span class="w">
        </span><span class="n">vColor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"region"</span><span class="p">,</span><span class="w">
        </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"categorical"</span><span class="p">,</span><span class="w">
        </span><span class="c1"># formatting options:</span><span class="w">
        </span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">brewer.pal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Accent"</span><span class="p">),</span><span class="w">
        </span><span class="n">align.labels</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="w">
          </span><span class="nf">c</span><span class="p">(</span><span class="s2">"left"</span><span class="p">,</span><span class="w"> </span><span class="s2">"top"</span><span class="p">),</span><span class="w"> 
          </span><span class="nf">c</span><span class="p">(</span><span class="s2">"right"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span><span class="w">
        </span><span class="p">),</span><span class="w">     
        </span><span class="n">border.col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">
        </span><span class="n">bg.labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">255</span><span class="p">,</span><span class="w">
        </span><span class="n">position.legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"none"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_21_02.png" alt="Treemap plotted in R" /></p>

<p><br /></p>

<p><strong>Note that Kent is the region with the largest death rate, followed by Southern London. Moreover, districts like Lambeth and Bethnal Green were especially affected by the disease. This treemap is a powerful tool to give you a general picture of the data at first glance.</strong></p>

<p><br /></p>

<p><strong>If you have any questions, please feel free to comment below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>A treemap is very useful to represent hierarchical relations in your data and provide a quick overall picture of your data;</li>
  <li>Plotting a treemap in R can be easily accomplished with the <code class="language-plaintext highlighter-rouge">treemap</code> package.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><summary type="html"><![CDATA[Explore how to effectively use a treemap in R to visualize hierarchical data and analyze part-to-whole relationships. This guide covers what a treemap is, when to use it, and a step-by-step tutorial on plotting with the treemap package.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_21.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_21.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mastering Violin Plots in ggplot2 with Real Data</title><link href="http://localhost:4000/2024/02/09/ggplot2-violin-plot.html" rel="alternate" type="text/html" title="Mastering Violin Plots in ggplot2 with Real Data" /><published>2024-02-09T00:00:00+01:00</published><updated>2024-08-23T00:00:00+02:00</updated><id>http://localhost:4000/2024/02/09/ggplot2-violin-plot</id><content type="html" xml:base="http://localhost:4000/2024/02/09/ggplot2-violin-plot.html"><![CDATA[<p><br /></p>

<h2 id="1-what-is-a-violin-plot">1. What is a violin plot?</h2>

<p>A violin plot is a mirrored density plot that is rotated 90 degrees as shown in the picture. It depicts the distribution of numeric data.</p>

<p><img src="/assets/images/lesson_20_01.png" alt="Visual description of what a violin plot is. First a density curve is shown. Second, a mirrored version of it is shown and lastly it is rotated by 90 degrees." /></p>

<hr />

<p><br /></p>

<h2 id="2-when-should-you-use-a-violin-plot">2. When should you use a violin plot?</h2>

<p>A violin plot is useful to compare the distribution of a numeric variable across different subgroups in a sample. For instance, the distribution of heights of a group of people could be compared across gender with a violin plot.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-how-to-code-a-ggplot2-violin-plot">3. How to code a ggplot2 violin plot?</h2>

<p>First, map the numeric variable whose distribution you would like to analyze to the x position aesthetic in <code class="language-plaintext highlighter-rouge">ggplot2</code>. Second, map the variable you want to use to separate your sample in different groups to the y position aesthetic. This is done with <code class="language-plaintext highlighter-rouge">aes(x = variable_of_interest, y = dimension)</code> inside the <code class="language-plaintext highlighter-rouge">ggplot()</code> function. The last step is to add the geom_violin() layer.</p>

<p><br /></p>

<p>To exemplify these steps, we will examine the capacity of Roman amphitheaters across different regions of the Roman Empire. The data for this comes from the <a href="https://github.com/sfsheath/cawd">cawd R package</a>, maintained by Professor Sebastian Heath. This package contains several datasets about the Ancient World, including one about the Roman Amphitheaters. To install the package, use <code class="language-plaintext highlighter-rouge">devtools::install_github("sfsheath/cawd")</code>.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Learn more about Roman amphitheaters in this informative article by Laura Klar, Department of Greek and Roman Art, The Metropolitan Museum of Art:
        
        <a href="https://www.metmuseum.org/toah/hd/tham/hd_tham.htm" target="_blank"> Theater and Amphitheater in the Roman World</a>
        
    </div>
</div>

<p><br /></p>

<p>After loading the package, use <code class="language-plaintext highlighter-rouge">data()</code> to see the available data frames. We will be using the <code class="language-plaintext highlighter-rouge">ramphs</code> dataset. It contains characteristics of the Roman amphitheaters. For this example, we will use the column 2 (title), column 7 (capacity) and column 8 (mod.country), which specifies the modern country where the amphitheater was located. We will also consider only the three modern countries with the largest number of amphitheaters - Tunisia, France or Italy. The code below loads and filters the relevant data.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-20-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-20-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">cawd</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Store the dataset in df1</span><span class="w">
</span><span class="n">df1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ramphs</span><span class="w">

</span><span class="c1"># Select all rows of relevant columns</span><span class="w">
</span><span class="n">df2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df1</span><span class="p">[</span><span class="w"> </span><span class="p">,</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">8</span><span class="p">)]</span><span class="w">

</span><span class="c1"># Filter only the rows where modern country is either Tunisia, France or Italy</span><span class="w">
</span><span class="n">df3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df2</span><span class="p">[</span><span class="n">df2</span><span class="o">$</span><span class="n">mod.country</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Tunisia"</span><span class="p">,</span><span class="w"> </span><span class="s2">"France"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Italy"</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="c1"># Delete NAs</span><span class="w">
</span><span class="n">df4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">na.omit</span><span class="p">(</span><span class="n">df3</span><span class="p">)</span><span class="w">

</span><span class="c1"># Plot a basic ggplot2 violin plot</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mod.country</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">capacity</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_violin</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_20_02.png" alt="Basic violin plot" /></p>

<p><br /></p>

<p>We can further customize this plot to make it look better and fit this page theme. In the code below we improve the following aspects:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">geom_violin(color = "#FF6885", fill = "#2E3031", size = 0.9)</code> changes in the color and size of line and fill of the violin plot;</li>
  <li><code class="language-plaintext highlighter-rouge">geom_jitter(width = 0.05, alpha = 0.2, color = "gray")</code> adds the data points jittered to avoid overplotting and show where the points are concentrated;</li>
  <li><code class="language-plaintext highlighter-rouge">coord_flip()</code> flips the two axis so that is more evident that a violin plot is simply a mirrored density curve;</li>
  <li>the other geom layes add title, labels and a new theme to the plot.</li>
</ul>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To learn more about geom_jitter, please see this
        
        <a href="https://ggplot2.tidyverse.org/reference/geom_jitter.html" target="_blank"> link.</a>
        
    </div>
</div>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-20-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-20-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">mod.country</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">capacity</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_violin</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#2E3031"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.9</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_jitter</span><span class="p">(</span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.05</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Roman Amphitheaters"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Modern Country"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Capacity of Spectators"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">coord_flip</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
      </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
      </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
      </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Eliminates grids:</span><span class="w">
      </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
      </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
      </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_20_03.png" alt="Final violin plot" /></p>

<p><br /></p>

<p><strong>Note that amphitheaters in the territory of modern Tunisia tended to have less variation in their capacity and most of them were below 10,000 spectators. On the other hand, amphitheaters in the Italian Peninsula exhibit greater variation.</strong></p>

<p><br /></p>

<p><strong>Can you guess what the outlier on the very right of the Italian distribution is? Yes! It’s the Flavian Amphitheater at Rome, also known as the Colosseum, with an impressive capacity of 50,000 people. If you have any questions, please feel free to comment below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-conclusions">4. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>A violin plot, a type of density curve, is useful for exploring data distribution;</li>
  <li>Coding a ggplot2 violin plot can be easily accomplished with <code class="language-plaintext highlighter-rouge">geom_violin()</code>.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="ggplot2" /><summary type="html"><![CDATA[Learn how to create beautiful violin plots in ggplot2 with real-world data from Roman amphitheaters.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_20.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_20.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Explore art with SQL and pd.read_sql_query</title><link href="http://localhost:4000/2024/01/25/SQL-with-Python.html" rel="alternate" type="text/html" title="Explore art with SQL and pd.read_sql_query" /><published>2024-01-25T00:00:00+01:00</published><updated>2024-01-25T00:00:00+01:00</updated><id>http://localhost:4000/2024/01/25/SQL-with-Python</id><content type="html" xml:base="http://localhost:4000/2024/01/25/SQL-with-Python.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Have you ever tried to load a large file in Python or R? Sometimes, when we have file sizes in the order of gigabytes, you may experience problems of performance with your program taking an unusually long time to load the data. <a href="https://en.wikipedia.org/wiki/SQL">SQL</a>, or Structured Query Language, is used to deal with larger data files stored in relational databases and is widely used in the industry and even in research. Apart from being more efficient to prepare data, in your journey, you might encounter data sources whose main form of access is through SQL.</p>

<p><br /></p>

<p>In this lesson you will learn how to use SQL in Python to retrieve data from a relational data base of the <a href="https://www.nga.gov/">National Gallery of Art (US)</a>. You will also learn how to use a relational database management system (RDBMS) and pd.read_sql_query to extract data from it in Python.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The <a href="https://github.com/NationalGalleryOfArt/opendata">database</a> used in this lesson is made available by <a href="https://www.nga.gov/">National Gallery of Art (US)</a> under a Creative Commons Zero license. The dataset contains data about more than 130,000 artworks and their artists since the Middle Ages until the present day.</p>

<p><br /></p>

<p>It is a wonderful resource to study history and art. Variables available include the title of the artwork, dimensions, author, description, location, country where it was produced, the year the artist started the work and the year he or she finished it. These variables are only some examples, but there is much more to explore.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-download-and-install-postgresql-and-pgadmin">2. Download and install PostgreSQL and pgAdmin</h2>

<p><a href="https://www.postgresql.org/">PostgreSQL</a> is a free and very popular relational database management system. It stores and manages the tables contained in a database. Please, consult this <a href="https://www.postgresqltutorial.com/postgresql-getting-started/">guide</a> to install it in your computer.</p>

<p><br /></p>

<p>After you install PostgreSQL, you will need to connect to the Postgre database server. In this tutorial, we will be using the <a href="https://www.pgadmin.org/download/">pgAdmin</a> application to establish this connection. It is a visual and intuitive interface and makes many operations easier to execute. The <a href="https://www.postgresqltutorial.com/postgresql-getting-started/">guide above</a> will also guide you through the process of connecting to your local database. In the next steps, after being connected to your local database server, we will learn how to create a database that will store the National Gallery Dataset.</p>

<p><br /></p>

<h2 id="3-creating-the-database-and-its-tables">3. Creating the database and its tables</h2>

<p>After you are connected to the server, click “Databases” with the right mouse button and choose “Create” and “Database…” as shown in the image below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_01.png" alt="How to create a database with pgAdmin" /></p>

<p><br /></p>

<p>Next, give a title to your database as shown in the figure below. In our case, it will be called “art_db”. Click “Save” and it is all set!</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_02.png" alt="Naming your database in pgAdmin" /></p>

<p><br /></p>

<p>With the database ‘art_bd’ selected, click the ‘Query Tool’ as shown below.</p>

<p><img src="/assets/images/lesson_19_03.png" alt="Where to find the query tool in pgAdmin" /></p>

<p><br /></p>

<p>This will open a field where you can type SQL code. Our objective is to create the first table of our database, which will contain the content of ‘objects.csv’ available in the GitHub account of the National Gallery of Art, provided in the Data section above.</p>

<p><br /></p>

<p>To create a table, we must specify the name and the variable type for each variable in the table. The SQL command to create a table is quite intuitive: CREATE TABLE name_of_your_table. Copy the code below and paste it in the window opened by the ‘Query Tool’. The code specify each variable of the objects table. This table contains information on each artwork available in the collection.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-1">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">objects</span> <span class="p">(</span>
    <span class="n">objectID</span>                    <span class="nb">integer</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">accessioned</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">accessionnum</span>                  <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">locationid</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">title</span>                         <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">displaydate</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
    <span class="n">beginyear</span>                     <span class="nb">integer</span><span class="p">,</span>
    <span class="n">endyear</span>                       <span class="nb">integer</span><span class="p">,</span>
    <span class="n">visualbrowsertimespan</span>         <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">medium</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">dimensions</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">inscription</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">markings</span>                      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">attributioninverted</span>           <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span>
    <span class="n">attribution</span>                   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span>
    <span class="n">provenancetext</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">,</span>
    <span class="n">creditline</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">classification</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">subclassification</span>             <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">visualbrowserclassification</span>   <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">parentid</span>                      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">isvirtual</span>                     <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">departmentabbr</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">portfolio</span>                     <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
    <span class="n">series</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">850</span><span class="p">),</span>
    <span class="n">volume</span>                        <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">850</span><span class="p">),</span>
    <span class="n">watermarks</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">512</span><span class="p">),</span>
    <span class="n">lastdetectedmodification</span>      <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">wikidataid</span>                    <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">customprinturl</span>                <span class="nb">CHARACTER</span> <span class="nb">VARYING</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="p">);</span></code></pre></figure>


</div>

<p><br /></p>

<p>The last step is to load the data from the <em>csv file</em> into this table. This can be done through the ‘COPY’ command as shown below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-2">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">COPY</span> <span class="n">objects</span> <span class="p">(</span><span class="n">objectid</span><span class="p">,</span> <span class="n">accessioned</span><span class="p">,</span> <span class="n">accessionnum</span><span class="p">,</span> <span class="n">locationid</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">displaydate</span><span class="p">,</span> <span class="n">beginyear</span><span class="p">,</span> <span class="n">endyear</span><span class="p">,</span> <span class="n">visualbrowsertimespan</span><span class="p">,</span> <span class="n">medium</span><span class="p">,</span> <span class="n">dimensions</span><span class="p">,</span> <span class="n">inscription</span><span class="p">,</span> <span class="n">markings</span><span class="p">,</span> <span class="n">attributioninverted</span><span class="p">,</span> <span class="n">attribution</span><span class="p">,</span> <span class="n">provenancetext</span><span class="p">,</span> <span class="n">creditline</span><span class="p">,</span> <span class="n">classification</span><span class="p">,</span> <span class="n">subclassification</span><span class="p">,</span> <span class="n">visualbrowserclassification</span><span class="p">,</span> <span class="n">parentid</span><span class="p">,</span> <span class="n">isvirtual</span><span class="p">,</span> <span class="n">departmentabbr</span><span class="p">,</span> <span class="n">portfolio</span><span class="p">,</span> <span class="n">series</span><span class="p">,</span> <span class="n">volume</span><span class="p">,</span> <span class="n">watermarks</span><span class="p">,</span> <span class="n">lastdetectedmodification</span><span class="p">,</span> <span class="n">wikidataid</span><span class="p">,</span> <span class="n">customprinturl</span><span class="p">)</span> 
<span class="k">FROM</span> <span class="s1">'C:/temp/objects.csv'</span> 
<span class="k">DELIMITER</span> <span class="s1">','</span> 
<span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span></code></pre></figure>


</div>

<p><br /></p>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Download the "objects.csv" file and save it in the desired folder. Note however, that sometimes your system might block access to this file via pgAdmin. Therefore I saved it in the "temp" folder. In any case, change the path in the code above to match where you saved the "objects.csv" file.
        
    </div>
</div>

<p><br /></p>

<p>Great! Now you should have your first table loaded to your database. The complete database includes more than 15 tables. However, we will only use two of them for this example, as shown in the scheme below. Note that the two tables relate to each other through the key variable <em>objectid</em>.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_04.png" alt="Database scheme and relations" /></p>

<p><br /></p>

<p>To load the “objects_terms” table, please repeat the same procedure with the code below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-3">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">objects_terms</span> <span class="p">(</span>
    <span class="n">termid</span>             <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="n">objectid</span>           <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="n">termtype</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span>
    <span class="n">term</span>               <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
    <span class="n">visualbrowsertheme</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">visualbrowserstyle</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="p">);</span>


<span class="k">COPY</span> <span class="n">objects_terms</span> <span class="p">(</span><span class="n">termid</span><span class="p">,</span> <span class="n">objectid</span><span class="p">,</span> <span class="n">termtype</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">visualbrowsertheme</span><span class="p">,</span> <span class="n">visualbrowserstyle</span><span class="p">)</span>
<span class="k">FROM</span> <span class="s1">'C:/temp/objects_terms.csv'</span> 
<span class="k">DELIMITER</span> <span class="s1">','</span> 
<span class="n">CSV</span> <span class="n">HEADER</span><span class="p">;</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-exploring-the-data-with-sql-commands">4. Exploring the data with SQL commands</h2>

<p>Click the ‘Query Tool’ to start exploring the data. First, select which variables you would like to include in your analysis. Second, you tell SQL in which table this variables are. The code below selects the variables <em>title</em> and <em>attribution</em> from the <em>objects</em> table. It also limits the result to 5 observations.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-4">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">attribution</span>
<span class="k">FROM</span> <span class="n">objects</span>
<span class="k">LIMIT</span> <span class="mi">5</span></code></pre></figure>


</div>
<p><br /></p>

<p>Now, we would like to know what are the different kinds of classification in this dataset. To achieve that, we have to select the <em>classification</em> variable, but including only distinct values.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-5">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="k">DISTINCT</span><span class="p">(</span><span class="n">classification</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">objects</span></code></pre></figure>


</div>

<p><br /></p>

<p>The result tells us that there are 11 classifications: “Decorative Art”, “Drawing”, “Index of American Design”, “Painting”, “Photograph”, “Portfolio”, “Print”, “Sculpture”, “Technical Material”, “Time-Based Media Art” and “Volume”.</p>

<p><br /></p>

<p>Finally, let us group the artworks by classification and count the number of objects in each category. <code class="language-plaintext highlighter-rouge">COUNT(*)</code> will count the total of items in the groups defined by <code class="language-plaintext highlighter-rouge">GROUP BY</code>. When you select a variable you can give it a new name with <code class="language-plaintext highlighter-rouge">AS</code>. Finally, the command <code class="language-plaintext highlighter-rouge">ORDER BY</code> orders the classification by number of items in a descending order (DESC).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-6">

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="n">classification</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">n_items</span>
<span class="k">FROM</span> <span class="n">objects</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">classification</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">n_items</span> <span class="k">DESC</span></code></pre></figure>


</div>

<p><br /></p>

<p>Note that prints is the largest classification, followed by photographs.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-using-pdread_sql_query-to-access-data">5. Using pd.read_sql_query to access data</h2>

<p>Now that you have your SQL database working, it is time to access it with Python. Before using Pandas, we have to connect Python to our SQL database. We will do that with <code class="language-plaintext highlighter-rouge">psycopg2</code>, a very popular PostgreSQL adapter for Python. Please, install it with <code class="language-plaintext highlighter-rouge">pip install psycopg2</code>.</p>

<p><br /></p>

<p>We use the <code class="language-plaintext highlighter-rouge">connect</code> method of <code class="language-plaintext highlighter-rouge">psycopg2</code> to establish the connection. It takes 4 main arguments:</p>

<ul class="conclusion-list">
  <li>host: in our case, the database is hosted locally, so we will pass <em>localhost</em> to this parameter. Note, however, that we could specify an IP if the server was external;</li>
  <li>database: the name given to your SQL database, <em>art_db</em>;</li>
  <li>user: user name required to authenticate;</li>
  <li>password: your database password.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">psycopg2</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">psycopg2</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
    <span class="n">host</span><span class="o">=</span><span class="sh">"</span><span class="s">localhost</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">database</span><span class="o">=</span><span class="sh">"</span><span class="s">art_db</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">user</span><span class="o">=</span><span class="sh">"</span><span class="s">postgres</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">*******</span><span class="sh">"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The next step is to store our SQL query in a string Python variable. The query below performs a <a href="https://www.geeksforgeeks.org/sql-left-join/">LEFT JOIN</a> with the two tables in our database. The operation uses the variable <code class="language-plaintext highlighter-rouge">objectid</code> to join the two tables. In practice we are selecting the titles, authors (attribution), classification - we keep only “Painting” with a <a href="https://www.w3schools.com/sql/sql_where.asp">WHERE</a> command -, and term - we filter only terms that specify the “Style” of the painting.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">command</span> <span class="o">=</span> <span class="sh">'''</span><span class="s"> SELECT o.title, o.attribution, o.classification, ot.term
                FROM objects as o
                LEFT JOIN objects_terms as ot ON o.objectid = ot.objectid
                WHERE classification = </span><span class="sh">'</span><span class="s">Painting</span><span class="sh">'</span><span class="s"> AND termtype = </span><span class="sh">'</span><span class="s">Style</span><span class="sh">'</span><span class="s"> </span><span class="sh">'''</span></code></pre></figure>


</div>

<p><br /></p>

<p>Finally, we can extract the data. Use the <code class="language-plaintext highlighter-rouge">cursor()</code> method of <code class="language-plaintext highlighter-rouge">conn</code> to be able to “type” your SQL query. Pass the command variable and connection object to 
<code class="language-plaintext highlighter-rouge">pd.read_sql_query</code> and it will return a Pandas dataframe with the data we selected. Next, commit and close cursor and connections.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-9')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-9">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># open cursor to insert our query
</span><span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>

<span class="c1"># use pd.read_sql_query to query our database and get the result in a pandas dataframe
</span><span class="n">paintings</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_sql_query</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">conn</span><span class="p">)</span>

<span class="c1"># save any changes to the database
</span><span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

<span class="c1"># close cursor and connection
</span><span class="n">cur</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<h2 id="6-visualizing-the-most-popular-styles">6. Visualizing the most popular styles</h2>

<p>From the data we gathered from our database, we would like to check which are the 10 most popular art styles in our data, by number of paintings. We can use the <code class="language-plaintext highlighter-rouge">value_counts()</code> method of the column <code class="language-plaintext highlighter-rouge">term</code> to count how many paintings are classified in each style.</p>

<p><br /></p>

<p>The result is a Pandas Series where the index contains the styles and the values contain the quantities of paintings of the respective style. The remaining code produces an horizontal bar plot showing the top 10 styles by number of paintings. If you would like to learn more about data visualization with <code class="language-plaintext highlighter-rouge">matplotlib</code>, please consult the lesson <a href="/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html">Storytelling with Matplotlib - Visualizing historical data</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-19-10')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-19-10">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">top_10_styles</span> <span class="o">=</span> <span class="n">paintings</span><span class="p">[</span><span class="sh">'</span><span class="s">term</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">barh</span><span class="p">(</span><span class="n">top_10_styles</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">top_10_styles</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#f0027f</span><span class="sh">"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#f0027f</span><span class="sh">"</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">The Most Popular Styles</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># inverts y axis
</span><span class="n">ax</span><span class="p">.</span><span class="nf">invert_yaxis</span><span class="p">()</span>

<span class="c1"># eliminates grids
</span><span class="n">ax</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># set ticks' colors to white    
</span><span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">)</span>    
<span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># set font colors
</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_facecolor</span><span class="p">(</span><span class="sh">'</span><span class="s">#2E3031</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="nf">set_color</span><span class="p">(</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">)</span>   

<span class="c1"># eliminates top, left and right borders and sets the bottom border color to white
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="sh">"</span><span class="s">top</span><span class="sh">"</span><span class="p">].</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">].</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">].</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="sh">"</span><span class="s">bottom</span><span class="sh">"</span><span class="p">].</span><span class="nf">set_color</span><span class="p">(</span><span class="sh">"</span><span class="s">white</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="nf">set_facecolor</span><span class="p">(</span><span class="sh">'</span><span class="s">#2E3031</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>Note that Realist, Baroque and Renaissance are the most popular art styles in our dataset.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_19_05.png" alt="The Top 10 Art Styles" /></p>

<p><br /></p>

<p><strong>Please feel free to share your thoughts and questions below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-conclusions">6. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>It is possible to create a SQL database from csv files and access it with Python;</li>
  <li>psycopg2 enables connection between Python and your SQL database;</li>
  <li>pd.read_sql_query can be used to extract data into a Pandas dataframe.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="statistics" /><category term="sql" /><summary type="html"><![CDATA[Learn to integrate Python with SQL for art data analysis using pd.read_sql_query in this insightful lesson on managing large datasets efficiently.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_19.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_19.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chi-square distribution and test in R</title><link href="http://localhost:4000/2023/12/04/Chi-square-distribution-in-R.html" rel="alternate" type="text/html" title="Chi-square distribution and test in R" /><published>2023-12-04T00:00:00+01:00</published><updated>2023-12-04T00:00:00+01:00</updated><id>http://localhost:4000/2023/12/04/Chi-square-distribution-in-R</id><content type="html" xml:base="http://localhost:4000/2023/12/04/Chi-square-distribution-in-R.html"><![CDATA[<p><br /></p>

<p><strong>Greetings, humanists, social and data scientists!</strong></p>

<p><br /></p>

<p>Was there an association or relationship between gender and the verdicts in investigations in 18th-century London? If an inquest concerned a man, did this fact influence the final verdict of the investigation?</p>

<p><br /></p>

<p>In this lesson we will answer these questions employing a chi-square test and the data explored in the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a>. You will learn what degrees of freedom are and how to harness the power of the chi-square distribution to infer relationships in historical London.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="1-data-source">1. Data source</h2>

<p>The <a href="https://github.com/sharonhoward/ll-coroners">dataset</a> used in this lesson is made available by <a href="https://sharonhoward.org/index.html">Sharon Howard</a>. This dataset documents a range of Westminster inquests conducted between 1760 and 1799. Inquests were mostly investigations into deaths under circumstances that were sudden, unexplained, or suspicious. Please, check the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a> for more information.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-why-is-the-chi-square-distribution-useful-for-us">2. Why is the chi-square distribution useful for us?</h2>

<p>The chi-square distribution is useful because it is the basis for testing the independence of two categorical variables. When we perform this test, the statistic we calculate follows a chi-square distribution. This enables us to determine the probability of observing a specific test statistic in our analytical sample under a certain hypothesis.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A test statistic is a summary of your sample, reducing your dataset to a single value that enables hypothesis testing.
        
    </div>
</div>

<p><br /></p>

<p>It’s not essential to know the function below, but understanding that the probability density function of a chi-square distribution follows this formula is beneficial. In the following steps we will write R code to generate a chi-square curve with <em>n</em> degrees of freedom and now you know that actually what R will compute is the function below with the <em>n</em> and <em>x</em> interval that you pass to the function. Note that f(0) = 0 and that  \(\Gamma\) is the <a href="https://en.wikipedia.org/wiki/Gamma_function">gamma function</a>.</p>

<p><br /></p>

\[f(x) = \frac{1}{2^{\frac{n}{2}} \Gamma(\frac{n}{2})}x^{\frac{n}{2}-1}e^{-\frac{x}{2}}\]

<p><br /></p>

<p>The area under this function gives us the probability of an interval of chi-squares happening. Fortunately, R has a function <code class="language-plaintext highlighter-rouge">dchisq(x, df)</code> that provides the chi-square density function. In the code below, we plot three chi-square distributions with 4, 8 and 16 degrees of freedom:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>to make it easier to plot the curves with color depending on the degrees of freedom, we create a data frame with three variables: x (from 0 to 50 in 0.1 steps); y (the result of the function f(n,x) above) and df (n degrees of freedom);</li>
  <li>in R, the chi-square density function is calculated with <code class="language-plaintext highlighter-rouge">dchisq</code>;</li>
  <li>color aesthetic is mapped to df (degrees of freedom) and to make sure ggplot uses discrete colors we transform degrees of freedom into a factor;</li>
  <li><code class="language-plaintext highlighter-rouge">scale_color_discrete</code> is used to give a name to the legend and <code class="language-plaintext highlighter-rouge">theme_coding_the_past()</code> is our theme available here: <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization with ggplot2’</a>.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-18-1">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">


</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">)</span><span class="w">

</span><span class="n">y1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">y2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">)</span><span class="w">
</span><span class="n">y3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w">

</span><span class="n">df1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y1</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">df2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y2</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">)</span><span class="w">
</span><span class="n">df3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y3</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">df1</span><span class="p">,</span><span class="w"> </span><span class="n">df2</span><span class="p">,</span><span class="w"> </span><span class="n">df3</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">df</span><span class="p">)))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_discrete</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DF"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Density Function"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Chi-square"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_18_01.png" alt="Chi-square distribution curves with different degrees of freedom" /></p>

<p><br /></p>

<p>Note that as the degrees of freedom increase, the chi-square distribution increasingly resembles a normal distribution. With fewer degrees of freedom, the distribution exhibits more asymmetry.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-degrees-of-freedom-in-a-chi-square-test">3. Degrees of freedom in a chi-square test</h2>

<p>As the plot above demonstrates, degrees of freedom are crucial as they determine the shape of our chi-square distribution. But what exactly are degrees of freedom?</p>

<p><br /></p>

<p>Essentially, they represent the number of independent pieces of information allowed to vary in a system. For instance, in a contingency table, the degrees of freedom refer to the number of cells that can be varied, considering the total values observed in our sample. Is this concept a bit complex? I have created a video to illustrate this concept more clearly.</p>

<p><br /></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/HWYepBHFDwk?si=rhmShSTV22EaHg2S" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p><br /></p>

<p>In a contingency table, degrees of freedom (DF) are calculated with the expression below, where <em>nrows</em> and <em>ncolumns</em> are the numbers of rows and columns, respectively.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> A contingency table, or crosstab, presents the counts for the combination of two categorical variables.
        
        <a href="https://statisticsbyjim.com/basics/contingency-table/" target="_blank"> Read more here.</a>
        
    </div>
</div>

<p><br /></p>

\[DF = (nrows - 1)(ncolumns - 1)\]

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-how-to-estimate-a-contingency-table-under-the-null-hypothesis">4. How to estimate a contingency table under the null hypothesis?</h2>

<p>Now that you’re familiar with the chi-square distribution and understand how to calculate degrees of freedom for a chi-square test, let’s explore how to derive our test statistic. Our aim is to determine if there’s an association between two categorical variables. Therefore, our alternative hypothesis (<em>H1</em>) posits that these two variables are dependent. Conversely, the <em>null</em> hypothesis (<em>H0</em>) suggests that the variables are independent.</p>

<p><br /></p>

<p>In our case, we’re investigating the potential association between gender and verdict variables. To examine our contingency table, please run the following code. For an in-depth explanation of what this code accomplishes, refer to the lesson <a href="/2023/11/15/Change-Fonts-in-ggplot.html">‘How to Change Fonts in ggplot2 with Google Fonts’</a></p>

<p><br /></p>

<p><em>H0</em>: There is no association between gender and verdict.</p>

<p><em>H1</em>: There is association between gender and verdict.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-18-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">showtext</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_tsv</span><span class="p">(</span><span class="s2">"wa_coroners_inquests_v1-1.tsv"</span><span class="p">)</span><span class="w">

</span><span class="n">df_prep</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"-"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">verdict</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recode</span><span class="p">(</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="s2">"suicide (delirious)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (felo de se)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">,</span><span class="w">
                          </span><span class="s2">"suicide (insane)"</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"suicide"</span><span class="p">))</span><span class="w">

</span><span class="n">table_ver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">df_prep</span><span class="o">$</span><span class="n">verdict</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_18_02.png" alt="Contingency table of gender versus verdict" /></p>

<p><br /></p>

<p><br /></p>

<p>What would the above table appear like if the null hypothesis were true? In other words, if gender and verdict were truly independent, how would we calculate the expected values for each cell in that table? It’s important to remember that when events are independent, their probabilities are not influenced by each other. This principle is key to calculating the expected values in such a scenario.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_18_03.png" alt="Probability of two independent events happening" /></p>

<p><br /></p>

<p>For instance, if we assume that the cause of death and gender are independent, we can calculate the probability of observing a case where a woman had an accidental death by multiplying the probability of the individual being a woman by the probability of an accidental death occurring.  Once you’ve determined this probability, you can then multiply it by the total number of individuals in the sample to estimate the expected count for that specific cell in the table. This procedure is shown below.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_18_04.png" alt="Expected value calculation example" /></p>

<p><br /></p>

<p>The calculation for the other cells in the table follows the same methodology. It’s worth noting that many textbooks present the following formula to calculate the expected values, which is based on the logic we’ve just discussed. In this formula, <em>RT</em> stands for row total; <em>CT</em> for column total; and <em>TT</em> for table total. You do not have to know this formula if you understood the underlying logic we explained earlier.</p>

<p><br /></p>

\[E = \frac{RT \times CT}{TT}\]

<p><br /></p>

<p>After you calculate all the expected values, it is time to calculate our test statistic.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-calculating-chi-square-in-r">5. Calculating chi-square in R</h2>

<p>With both the observed and expected tables at hand, calculating the chi-square statistic becomes a straightforward process. For each cell, subtract the expected value (E) from the observed value (O), square this difference, and then divide by the expected value. Once you complete this calculation for every cell in the table, sum up these individual results. This sum is your chi-square statistic!</p>

<p><br /></p>

<p>The next step is to determine how unusual this statistic is within the context of the chi-square distribution. It’s important to remember that this test statistic operates under the assumption that the null hypothesis is true. Therefore, the chi-square distribution will indicate the probability of encountering a chi-square statistic as large as, or larger than, the one you’ve calculated, under the assumption of the <em>null</em> hypothesis.</p>

<p><br /></p>

\[\chi^{2} = \sum \frac{(O-E)^{2}}{E}\]

<p>If you calculate it, you should find something around 59.3. We can plot a chi-square distribution with 4 degrees of freedom and estimate visually the probability of it. The code below does that and highlights the test statistic with a white dashed line. It is clear that a test statistic as large or larger than the one we obtained is extremely unlikely under the <em>null</em> hypothesis.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-18-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">70</span><span class="p">,</span><span class="w"> </span><span class="m">0.1</span><span class="p">)</span><span class="w">

</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dchisq</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">

</span><span class="n">df_4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">df_4</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#C84848"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">59.3</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.4</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Density Function"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Chi-squared"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_18_05.png" alt="Test statistic highlighted in the chi square distribution" /></p>

<p><br /></p>

<p>The good news is that the <code class="language-plaintext highlighter-rouge">chisq.test</code> function does all this work for us! In only one line of code you perform the test! With the code below you also get a numerical p-value to evaluate your hypotheses.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-18-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-18-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">chi_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">chisq.test</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">df_prep</span><span class="o">$</span><span class="n">verdict</span><span class="p">,</span><span class="w"> </span><span class="n">df_prep</span><span class="o">$</span><span class="n">gender</span><span class="p">))</span><span class="w">

</span><span class="n">chi_test</span><span class="o">$</span><span class="n">statistic</span><span class="w">
</span><span class="n">chi_test</span><span class="o">$</span><span class="n">p.value</span><span class="w">
</span><span class="n">chi_test</span><span class="o">$</span><span class="n">expected</span></code></pre></figure>


</div>

<p><br /></p>

<p>The result of <code class="language-plaintext highlighter-rouge">chisq.test</code> is stored in a list that I called <code class="language-plaintext highlighter-rouge">chi_test</code>. This list has several elements. Some of them are the chi-square statistic, the p-value and even the expected contingency table that we estimated above.</p>

<p><br /></p>

<p>Now we can confirm analytically what we showed graphically above. The p-value tells us that the probability of observing a chi-square equal or larger than 59.3 is \(4.13 \times 10^{-12}\) under the <em>null</em> hypothesis. Our data is extremely unlikely under the <em>null</em> and therefore we can reject it. We can then accept the hypothesis that indeed gender and verdict are associated. Nevertheless, keep in mind that association does not mean causation.</p>

<p><br /></p>

<p><strong>These findings offer valuable insights into the distinct experiences of men and women in 18th-century London inquests. The results of our chi-square test suggest a relationship between the gender of the deceased and the outcome of an investigation. To further enrich our understanding of this statistical finding, a qualitative analysis could provide deeper context and detail. Your comments and questions are highly welcomed, so please feel free to share your thoughts and inquiries below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-conclusions">6. Conclusions</h2>

<p><br /></p>

<ul class="conclusion-list">
  <li>You can easily perform a chi-square test in R with the <code class="language-plaintext highlighter-rouge">chisq.test</code> function;</li>
  <li>Degrees of freedom play a crucial role in shaping the chi-square distribution, influencing the accuracy and reliability of our statistical inferences;</li>
  <li>The chi-square test reveals a significant association between gender and the verdicts of 18th-century London inquests, suggesting gender-based differences in investigation outcomes;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="ggplot2" /><summary type="html"><![CDATA[Learn about the chi-square distribution in R, understand degrees of freedom through practical examples, and master hypothesis testing in historical contexts. Perfect for enthusiasts at the intersection of data science and history. Dive into statistical analysis and uncover patterns from 18th-century London inquests.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_18.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_18.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>