<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-17T09:20:58-03:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Z score in R</title><link href="http://localhost:4000/2023/05/15/Z-score-in-R.html" rel="alternate" type="text/html" title="Z score in R" /><published>2023-05-15T00:00:00-03:00</published><updated>2023-05-15T00:00:00-03:00</updated><id>http://localhost:4000/2023/05/15/Z-score-in-R</id><content type="html" xml:base="http://localhost:4000/2023/05/15/Z-score-in-R.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“We don’t need no education.”</p>

<p>Pink Floyd</p>

<p><br /></p>

<p>In this lesson we will use data of the General Social Survey (1972-1978) to study American society in the seventies. In particular, we would like to study schooling duration for individuals in our sample and how specific observations compare to the rest of the sample. To do so, we will use the Z score - a measure of how many standard deviations below or above the population mean an observation is.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is included in the <a href="https://cran.r-project.org/web/packages/survival/index.html">R Survival Package</a> and was originally used in Logan (1983) - <em>A Multivariate Model for Mobility Tables</em>. The data is part of the <a href="https://gss.norc.org/">General Social Survey</a> (1972-1978).</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-z-score-in-r">Coding the past: Z score in R</h1>

<p><br /></p>

<h2 id="1-what-is-the-z-score">1. What is the Z score?</h2>

<p>The Z score is a measure of how many standard deviations a data point in a set is away from the mean of that set of values. Below you find the expression to calculate the Z score of a given point in a sample.</p>

\[Z_{X} = \frac{X - \overline{X}}{S}\]

<p>Where:</p>

<ul class="conclusion-list">
  <li>\(Z_{X}\) is the Z score of the point \(X\);</li>
  <li>\(X\) is the value for which we want to calculate the Z score;</li>
  <li>\(\overline{X}\) is the mean of the sample;</li>
  <li>\(S\) is the standard deviation of the sample.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-calculating-z-score-in-r">2. Calculating Z score in R</h2>

<p>Implementing the Z score formula in R is quite straightforward. To reuse code, we will create a function called <code class="language-plaintext highlighter-rouge">calculate_z</code> using the <code class="language-plaintext highlighter-rouge">mean</code> and <code class="language-plaintext highlighter-rouge">sd</code> base functions to calculate Z.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">calculate_z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="w"> </span><span class="n">X_mean</span><span class="p">,</span><span class="w"> </span><span class="n">S</span><span class="p">){</span><span class="w">
  </span><span class="nf">return</span><span class="p">((</span><span class="n">X</span><span class="o">-</span><span class="n">X_mean</span><span class="p">)</span><span class="o">/</span><span class="n">S</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>


</div>

<p><br /></p>

<p>To load the data, we will use the <code class="language-plaintext highlighter-rouge">data</code> function and specify the <code class="language-plaintext highlighter-rouge">survival</code> package. The dataset we are interested in is called <code class="language-plaintext highlighter-rouge">logan</code> and contains information about the duration of education for 838 individuals. The variable <code class="language-plaintext highlighter-rouge">education</code> contains the number of years of schooling for each individual.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">survival</span><span class="p">)</span><span class="w">

</span><span class="n">data</span><span class="p">(</span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="n">package</span><span class="o">=</span><span class="s2">"survival"</span><span class="p">)</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">)</span><span class="w">

</span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The average education duration in our sample is 13.58 years, with a standard deviation of 2.73 years. With this information, we can proceed to calculate the Z score for each observation in the dataset.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">logan</span><span class="o">$</span><span class="n">z_score</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calculate_z</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> 
                             </span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
                             </span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">))</span><span class="w">

</span><span class="n">head</span><span class="p">(</span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<table class="dataframe">
<tr> <th>occupation</th> <th>focc</th> <th> education </th> <th> race </th> <th> z_score </th>  </tr>
  <tr>  <td> sales </td> <td>professional</td> <td>4</td> <td> non-black </td> <td> 0.15 </td> </tr>
  <tr>  <td> craftsmen </td> <td>sales</td> <td>13</td> <td> non-black </td> <td> -0.21 </td> </tr>
  <tr>  <td> sales </td> <td>professional</td> <td>16</td> <td> non-black </td> <td> 0.89 </td> </tr>
  <tr>  <td> craftsmen </td> <td>sales</td> <td>16</td> <td> non-black </td> <td> 0.89 </td> </tr>
  <tr>  <td> operatives </td> <td>professional</td> <td>14</td> <td> non-black </td> <td> 0.15 </td> </tr>
</table>

<p><br /></p>

<p>As you can see in the dataframe, the first individual spent 0.15 standard deviations more time in school compared to the average. A negative Z score indicates that the observation is below the average, while a positive Z score indicates that it is above the average.</p>

<p><br /></p>

<p>Use <code class="language-plaintext highlighter-rouge">summary(logan$z_score)</code> to check the Z score summary statistics. You will observe that the individual with the shortest education duration in our dataset has a schooling period that is 4.23 standard deviations below the mean. Conversely, the individual with the longest schooling duration is 2.35 standard deviations above the average.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-visualizing-z-scores-in-a-histogram">3. Visualizing Z scores in a histogram</h2>

<p>One way to visually represent our data is by using a histogram. It shows how often each different value occurs. The x-axis represents the variable values, while the y-axis represents the count of occurrences for each value in our sample.</p>

<p><br /></p>

<p>You can plot a histogram in ggplot2 with the geom layer called <code class="language-plaintext highlighter-rouge">geom_histogram()</code>. It has the argument bins where you can pass the number of intervals you would like to divide your data, that is, how many bars you will have.</p>

<p><br /></p>

<p>In the plot below, the white dashed lines indicate the interval of two standard deviations (Z=+/-2) around the mean. Similarly, the yellow dashed lines represent the interval of three standard deviations (Z=+/-3) around the mean. These lines are added with the <code class="language-plaintext highlighter-rouge">geom_vline()</code> function.</p>

<p><br /></p>

<p>To customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘How to show historical weather data with ggplot2 customized plots’</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-4">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
        </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Eliminates grids:</span><span class="w">
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">mean_edu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">sd_edu</span><span class="w">   </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">


</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">education</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> 
                </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> 
                </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> 
                </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">15</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Years of education"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">   
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">   
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">,</span><span class="w"> 
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">,</span><span class="w"> 
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4.5</span><span class="p">,</span><span class="w">  </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=-3"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w">   </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=3"</span><span class="p">,</span><span class="w">  </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7.3</span><span class="p">,</span><span class="w">  </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=-2"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">18.3</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=2"</span><span class="p">,</span><span class="w">  </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_09_01.png" alt="Histogram of Schooling Duration" /></p>

<p><br /></p>

<p>One remarkable conclusion we draw from the plot above is that the majority of data points fall within a range of up to two standard deviations from the mean. In fact, only 4.4% of our observations exceed this threshold of two standard deviations. Note as well that there are 15 bars in the histogram, which is the number of bins we specified in the <code class="language-plaintext highlighter-rouge">geom_histogram()</code> function.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-skewness-of-the-distribution">4. Skewness of the distribution</h2>

<p>Skewness refers to the asymmetry of a distribution. The distribution of education duration is skewed to the left. This means there are more individuals with a very low education duration compared to those with a very large duration. This can also be seen by the minimum and maximum Z score. While the minimum is -4.23, the maximum is only 2.35. Extreme Z-scores are also indicators of outliers, that is, values unusually high or low compared to most of the observations.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To know more about z scores and distributions , check
        
        <a href="https://soc.utah.edu/sociology3112/normal-distribution.php" target="_blank"> this page of the University of Utah.</a>
        
    </div>
</div>

<p><br /></p>

<p>In the next lesson, we will explore a specific type of distribution known as the normal distribution. This distribution is symmetric and has certain properties that make it easier to analyze.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>The Z score is a measure of how many standard deviations a data point is away from the mean. It can be easily calculated in R;</li>
  <li>ggplot2 can be used to visualize the different Z scores in a distribution;</li>
  <li>Extreme Z-scores might indicate outliers or skewed distributions;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="R," /><category term="statistics," /><category term="z" /><category term="score," /><category term="standard" /><category term="deviation," /><category term="histogram" /><summary type="html"><![CDATA[learn to calculate and visualize z scores.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_09.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_09.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Text Mining in Python - TF-IDF</title><link href="http://localhost:4000/2023/04/26/Text-Mining-in-Python.html" rel="alternate" type="text/html" title="Text Mining in Python - TF-IDF" /><published>2023-04-26T00:00:00-03:00</published><updated>2023-04-26T00:00:00-03:00</updated><id>http://localhost:4000/2023/04/26/Text-Mining-in-Python</id><content type="html" xml:base="http://localhost:4000/2023/04/26/Text-Mining-in-Python.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Changes are shifting outside the words.”</p>

<p>Annie Lennox</p>

<p><br /></p>

<p>In the <a href="/2023/04/02/Text-Analysis-1.html">Visualizing Text Data</a> lesson we learned how to use term frequency to identify the most frequent words in a document. However, this method only considers the frequency of each term within a single document and doesn’t account for the frequency of the same word in other documents in the corpus. To account for this limitation, TF-IDF was introduced. TF-IDF stands for Term Frequency - Inverse Document Frequency. It is a numerical statistic intended to reflect how important a word is to a document in a collection or corpus. In this lesson, we’ll explore how to calculate TF-IDF scores and visualize the results using Python.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available on the <a href="https://ota.bodleian.ox.ac.uk/repository/xmlui/handle/20.500.12024/2021" target="_blank">Oxford Text Archive</a> website. To know more about textual data sources, please check out this post: <a href="/2023/01/10/Where-to-find-and-how-to-load-historical-data.html">‘Where to find and how to load historical data’</a></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-identifying-relevant-words-in-historical-documents">Coding the past: identifying relevant words in historical documents</h1>

<p><br /></p>

<h2 id="1-tf-idf-formula">1. TF-IDF formula</h2>

<p><br /></p>

<p>TF-IDF (Term Frequency-Inverse Document Frequency) is a numerical measure that indicates the importance of a word in a document taking into account how frequent the word is in other documents in the same corpus. It consists of multiplying the term frequency (TF) by the inverse document frequency (IDF), which is the logarithm of the total number of documents divided by the number of documents containing the term. The formula is as follows:</p>

<p><br /></p>

\[w_{ij} = tf_{ij} * log(\frac{N}{df_i})\]

<p><br /></p>

<p>Where:</p>

<ul class="conclusion-list">
  <li>\(w_{ij}\) is the tf-idf weight for word \(i\) in document \(j\);</li>
  <li>\(tf_{ij}\) is the number of times word \(i\) appears in document \(j\) divided by the total number of words in document \(j\);</li>
  <li>\(N\) is the total number of documents in the corpus;</li>
  <li>\(df_i\) is the number of documents in the corpus that contain word \(i\).</li>
</ul>

<p><br /></p>

<h2 id="2-tf-idf-calculation-example">2. TF-IDF calculation example</h2>

<p>Suppose you want to calculate the TF-IDF weight for the word “British”, which appears 5 times in a document containing 100 words. Given a corpus containing 4 documents, with 2 documents mentioning the word “British”, TF-IDF can be calculated by:</p>

\[w_{British} = \frac{5}{100} * log(\frac{4}{2}) = 0.015\]

<p><br /></p>

<p>TF-IDF increases as the term frequency increases, but it decreases as the number of times the word appears in other documents in the corpus increases. Variations of the TF-IDF weighting scheme are often used by search engines as a central tool in scoring and ranking a document’s relevance given a user query.</p>

<p><br /></p>

<h2 id="3-preprocessing-text-data-in-python">3. Preprocessing text data in Python</h2>

<p><br /></p>

<p>We will be using the same functions from the lesson <a href="/2023/04/02/Text-Analysis-1.html">Visualizing Text Data</a> to preprocess the text data. The functions are:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">load_text</code>: loads the text from a <em>txt</em> file and returns a list of words;</li>
  <li><code class="language-plaintext highlighter-rouge">prepare_text</code>: preprocesses the text by removing stopwords, removing words with less than 3 characters, and transforming all words to lower case;</li>
  <li><code class="language-plaintext highlighter-rouge">count_freq</code>: counts the frequency of each word in the the document and returns a dataframe with the results.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>
<span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">load_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span> <span class="s">"latin-1"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">islice</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="n">my_text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="p">[</span><span class="n">word_tokenize</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">my_text</span><span class="p">]</span>
    <span class="n">flat_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">my_text</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">flat_list</span>

<span class="k">def</span> <span class="nf">prepare_text</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">):</span>
  <span class="c1">#load stopwords:
</span>  <span class="n">stops</span> <span class="o">=</span> <span class="n">stopwords</span><span class="p">.</span><span class="n">words</span><span class="p">(</span><span class="s">'english'</span><span class="p">)</span>
  <span class="c1">#transform all word characters to lower case:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span><span class="p">]</span>
  <span class="c1">#remove all words containing up to two characters:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
  <span class="c1">#remove stopwords:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
  <span class="k">return</span> <span class="n">list_of_words</span>

<span class="k">def</span> <span class="nf">count_freq</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="n">unique_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># create a list of unique words:
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">item</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span> 
        <span class="n">unique_words</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="c1"># count the frequency of each word:
</span>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">counts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>

    <span class="c1"># create a dataframe with the words and their frequencies:
</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"word"</span><span class="p">:</span> <span class="n">unique_words</span><span class="p">,</span> <span class="s">"count"</span><span class="p">:</span> <span class="n">counts</span><span class="p">})</span>
    <span class="n">df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">"count"</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span></code></pre></figure>


</div>

<p><br /></p>

<p>After loading the functions above, we can use them to preprocess the text data.</p>

<p><br /></p>

<p>Now we load the manifests of three authors: Oxenbridge Thacher, James Otis, and James Mayhew. The results are stored in three lists called <code class="language-plaintext highlighter-rouge">thacher</code>, <code class="language-plaintext highlighter-rouge">otis</code>, and <code class="language-plaintext highlighter-rouge">mayhew</code>. After that, we preprocess the text data using the function <code class="language-plaintext highlighter-rouge">prepare_text</code> and count the frequency of each word in each document using the function <code class="language-plaintext highlighter-rouge">count_freq</code>. Results are stored in three dataframes called <code class="language-plaintext highlighter-rouge">thacher_df</code>, <code class="language-plaintext highlighter-rouge">otis_df</code>, and <code class="language-plaintext highlighter-rouge">mayhew_df</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'thacher-2021.txt'</span><span class="p">)</span>
<span class="n">otis</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'otis-2021.txt'</span><span class="p">)</span>
<span class="n">mayhew</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'mayhew2-2021.txt'</span><span class="p">)</span>

<span class="n">thacher_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">thacher</span><span class="p">)</span>
<span class="n">otis_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">otis</span><span class="p">)</span>
<span class="n">mayhew_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">mayhew</span><span class="p">)</span>

<span class="n">thacher_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">thacher_prepared</span><span class="p">)</span>
<span class="n">otis_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">otis_prepared</span><span class="p">)</span>
<span class="n">mayhew_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">mayhew_prepared</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-calculating-term-frequencies-for-each-document">3. Calculating term frequencies for each document</h2>

<p><br /></p>

<p>As we have seen, the first component to calculate the TF-IDF weight is the term frequency. We can calculate the term frequency for each document by dividing the number of times a word appears in the document by the total number of words in it.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">otis_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">mayhew_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-calculating-how-many-times-a-word-appears-in-each-document-in-the-corpus">4. Calculating how many times a word appears in each document in the corpus</h2>

<p><br /></p>

<p>To calculate \(df_i\), we will left join all our dataframes. Then, for each row (word) we will sum the number of times its term frequency is greater than zero. In other words, we will count in how many documents the word appears at least once. This value will vary from 1 to 3, since we have three documents in our corpus. This count can be made with the pandas method <code class="language-plaintext highlighter-rouge">ne()</code> that checks if the values in the columns specified are not equal (ne) to zero. The results are booleans that can be summed to get the number of documents in which the word appears.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-4">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#left join all dataframes:
</span><span class="n">thacher_otis</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">otis_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]],</span> 
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span> 
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span> 
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_otis"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">thacher_otis_may</span> <span class="o">=</span> <span class="n">thacher_otis</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">mayhew_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]],</span>
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span>
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">#rename TF column to TF_mayhew:
</span><span class="n">thacher_otis_may</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">"TF"</span><span class="p">:</span> <span class="s">"TF_mayhew"</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1">#count in how many documents each word appears:
</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"TF_thacher"</span><span class="p">,</span> <span class="s">"TF_otis"</span><span class="p">,</span> <span class="s">"TF_mayhew"</span><span class="p">]].</span><span class="n">ne</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-tf-idf-calculation">5. TF-IDF calculation</h2>

<p><br /></p>

<p>Finally we have all elements to calculate the TF-IDF weight. Note that we will be using base 10 logarithms. To calculate the logarithm, we can use the library <code class="language-plaintext highlighter-rouge">math</code> and its method <code class="language-plaintext highlighter-rouge">log10()</code>. We use the <code class="language-plaintext highlighter-rouge">apply()</code> method to apply the logarithm to each row of <em>dfi</em> and then multiply it by the term frequency. The results are stored in three new columns called <code class="language-plaintext highlighter-rouge">TF-IDF_thacher</code>, <code class="language-plaintext highlighter-rouge">TF-IDF_otis</code>, and <code class="language-plaintext highlighter-rouge">TF-IDF_mayhew</code>. Note that <em>dfi</em> varies from 1 to 3, so when the word appears in all three documents, the logarithm element will be zero and consequently TF-IDF  will be zero as well (\(log_{10} 1 = 0\)).
<br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">math</span>

<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_thacher"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_thacher"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_otis"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_otis"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_mayhew"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_mayhew"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-comparing-tf-top-10-words-with-tf-idf-top-10-words">5. Comparing TF top 10 words with TF-IDF top 10 words</h2>

<p><br /></p>

<p>Now we can compare how the two methods define the 10 most important words in each document. Keep in mind that the term frequency does not account for the words in other documents of the corpus while TF-IDF does. TF logic is that the most important words are the ones that appear the most in the document. TF-IDF logic is that the most important words are the ones that appear the most in the document but not in the other documents of the corpus. TF-IDF is more sophisticated because it helps you to distinguish one document from the others.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#create 2 dataframes with the top 10 words for each method:
</span>
<span class="n">TF_IDF_thacher</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_thacher"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_thacher"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_thacher</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_thacher"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_thacher"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1">#plot:
</span>
<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1">#barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_thacher</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_thacher</span><span class="p">[</span><span class="s">"TF_thacher"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_thacher</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_thacher</span><span class="p">[</span><span class="s">"TF-IDF_thacher"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1">#title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher TF-IDF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.002</span><span class="p">,</span> <span class="mf">0.003</span><span class="p">])</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1">#fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1">#layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_01.png" alt="Comparison TF vs TF-IDF: Thacher" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TF_IDF_otis</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_otis"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_otis"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_otis</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_otis"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_otis"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1"># barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_otis</span><span class="p">[</span><span class="s">"TF_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_otis</span><span class="p">[</span><span class="s">"TF-IDF_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis TF-IDF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.0005</span><span class="p">,</span> <span class="mf">0.0010</span><span class="p">,</span> <span class="mf">0.0015</span><span class="p">])</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_02.png" alt="Comparison TF vs TF-IDF: Otis" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TF_IDF_mayhew</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_mayhew"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_mayhew"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_mayhew</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_mayhew"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_mayhew"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1"># barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_mayhew</span><span class="p">[</span><span class="s">"TF_mayhew"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_mayhew</span><span class="p">[</span><span class="s">"TF-IDF_mayhew"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew TF-IDF"</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_03.png" alt="Comparison TF vs TF-IDF: Otis" /></p>

<p><br /></p>

<p>Please note that common words in the corpus, such as “Britain” and “government,” simply do not appear in the top 10 chart because they are present in all three documents. The intuition behind this is that these words are so common in the corpus that they do not provide much useful information. The top 10 words found with TF-IDF have a stronger explanatory power in distinguishing between the three authors. Furthermore, despite being present in two documents, the word “colonies” continues to have a strong TF-IDF score. This is because the word is not present in all three documents, and it is very common in the two documents where it appears.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>TF-IDF depends on two factors: the frequency of a word in a document, and the inverse frequency of the word in the corpus;</li>
  <li>It is possible to calculate TF-IDF scores from scratch in Python, which helps you to understand the logic behind the calculation;</li>
  <li>TF-IDF is a useful tool when you want to identify words that are specific to a particular document.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="visualization" /><category term="tf-idf" /><category term="text-mining" /><summary type="html"><![CDATA[learn to calculate tf-idf scores and visualize your results.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_08.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_08.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Visualizing Text Data</title><link href="http://localhost:4000/2023/04/02/Text-Analysis-1.html" rel="alternate" type="text/html" title="Visualizing Text Data" /><published>2023-04-02T00:00:00-03:00</published><updated>2023-04-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/04/02/Text-Analysis-1</id><content type="html" xml:base="http://localhost:4000/2023/04/02/Text-Analysis-1.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Words have no power to impress the mind without the exquisite horror of their reality.”</p>

<p>Edgar Allan Poe</p>

<p><br /></p>

<p>One common way of distinguishing between history and prehistory is by the emergence of writing. In particular, in our modern era, text data has become ubiquitous. The study of either the past or the present often involves the analysis of text. From social media to scientific journals, words are everywhere. In this lesson, we will learn how to analyze and visualize textual data. We will use the <a href="https://www.nltk.org/" target="_blank">Natural Language Toolkit (NLTK)</a> to tokenize the text data, and the <a href="https://matplotlib.org/" target="_blank">Matplotlib</a>  library to visualize our results.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available on the <a href="https://ota.bodleian.ox.ac.uk/repository/xmlui/handle/20.500.12024/2021" target="_blank">Oxford Text Archive</a> website. To know more about textual data sources, check this post: <a href="/2023/01/10/Where-to-find-and-how-to-load-historical-data.html">‘Where to find and how to load historical data’</a></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-visualizing-text-data">Coding the past: visualizing text data</h1>

<h2 id="1-importing-text-data-with-python">1. Importing text data with Python</h2>

<p><br />
To load the text files mentioned above, we will build a function. Before we start to write the function, all libraries necessary for this lesson will be loaded.</p>

<p><br /></p>

<p>Using the <code class="language-plaintext highlighter-rouge">with</code> statement will ensure that the file is closed when the block inside it is finished. Note that we use “latin-1” encoding. The function <code class="language-plaintext highlighter-rouge">islice()</code> creates an iterable object and a for loop is used to slice the file into chunks (lines). Each line is appended to the list <code class="language-plaintext highlighter-rouge">my_text</code>.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">word_tokenize</code> is a function from the NLTK library that splits a sentence into words. All the sentences are then split into words and stored in a list. Note that the list needs to be flattened into a single list, since the tokenizer returns a list of lists. This is done with a list comprehension.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>
<span class="n">nltk</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="s">'stopwords'</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">load_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span> <span class="s">"latin-1"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">islice</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="n">my_text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="p">[</span><span class="n">word_tokenize</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">my_text</span><span class="p">]</span>
    <span class="n">flat_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">my_text</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">flat_list</span></code></pre></figure>


</div>

<p><br /></p>

<p>Now we load the manifests of three authors: Oxenbridge Thacher, James Otis, and James Mayhew. The results are stored in three lists called <code class="language-plaintext highlighter-rouge">thacher</code>, <code class="language-plaintext highlighter-rouge">otis</code>, and <code class="language-plaintext highlighter-rouge">mayhew</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'thacher-2021.txt'</span><span class="p">)</span>
<span class="n">otis</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'otis-2021.txt'</span><span class="p">)</span>
<span class="n">mayhew</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'mayhew2-2021.txt'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>If you check the length of the lists, you will see that Oxenbridge Thacher’s manifest has approximately 4,156 words; James Mayhew, 18,969 words; and James Otis, 34,031 words.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-removing-stop-words-in-python">2. Removing stop words in Python</h2>

<p><br /></p>

<p>In this function, we will use NLTK stopwords to remove all words that do not add any meaning to our analysis. Moreover, we transform all characters to lowercase and remove all words containing two or fewer characters.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">prepare_text</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">):</span>
  <span class="c1">#load stopwords:
</span>  <span class="n">stops</span> <span class="o">=</span> <span class="n">stopwords</span><span class="p">.</span><span class="n">words</span><span class="p">(</span><span class="s">'english'</span><span class="p">)</span>
  <span class="c1">#transform all word characters to lower case:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span><span class="p">]</span>
  <span class="c1">#remove all words containing up to two characters:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
  <span class="c1">#remove stopwords:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
  <span class="k">return</span> <span class="n">list_of_words</span></code></pre></figure>


</div>

<p><br /></p>

<p>We apply the function to the three lists of words. After the cleaning process, the number of words is reduced to less than 50% of the original size.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-4">

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">thacher_prepared = prepare_text(thacher)
otis_prepared = prepare_text(otis)
mayhew_prepared = prepare_text(mayhew)</code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-how-to-count-words-in-a-list-using-python">3. How to count words in a list using python</h2>

<p><br /></p>

<p>The function below counts the frequency of each word and returns a dataframe with the words and their frequencies, sorted by the frequency.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">count_freq</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="n">unique_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># create a list of unique words:
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">item</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span> 
        <span class="n">unique_words</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="c1"># count the frequency of each word:
</span>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">counts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="c1"># create a dataframe with the words and their frequencies:
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"word"</span><span class="p">:</span> <span class="n">unique_words</span><span class="p">,</span> <span class="s">"count"</span><span class="p">:</span> <span class="n">counts</span><span class="p">})</span>
    <span class="n">df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">"count"</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="n">thacher_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">thacher_prepared</span><span class="p">)</span>
<span class="n">otis_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">otis_prepared</span><span class="p">)</span>
<span class="n">mayhew_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">mayhew_prepared</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-word-count-visualization">4. Word count visualization</h2>

<p><br /></p>

<p>We will use the <code class="language-plaintext highlighter-rouge">matplotlib</code> library to create a bar plot with the 10 most frequent words in each manifest. We use <code class="language-plaintext highlighter-rouge">iloc</code> to select the first 10 rows of each dataframe. <code class="language-plaintext highlighter-rouge">barh</code> creates a horizontal bar plot where the words are on the y-axis and the frequency on the x-axis. After that, we set the title of each plot and perform a series of adjustments to the plot, including the elimination of the grid, the removal of part of the frame, and the change in font and background colors. Finally we also use the tight layout function to adjust the spacing between the plots.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_10</span> <span class="o">=</span><span class="n">thacher_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>
<span class="n">otis_10</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>
<span class="n">mayhew_10</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>

<span class="c1"># horizontal barplot:
</span>
<span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">thacher_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">thacher_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">otis_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">otis_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>

<span class="n">ax3</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">mayhew_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">mayhew_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#fdb462"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#fdb462"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis"</span><span class="p">)</span>
<span class="n">ax3</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew"</span><span class="p">)</span>

<span class="c1"># iterate over ax1, ax2, ax3 to: 
# invert the y axis;
# eliminate grid;
# set fonts and background colors;
# eliminate spines;
</span><span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             
    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           
    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              
    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 
    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    
    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    
    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_07_01.png" alt="plot of the most frequent words in each manifest" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-calculate-the-proportion-of-each-word-and-comparing-the-manifests">5. Calculate the proportion of each word and comparing the manifests</h2>

<p><br />
Finally, we calculate the proportion of each word in each manifest relative to the total number of words in that document and store them in a new column called “proportion”. We also create two new data frames, one for each pair of manifests: one to compare Thacher and Otis, and the other to compare Thacher and Mayhew. This is done by an outer join, using the <code class="language-plaintext highlighter-rouge">word</code> column as the key. This operation keeps all the words, even the ones that are not included in both datasets, and fills the missing values with 0.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">otis_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">mayhew_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>

<span class="n">thacher_otis</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">otis_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]],</span> 
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span> 
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span> 
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_otis"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">thacher_mayhew</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">mayhew_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]],</span>
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span>
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span>
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_mayhew"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>Now we will compare the three manifests by plotting the proportion of each word in Thacher on the x-axis and the proportion of the same word in Otis on the y-axis. We will use the <code class="language-plaintext highlighter-rouge">scatter</code> function to create a scatter plot in which the coordinates are the frequencies of a given word in Thacher and Otis. We will also use the <code class="language-plaintext highlighter-rouge">annotate</code> function to label each point with the word. The same procedure will be used to compare Thacher and Mayhew. Note that the more similar the manifests, the more points will be concentrated in the diagonal line (same frequency in both manifests).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="c1"># scatterplot:
</span><span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">],</span> <span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># annotate words:
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">]):</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">txt</span><span class="p">,</span> 
                <span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> 
                 <span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_otis"</span><span class="p">][</span><span class="n">i</span><span class="p">]),</span> 
                 <span class="n">color</span> <span class="o">=</span> <span class="s">"white"</span><span class="p">,</span> 
                 <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">)</span>
    
<span class="c1"># eliminate grid:
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># x axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>

<span class="c1"># y axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"Otis"</span><span class="p">)</span>

<span class="c1"># diagonal dashed line:
</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.012</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"gray"</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">"--"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># ax background color:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># x and y axes labels font color to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>


<span class="c1"># ax font colors set to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># set spines to false:
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_07_02.png" alt="Word frequency scatterplot: Thacher vs Otis" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-9')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-9">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># plot scatterplot with words:
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">],</span> 
           <span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_mayhew"</span><span class="p">],</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> 
           <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">]):</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">txt</span><span class="p">,</span> <span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> 
                      <span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_mayhew"</span><span class="p">][</span><span class="n">i</span><span class="p">]),</span> 
                      <span class="n">color</span> <span class="o">=</span> <span class="s">"white"</span><span class="p">,</span> 
                      <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">)</span>
<span class="c1"># eliminate grid:
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="c1"># x axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>
<span class="c1"># y axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"Mayhew"</span><span class="p">)</span>
<span class="c1"># diagonal dashed line:
</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.012</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"gray"</span><span class="p">,</span> 
        <span class="n">linestyle</span> <span class="o">=</span> <span class="s">"--"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># ax background color:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># x and y axes labels font color to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>


<span class="c1"># ax font colors set to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># set spines to false:
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_07_03.png" alt="Word frequency scatterplot: Thacher vs Mayhew" /></p>

<p><br /></p>

<p>Note that Thacher and Otis are more similar than Thacher and Mayhew. This is reflected in the scatterplot, where the points are more concentrated in the diagonal line in the plot relating Thacher and Otis compared to the one relating Thacher and Mayhew. This is a simple way to compare the similarity of two texts. We know, for example, that, while Thacher talks a lot about “colonies”, Mayhew talks a lot about “god”.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>You can tokenize text data with the NLTK library method <code class="language-plaintext highlighter-rouge">word_tokenize</code>;</li>
  <li>With list comprehensions, you can treat text to eliminate irrelevant characters and words;</li>
  <li>You can visualize the frequency of words in a text with matplotlib.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="visualization" /><category term="matplotlib" /><category term="text-analysis" /><summary type="html"><![CDATA[learn to tokenize texts with nltk]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_07.png" /><media:content medium="image" url="http://localhost:4000/lesson_07.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What are the digital humanities?</title><link href="http://localhost:4000/2023/03/08/Digital-Humanities.html" rel="alternate" type="text/html" title="What are the digital humanities?" /><published>2023-03-08T00:00:00-03:00</published><updated>2023-03-08T00:00:00-03:00</updated><id>http://localhost:4000/2023/03/08/Digital%20Humanities</id><content type="html" xml:base="http://localhost:4000/2023/03/08/Digital-Humanities.html"><![CDATA[<p><br /></p>

<p><strong>‘The internet could be a very positive step towards education, organization and participation in a meaningful society’</strong></p>

<p>Noam Chomsky</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="introduction-a-definition">Introduction: a definition</h1>
<p>Simply put, the digital humanities concern the research in humanities utilizing information technology. It is the application of computer-based technology in the humanities. <a href="https://en.wikipedia.org/wiki/Digital_humanities" target="_blank">Wikipedia</a> defines it as the intersection between computing and the disciplines of humanities. But, after all, what are humanities?</p>

<p><br /></p>

<h1 id="humanities-in-a-sentence">Humanities in a sentence</h1>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Humanities are the fields that study human culture and values, including all languages and literature, the arts, history, philosophy, and communications. See more in 
        
        <a href="https://www.britannica.com/topic/humanities" target="_blank"> Britannica.</a>
        
    </div>
</div>

<p><br /></p>

<h1 id="a-short-history">A short history</h1>
<p>In the second half of the 20th century, new technologies changed the world in unprecedented ways. Communication has become easier and faster and many kinds of tasks that could be organized as a set of instructions to a computer became extraordinarily faster.</p>

<p><br /></p>

<p>Moreover, new media formats made it possible to store large amounts of data. More recently, <a href="https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-the-cloud" target="_blank">the cloud</a> made storing terabytes of information an easy job. Information that was only available locally, to a restricted public, is now omnipresent. As expected, all these developments shaped the whole society and the way we see and study the world.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_06_01.jpeg" alt="Image showing computers generated by artificial intelligence " title="AI generated image" /></p>
<p class="fig-caption">Illustration created by Deep AI (deepai.org)</p>

<p><br /></p>

<p>In humanities, an obvious ramification of the digital revolution is that we have much more data available because of the rapid digitalization of our sources of study. For instance, <a href="https://www.oldbaileyonline.org/" target="_blank">the Old Bailey Online website</a> is a resource that gathered 197,745 criminal records from London central criminal court between 1674 and 1913.  Imagine a historian trying to analyze this data five decades ago! He would have had to visit physical archives and spend years searching for his sources. Nowadays, anyone having a smartphone and a connection to the Internet may search the database and get the data anywhere.</p>

<p><br /></p>

<p>Not only has access to data increased but also the tools to process it are now fascinating. The use of digital tools, like data science and machine learning, allows us to “mine” huge amounts of data, classify, visualize and draw insights from it.</p>

<p><br /></p>

<h1 id="research-on-humanities-and-social-sciences-in-the-digital-era">Research on humanities and social sciences in the digital era</h1>

<p>With all these advancements, the research in humanities and social sciences has also benefited a lot. In this <a href="https://programminghistorian.org/en/lessons/data-mining-the-internet-archive" target="_blank">article</a>, for example, Dr. McDaniel shows how to use Python to automate the download of historical data from the <a href="https://archive.org/" target="_blank">Internet Archive</a>. Python and R can also be used for <a href="https://python-textbook.pythonhumanities.com/04_topic_modeling/04_01_02_topic_modeling_concepts.html" target="_blank">topic modeling</a>, <a href="https://programminghistorian.org/en/lessons/temporal-network-analysis-with-r" target="_blank">temporal network analysis</a>, data visualization, and the application of statistical methods to learn about the relationship between variables.</p>

<p><br /></p>

<p>More recently, causal inference methods have been used to study historical events. <a href="https://kops.uni-konstanz.de/server/api/core/bitstreams/5804ca0a-4de3-4d90-89e7-166fc178bece/content" target="_blank">Munzert and Selb</a> study the impact of Hitler’s speeches on the number of votes his party received in the <em>Reichstag</em> elections before 1933.  The authors found very modest effects, challenging the importance of electoral campaigns.</p>

<p><br /></p>

<p><a href="https://economics.mit.edu/sites/default/files/publications/Comparative%20Politics%20and%20the%20Synthetic%20Control.pdf" target="_blank">Abadie and others</a> employ the synthetic control method to verify the economic impact of the German reunification in 1990. The authors found considerable negative effects of the reunification on West German income.</p>

<p><br /></p>

<p>There are many other articles that use data science and digital methods to study humanities, showing that digital humanities have a promising future. Moreover, it is a way of increasing diversity in humanities, since new perspectives arise on established topics. To learn more about digital methods applied in History, please consult <a href="https://programminghistorian.org/en/" target="_blank">Programming Historian</a>, an excellent and reliable resource for learning the tools for digital humanities.</p>

<p><br /></p>

<h1 id="and-what-about-social-data-science">And what about social data science?</h1>

<p>The boundaries between humanities and social sciences are not always well defined. Nevertheless, usually social sciences would be fields like economics, political science, and sociology. Social data science is analogous to digital humanities however, in this case,  digital tools are applied to social sciences. Thus, they share a lot of characteristics.</p>

<p><br /></p>

<h1 id="digital-humanities-and-social-data-science-programs">Digital Humanities and social data science programs</h1>

<p>Although the field is relatively young, there are many options for humanists willing to pursue a degree in digital humanities. Below you will learn about three options to have an idea of how these courses are structured and the skills they focus on.</p>

<p><br /></p>

<h2 id="cambridge-digital-humanities---mphil">Cambridge Digital Humanities - MPhil</h2>

<p>This one-year master’s program explores the application of digital approaches and methodology in humanities and how these innovations impact the way we study human culture and behavior. The master’s is suitable for people with a background in History, Archaeology, Literature, Linguistics, Art History, Economics, Computer Science, etc.</p>

<p><br /></p>

<p>During the course, students will learn about data formats, like XML and JSON, and programming languages, especially Python, <a href="https://developer.mozilla.org/en-US/docs/Web/XSLT" target="_blank">XSLT</a>, and <a href="https://en.wikipedia.org/wiki/SQL" target="_blank">SQL</a>. Moreover, students will get in contact with previous applications of digital humanities, analyze them and learn about each digital tool employed in that application. Visit the <a href="https://www.cdh.cam.ac.uk/mphil/#2-video" target="_blank">Cambridge Digital Humanities</a> to read more about this program.</p>

<p><br /></p>

<h2 id="ma-in-digital-studies---the-university-of-chicago">MA in Digital Studies - The University of Chicago</h2>

<p>This program prepares students to apply computational methods in humanities and social sciences. It combines writing,  critical and analytical thinking with computational skills. Python is the language chosen to initiate students in programming. Data visualization, data analysis, and machine learning are the core courses of this master’s.</p>

<p><br /></p>

<p>Data management for humanities emphasizes the representation and management of data types and formats encountered in the humanities. One highlight is that this course offers a course on publishing data on web applications employing HTML5, CSS, and JavaScript. To know more, visit <a href="https://digitalstudies.uchicago.edu/" target="_blank">the course’s page</a>.</p>

<p><br /></p>

<h2 id="social-data-science-minor---ucla">Social Data Science Minor - UCLA</h2>

<p>The Social Data Science minor seeks to provide a solid background in data science for students majoring in social sciences. According to UCLA Professor Mark Handcock, the course aims at better preparing social scientists who will work in a data-filled world. Handcock highlights that the minor will focus on the types of data social scientists work with.</p>

<p><br /></p>

<p>Students willing to pursue this degree must first complete preparatory courses in introduction to statistical reasoning, introduction to statistical programming in R, and linear algebra. Later on in the course, students will deepen their skills in data analysis, regression, experiment design and analysis, statistical models, data mining, and the societal impacts of data. To know more about the course, check the <a href="http://statistics.ucla.edu/undergraduate/social-data-science-minor/" target="_blank">UCLA website</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusion">Conclusion</h1>

<p>Digital humanities expanded the frontiers of the study of humans, their cultures, and societies. Computational methods, rather than intruders, are a renewal and expansion of the field. The job market for digital humanities is growing and promising and the computational skills learned in digital humanities are as valuable as never before.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="sources">Sources</h1>

<ul class="conclusion-list">
  <li><a href="http://webhost.bridgew.edu/edubinsky/DH/definition.html" target="_blank">Why digital humanities?</a></li>
  <li><a href="https://www.thebritishacademy.ac.uk/blog/what-are-digital-humanities/" target="_blank">What are the Digital Humanities?</a></li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>]]></content><author><name>Bruno Ponne</name></author><category term="socialdatascience" /><category term="digitalhumanities" /><summary type="html"><![CDATA[Learn what are the digital humanities and their application in research on humanities and social science.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_06.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_06.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Changing ggplot colors with scale_color_brewer</title><link href="http://localhost:4000/2023/02/22/Military-Expenses.html" rel="alternate" type="text/html" title="Changing ggplot colors with scale_color_brewer" /><published>2023-02-22T00:00:00-03:00</published><updated>2023-03-05T00:00:00-03:00</updated><id>http://localhost:4000/2023/02/22/Military%20Expenses</id><content type="html" xml:base="http://localhost:4000/2023/02/22/Military-Expenses.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘War is over, if you want it, war is over, now’</strong></p>

<p>John Lennon</p>

<p><br /></p>

<p>Have you ever seen a webpage where text and visualizations do not have the right contrast or where colors do not match? I have had this experience and I have to admit that I myself have difficulty choosing adequate colors for my plots. There are so many technical details to pay attention to! Fortunately R offers you several libraries made by professional designers that offer excellent color palettes for you. In this lesson, you will learn about one of these libraries, the RColorBrewer. We will use data on military expenses of the main capitalist countries during the Cold War.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available on the <a href="https://databank.worldbank.org/home" target="_blank">World Bank</a> website.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-improve-your-plots-colors-with-scale_color_brewer">Coding the past: improve your plot’s colors with scale_color_brewer</h1>

<h2 id="1-importing-data-into-r">1. Importing data into R</h2>

<p><br />
Download the <a href="http://localhost:4000/assets/data/military.csv">data file here</a> and load the libraries we will need, according to the code below. To read the data, use the R function <code class="language-plaintext highlighter-rouge">read_csv()</code>. Additionally, we are only interested in the five first rows and in columns 3 and 5 to 36. They are selected with <code class="language-plaintext highlighter-rouge">[1:5, c(3, 5:36)]</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">

</span><span class="n">military</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_csv</span><span class="p">(</span><span class="s1">'military.csv'</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="o">:</span><span class="m">36</span><span class="p">)]</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-use-pivot_longer">2. How to use pivot_longer?</h2>

<p><br /></p>

<p>If you take a look at the dataframe you just loaded, you will see that it has one column for each year. To use ggplot your data has to be tidy. According to Hadley Wickham, in a tidy dataframe:</p>

<p><br /></p>

<ol class="conclusion-list">
  <li>Each variable must have its own column;</li>
  <li>Each observation must have its own row;</li>
  <li>Each value must have its own cell;</li>
</ol>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Learn more about tidy data and how to transform a dataframe from wide to long format 
        
        <a href="https://r4ds.had.co.nz/tidy-data.html" target="_blank"> here.</a>
        
    </div>
</div>

<p><br /></p>

<p>To make our data tidy, we will transform all the year columns in one variable called “year” and we will also transfer the values contained in these columns to a single new variable called “expense”. Note the syntax of the <code class="language-plaintext highlighter-rouge">pivot_longer</code> function. The first argument is the dataframe we want to transform, the second are the columns we would like to treat. Finally, <code class="language-plaintext highlighter-rouge">names_to</code> indicates the name of the new column that will receive the years and <code class="language-plaintext highlighter-rouge">values_to</code> indicates the name of the new column that will receive the values of the year columns.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_05_01.png" alt="Conversion of dataframe from wide to long format" title="Image" /></p>
<p class="fig-caption">Illustration created by the Author</p>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">mutate</code> function makes two adjustments in the new long dataset. First, it eliminates the second part of the year names, e.g., <code class="language-plaintext highlighter-rouge">[YR1960]</code>. Second, it rounds the expenses values to two decimal places.</p>

<p><br /></p>

<p>Finally, we change the names of the columns (variables) in our dataset.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">military_long</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">military</span><span class="p">,</span><span class="w"> 
                              </span><span class="s1">'1960 [YR1960]'</span><span class="o">:</span><span class="s1">'1991 [YR1991]'</span><span class="p">,</span><span class="w"> 
                              </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'year'</span><span class="p">,</span><span class="w"> 
                              </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'expense'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">substr</span><span class="p">(</span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">),</span><span class="w"> </span><span class="n">expense</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">

</span><span class="nf">names</span><span class="p">(</span><span class="n">military_long</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'country'</span><span class="p">,</span><span class="w"> </span><span class="s1">'year'</span><span class="p">,</span><span class="w"> </span><span class="s1">'expense'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-using-scale_color_brewer-to-improve-your-plots-colors">3. Using scale_color_brewer to improve your plots’ colors</h2>

<p><br /></p>

<p>To see all the colors palettes the RColorBrewer offers, use the following code:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">display.brewer.all</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_05_02.png" alt="RColorBrewer available palettes" /></p>

<p><br /></p>

<p><br /></p>

<p>We will be using palette <code class="language-plaintext highlighter-rouge">Set1</code> in our line plot. To set it, add the layer <code class="language-plaintext highlighter-rouge">scale_color_brewer(palette = 'Set1')</code>. <strong>Note</strong> that we also set the x-axis to have labels every 4 years with <code class="language-plaintext highlighter-rouge">scale_x_discrete(breaks = seq(1960, 1990, by=4))</code>. Color  and group aesthetics were mapped to countries so that each country has a different color.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">military_long</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_x_discrete</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">1960</span><span class="p">,</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="o">=</span><span class="m">4</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Set1'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Year'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s1">'Military expenditure (% of GDP)'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Military Expenses of the Main Capitalist Economies'</span><span class="p">,</span><span class="w">
          </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'1960 - 1991'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_05_03.png" alt="plot using RColorBrewer palette" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-adding-a-theme-to-the-plot">4. Adding a theme to the plot</h2>

<p><br />
To customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘How to show historical weather data with ggplot2 customized plots’</a>. Small adjustments were made to adapt the theme to this plot. For instance, the legend position was set to be at the bottom of the plot and its title was deleted.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">military_long</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">,</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">))</span><span class="o">+</span><span class="w">
</span><span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
</span><span class="n">scale_x_discrete</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">1960</span><span class="p">,</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="o">=</span><span class="m">4</span><span class="p">))</span><span class="o">+</span><span class="w">
</span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Set1'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Year'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s1">'Military expenditure (% of GDP)'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Military Expenses of the Main Capitalist Economies'</span><span class="p">,</span><span class="w">
          </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'1960 - 1991'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">guides</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">''</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
            </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
            </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
            </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Eliminates grids:</span><span class="w">
            </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
            </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
            </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
            </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
            </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_05_04.png" alt="Plot with new theme" /></p>

<p><br /></p>

<p>Feel free to test other color palettes and check the one you like the most!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>You can transform your dataframe from wide to long format using <code class="language-plaintext highlighter-rouge">pivot_longer</code>;</li>
  <li>RColorBrewer offers color palettes to make your plots more effective and beautiful.</li>
</ul>
<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="visualization" /><category term="ggplot2" /><summary type="html"><![CDATA[Use scale_color_brewer to choose different color palettes]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_05.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_05.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Use Matplotlib line plot to create clear and compelling visualizations</title><link href="http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html" rel="alternate" type="text/html" title="Use Matplotlib line plot to create clear and compelling visualizations" /><published>2023-02-11T00:00:00-03:00</published><updated>2023-03-05T00:00:00-03:00</updated><id>http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations</id><content type="html" xml:base="http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘All that is solid melts into the air’</strong></p>

<p>Karl Marx and Friedrich Engels</p>

<p><br /></p>

<p>As a historian and social scientist I often find it challenging to customize my Python plots and make them clear and compelling. What is a Python class, object or method? 😲 In this lesson, you will learn what those concepts are and how to use them to create effective graphs with Matplotlib. We will plot and highlight elements in the trend of Gross Domestic Product (GDP) per capita of Germany and the USA during the 1929 crisis. If you would like to know more about this event, <a href="https://www.britannica.com/event/Great-Depression" target="_blank">check this out</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available at <a href="https://www.hbs.edu/businesshistory/courses/teaching-resources/historical-data-visualization/details?data_id=27" target="_blank">Harvard Business School</a></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> GDP is given in 1990 International Geary-Khamis dollars. To learn more about this unit, see this
        
        <a href="https://en.wikipedia.org/wiki/International_dollar" target="_blank"> link.</a>
        
    </div>
</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-beautiful-visualizations-with-matplotlib">Coding the past: beautiful visualizations with Matplotlib</h1>

<h2 id="1-what-is-matplotlib">1. What is Matplotlib?</h2>

<p><br /></p>

<p>Matplotlib is a Python library aimed at creating visualizations. It has a good interface with pandas dataframes, which makes it very practical to use. Matplotlib is the base library for other visualization libraries, like Seaborn.</p>

<p><br /></p>

<p>Before we dive into Matplotlib, we have to understand the concept of class and object. A Python object could be a plot, a string of text or a dataframe, for example. ‘<b>Classes</b> are a sort of blueprint for objects, specifying their properties (attributes) and behaviors (methods). For example, an object of the Matplotlib class <i>Axes</i> will store a plot and will always have an x axis label attribute. The class <i>Axes</i> might give origin to several different objects (plots), all with an x axis label property, but the content of this property is particular to each plot. We say we instantiate an object of a certain class when we create it.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Learn more about classes in this
        
        <a href="https://realpython.com/lessons/classes-python/" target="_blank"> video.</a>
        
    </div>
</div>

<p><br /></p>

<p>There are many ways you can use Matplotlib, but in order to be able to customize your plot, it is recommended to use the Matplotlib <code class="language-plaintext highlighter-rouge">subplots()</code> method. It creates two objects: one object of the class <em>Figure</em>, usually called <em>fig</em> and one object of the class <em>Axes</em>, usually called <em>ax</em>. The former is a sort of container where your plot will be created. The latter is the plot itself. Note that the <em>Axes</em> object is contained in the <em>Figure</em> object. Refer to the <a href="https://matplotlib.org/stable/tutorials/introductory/quick_start.html" target="_blank">Matplotlib documentation</a> for further details.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_01_01.png" alt="Matplotlib objects" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-loading-the-data-with-read_csv">2. Loading the data with read_csv</h2>

<p><br />
Download the <a href="http://localhost:4000/assets/data/gdp_prepared.csv">data file here</a>. To read the data, use the pandas method <code class="language-plaintext highlighter-rouge">pd.read_csv()</code>, which takes 3 parameters. The first is the file path. The second is <code class="language-plaintext highlighter-rouge">index_col</code> and it tells pandas which column should be the index of the data frame. Finally, <code class="language-plaintext highlighter-rouge">parse_dates</code> set to True converts the index into date format. In the code below, data is loaded and one dataframe is created for each country with the pandas method <code class="language-plaintext highlighter-rouge">loc</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">data_path</span> <span class="o">=</span> <span class="s">"/content/drive/MyDrive/historical_data/gdp_prepared.csv"</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span>   
                 <span class="n">index_col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>  
                 <span class="n">parse_dates</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>  

<span class="n">ger</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">"country"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"Germany"</span><span class="p">]</span>
<span class="n">usa</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">"country"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"United States of America"</span><span class="p">]</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-matplotlib-basic-plot">2. Matplotlib basic plot</h2>

<p><br />
Although in this lesson our fig object will have only one plot, it might have more. Most of the customization will be made through <em>ax</em> methods. To start we will call the ax method <code class="language-plaintext highlighter-rouge">plot()</code> twice to create our plots. Note that <code class="language-plaintext highlighter-rouge">plot()</code>’s first argument contains the dates and is plotted on the x axis while the second, containing the GDP, is plotted on the y axis. Finally, we show the plot.</p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_02.png" alt="First version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-restricting-time-span">3. Restricting time span</h2>

<p><br /></p>

<p>One important aspect to consider when you tell a story with a plot is what you would like to highlight. In this plot, we want to highlight the effect of the 1929 crisis on GDP per capita rather than the effect of the Second or First World War. Thus, let us restrict our time span to the period 1920/1938. Note that when your index is a date you can use pandas <code class="language-plaintext highlighter-rouge">loc</code> to specify a certain period of the data:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ger</span> <span class="o">=</span> <span class="n">ger</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"1920-01-01"</span><span class="p">:</span><span class="s">"1938-01-01"</span><span class="p">]</span>
<span class="n">usa</span> <span class="o">=</span> <span class="n">usa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"1920-01-01"</span><span class="p">:</span><span class="s">"1938-01-01"</span><span class="p">]</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_03.png" alt="Second version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-adding-a-matplotlib-legend">4. Adding a Matplotlib legend</h2>

<p><br /></p>

<p>To add a legend, first you have to label each of the line plots and then call the <code class="language-plaintext highlighter-rouge">legend()</code> method of <em>ax</em>. Quite intuitive, right?</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-4">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
<span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_04.png" alt="Third version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-adding-a-title-and-and-labels-to-matplotlib-axes">5. Adding a title and and labels to matplotlib axes</h2>

<p><br /></p>

<p>There are three methods of <em>ax</em> to set title and labels. They start with <em>set</em> followed by the title or label they set: <code class="language-plaintext highlighter-rouge">set_xlabel</code>, <code class="language-plaintext highlighter-rouge">set_ylabel</code>, <code class="language-plaintext highlighter-rouge">set_title</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_05.png" alt="Fourth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-changing-line-colors">6. Changing line colors</h2>

<p><br />
One way of creating your own color palette is with a Python list containing the colors you would like to use. <a href="https://colorbrewer2.org/" target="_blank">This page</a> has smart recommendations on the use of colors. In this case, a diverging color was chosen to distinguish between the two countries. Color is an argument of <code class="language-plaintext highlighter-rouge">plot()</code> and colors are selected by the list index.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_06.png" alt="Fifth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-highligthing-areas-and-elements-with-axvspan">7. Highligthing areas and elements with axvspan</h2>

<p><br /></p>

<p>In this step, we start by increasing the line width of both trends to 3. After that, we would like to highlight the period of crisis. For that we use the method <code class="language-plaintext highlighter-rouge">axvspan(xmin, xmax, ymin=0, ymax=1, ...)</code> in which we specify the start and end date of the desired period. The y axis is not specified because, by default, the highlighted area goes from zero to the maximum value of y. <code class="language-plaintext highlighter-rouge">alpha</code> adds a degree of transparency to the region highlighted.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span>
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvspan</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1929-01-01"</span><span class="p">),</span> 
           <span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1932-10-01"</span><span class="p">),</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> 
           <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_07.png" alt="Sixth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="8-eliminating-the-frame-of-matplotlib-legend">8. Eliminating the frame of matplotlib legend</h2>

<p><br /></p>

<p>Edward Tufte, an expert in the field of data visualization, introduced the concept of data-ink ratio in the book <em>The Visual Display of Quantitative Information</em>. Data-ink ratio is the proportion of ink in a plot used to display non-redundant data. The author recommends maximizing this ratio as much as possible to make your plot clearer and to avoid distracting your reader.</p>

<p><br /></p>

\[data \: ink \: ratio = {data \: ink  \over total \:ink}\]

<p><br /></p>

<p>In order to improve our data-ink ratio, we will eliminate the legend frame. This can be done by setting <code class="language-plaintext highlighter-rouge">framon</code> parameter to false inside the <code class="language-plaintext highlighter-rouge">legend()</code> method.</p>

<p><br /></p>

<p>The frame around the plot is made by objects of the class <em>Spine</em>. Print <code class="language-plaintext highlighter-rouge">ax.spines</code> and note that you have 4 spines (left, right, bottom, top). It would be nice to have this frame in a lighter color so that it does not call so much attention. This can be done by the <code class="language-plaintext highlighter-rouge">set_edgecolor()</code> method . To set all of them to the same color, we can iterate them in <code class="language-plaintext highlighter-rouge">ax.spines.values()</code> and set one by one to light gray:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span>
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">frameon</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvspan</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1929-01-01"</span><span class="p">),</span> 
           <span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1932-10-01"</span><span class="p">),</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> 
           <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>

<span class="k">for</span> <span class="n">spine</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
    <span class="n">spine</span><span class="p">.</span><span class="n">set_edgecolor</span><span class="p">(</span><span class="n">my_palette</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_09.png" alt="Seventh version of the plot" /></p>

<p><br /></p>

<p>In the next lessons you will learn how to further improve graphs like this. Thanks for reading! 😊</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>To customize your plot, use Matplotlib method <code class="language-plaintext highlighter-rouge">subplots()</code>;</li>
  <li><code class="language-plaintext highlighter-rouge">Subplots()</code> creates two objects: one of the class <em>Figure</em>, usually called fig and one of the class <em>Axes</em>, usually called ax;</li>
  <li>Use <em>Axes</em> methods to shape your plot according to your needs.</li>
</ul>
<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="visualization" /><category term="matplotlib" /><summary type="html"><![CDATA[Use Matplotlib to code beautiful visualizations]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_01.png" /><media:content medium="image" url="http://localhost:4000/lesson_01.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">R programming for climate data analysis and visualization</title><link href="http://localhost:4000/2023/02/07/Linear-Models-in-R.html" rel="alternate" type="text/html" title="R programming for climate data analysis and visualization" /><published>2023-02-07T00:00:00-03:00</published><updated>2023-03-05T00:00:00-03:00</updated><id>http://localhost:4000/2023/02/07/Linear-Models-in-R</id><content type="html" xml:base="http://localhost:4000/2023/02/07/Linear-Models-in-R.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><strong>‘Intuition is a very powerful thing, more powerful than intellect’</strong></p>

<p>Steve Jobs</p>

<p><br /></p>

<p>Linear regression is one of the most popular tools in social data science. It has been used over the last decades to study how variables relate to each other. In this lesson, you will learn the intuition behind linear regression and how to use it in R.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data Source</h1>

<p>Data for this lesson comes from two different sources: data of historical temperature in the city of Oxford comes from the <a href="https://www.ncei.noaa.gov/data/global-summary-of-the-year/access/UK000056225.csv" target="_blank">National Centers for Environmental Information</a> and historical data regarding total carbon emissions comes from the US <a href="https://cdiac.ess-dive.lbl.gov/ftp/ndp030/CSV-FILES/global.1751_2014.csv" target="_blank">Carbon Dioxide Information Analysis Center</a>. Temperatures are given in degree Celsius and carbon emissions in million metric tons of C.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-linear-regression-in-r">Coding the Past: Linear Regression in R</h1>

<h2 id="1-preparing-the-data-and-performing-an-inner_join-in-r">1. Preparing the data and performing an inner_join in R</h2>

<p>First, we will use the data prepared for the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘How to show historical weather data with ggplot2 customized plots’</a>. Please, download it <a href="http://localhost:4000/assets/data/temperatures.RData">here</a></p>

<p><br /></p>

<p>Second, the carbon emissions data will be loaded. We will only load the year and the value regarding the total carbon emissions from fossil fuel consumption and cement production (in million metric tons of C).</p>

<p><br /></p>

<p>Data will be loaded with <code class="language-plaintext highlighter-rouge">read.csv</code>. The selection of rows and columns is made by index using the following syntax: <em>df[rows to include, columns to include]</em>. In the code bellow we chose to keep all rows except for the first, because it contains the source of the data. Additionally, only columns 1 and 2 are kept. Column names are changed to be the same as in the temperatures dataframe. Since both variables were loaded as factors, we convert them first to characters and then to integers. Note that converting a factor directly to integer would distort the values.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">temperatures</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">load</span><span class="p">(</span><span class="s2">"temperatures.RData"</span><span class="p">)</span><span class="w">

</span><span class="n">carbon</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"carbon.csv"</span><span class="p">)[</span><span class="m">2</span><span class="o">:</span><span class="m">265</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="nf">names</span><span class="p">(</span><span class="n">carbon</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"DATE"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TOT_EMISSIONS"</span><span class="p">)</span><span class="w">

</span><span class="n">carbon</span><span class="o">$</span><span class="n">DATE</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">carbon</span><span class="o">$</span><span class="n">DATE</span><span class="p">))</span><span class="w">

</span><span class="n">carbon</span><span class="o">$</span><span class="n">TOT_EMISSIONS</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">carbon</span><span class="o">$</span><span class="n">TOT_EMISSIONS</span><span class="w"> </span><span class="p">))</span></code></pre></figure>

</div>

<p><br /></p>

<p>The last step of data preparation is to join the two dataframes. Since they cover different periods, R dplyr <code class="language-plaintext highlighter-rouge">inner_join()</code> will be used to keep only observations contained in both dataframes. See how <code class="language-plaintext highlighter-rouge">inner_join()</code> works in the figure below:</p>

<p><br /></p>

<p><img src="/assets/images/lesson_04_01.png" alt="dplyr inner_join" /></p>

<p><br /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">inner_join</span><span class="p">(</span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">carbon</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"DATE"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>If you prefer to skip this step, download the prepared data <a href="http://localhost:4000/assets/data/gw.RData">here</a> (<em>.RData</em> format)</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-correlation-between-carbon-emissions-and-temperatures-with-r-cortest">2. Correlation between carbon emissions and temperatures with R <em>cortest</em></h2>

<p><a href="https://www.bbc.co.uk/bitesize/guides/zc7sb82/revision/5" target="_blank">Correlation</a> measures how much two variables change together. In our case, we would like to know if increases in carbon emissions are associated with increases in temperature. One method to assess linear correlation is the Pearson correlation. It ranges from 1 to -1, where 1 means perfect positive correlation, 0 means no correlation at all and -1 means perfect negative correlation.</p>

<p><br /></p>

<p>In R, we can use the function <code class="language-plaintext highlighter-rouge">cor.test()</code> to estimate correlation with the argument <code class="language-plaintext highlighter-rouge">method</code> set to “pearson”. This function returns the correlation and a p-value. The p-value tells us if we can reject the hypothesis that the correlation between carbon emissions and temperature is zero.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">cor.test</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">TOT_EMISSIONS</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pearson"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>If you run the code above, you will see that there is a moderate linear correlation of <strong>0.57</strong> between temperature and carbon emissions in our sample. This means that when emissions increase, so does temperature. Moreover, this value is statistically different from zero, since the p-value is a lot lower than 0.05 (with a 95% confidence interval). So, there is a correlation between the two variables!</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> The <b>p-value</b>, in the context of this example, is the probability that we would find a correlation estimate of at least 0.57 under the hypothesis that there is no correlation between temperatures and carbon emissions (null hypothesis). If this probability is very low, then the null hypothesis is not likely to be true, because it is not compatible with data we observed in reality. In this case we reject the null and accept the hypothesis that the correlation is not zero. Confusing? Try reading a little more about it 
        
        <a href="https://online.stat.psu.edu/statprogram/reviews/statistical-concepts/hypothesis-testing/p-value-approach" target="_blank"> here.</a>
        
    </div>
</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-plotting-correlation-in-r">3. Plotting correlation in r</h2>

<p>One way to check correlation is with a scatterplot. Because carbon emissions were relatively low before 1900, we will use data from this year on (see how <a href="https://dplyr.tidyverse.org/reference/filter.html">dplyr filter()</a> works). Notice that dots are not randomly distributed in the plot. In general, the larger the emissions, the larger the temperatures. To customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘How to show historical weather data with ggplot2 customized plots’</a></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
        </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Eliminates grids:</span><span class="w">
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
  </span><span class="p">)}</span><span class="w">
  
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">DATE</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1900</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">TOT_EMISSIONS</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Emissions [million metric tons of C]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_04_02.png" alt="scatterplot of temperatures versus carbon emissions" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-implementing-linear-models-with-r">4. Implementing linear models with R</h2>

<p>Linear Regression studies the relationship between a dependent and an explanatory variable. It predicts the mean value of the dependent variable given certain values of the explanatory variable. In our case, we would like to describe how temperatures vary according to total carbon emissions, that is, the dependent variable is temperatures and the explanatory (independent) variable is carbon emissions. Clearly more variables other than carbon emission are capable of explaining temperature variation, but for this example we will use a simplified model with only one explanatory variable.</p>

<p><br /></p>

<p>One quick question before we proceed: What is the simplest “model” for describing the temperature in Oxford throughout the last centuries if we did not have any other variable than the temperature itself?</p>

<p><br /></p>

<p>It could be the average of the temperature over the period, right? At any point in time, this simple “model” would predict a 9.9 ºC temperature:</p>

<p><br /></p>

<p><img src="/assets/images/lesson_04_03.png" alt="scatterplot of temperatures versus carbon emissions with temperatures average line" /></p>

<p><br /></p>

<p>Now imagine that we have access to a second variable, the total carbon emissions, and we know it has a correlation with temperatures. Wouldn’t this variable add information to better predict temperature? Yes!</p>

<p><br /></p>

<p>Linear regression is a method to relate these two variables through a straight line (a linear function) that might fit the data a lot better than the mean (if they are sufficiently associated). In the figure above, imagine that you could rotate this line to better fit the data: this is what the regression line does! (see plot in step 5)</p>

<p><br /></p>

<p>A regression line is described by the equation <strong>Y = a + bX</strong>  where a and b are found by an <a href="https://en.wikipedia.org/wiki/Least_squares">algorithm</a> so that the line best fits the data.</p>

<p><br /></p>

<p>Thankfully, you do not need to worry how to compute a and b. R does it for you with the <code class="language-plaintext highlighter-rouge">lm()</code> function, where you specify your dataframe, and the formula of the relationship you want to study. A formula has the following syntax: <em>independent variable ~ dependent variable</em>. To model temperature as a function of carbon emissions, use the following code:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">linear_model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">TAVG</span><span class="o">~</span><span class="n">TOT_EMISSIONS</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">linear_model</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<table class="dataframe">
 <thead>
  <tr>
   <th> Term </th>
   <th> estimate </th>
   <th> std.error </th>
   <th> statistic </th>
   <th> p.value </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td> Intercept </td>
   <td> 9.5627927 </td>
   <td> 0.0546872 </td>
   <td> 174.863537 </td>
   <td> 0 </td>
  </tr>
  <tr>
   <td> Emissions </td>
   <td> 0.0001628 </td>
   <td> 0.0000166 </td>
   <td> 9.835066 </td>
   <td> 0 </td>
  </tr>
</tbody>
</table>

<p><br /></p>

<p>In this table you see the coefficients a (intercept) and b (coefficient of TOT_EMISSIONS) calculated by R. They form the regression line TAVG = 9.57 + 0.00016*TOT_EMISSIONS. The interpretation of them is as follows:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>a or the intercept is the value of y when x is zero. In our case a is the value of the temperature when the emissions are zero. You have to evaluate if x = 0 makes sense for your analysis.</li>
  <li>b is how much, on average, y increases when x increases by 1 unit. In our example, when total emissions increase by 1 million metric tons of carbon, then the temperature increases by 0.00016 ºC. It does not seem a lot at a first glance, but if you consider that from 1950 to 2022 emissions increased by 8,225 million metric tons of carbon, this would translate, in our model, to an increase of 1.3ºC!</li>
</ul>

<p><br /></p>

<p>Note that p-values are zero (very close to zero), providing evidence that a and b are statistically significant.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-plotting-the-regression-line-with-geom_smooth">5. Plotting the regression line with geom_smooth</h2>

<p>To draw the regression line, use geom_smooth() with the argument <code class="language-plaintext highlighter-rouge">method</code> set to ‘lm’ (linear model). The argument <code class="language-plaintext highlighter-rouge">se</code> specifies if you would like to plot the error associated with the regression estimate across the line.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-4-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-4-6">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">DATE</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1900</span><span class="p">),</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">TOT_EMISSIONS</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lm"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">se</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Emissions [million metric tons of C]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_04_04.png" alt="regression line plot" /></p>

<p><br /></p>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> In the example studied we know that carbon emissions are <b>causing</b> global warming, because scientists have extensively studied this topic with multiple models and approaches. However, only correlation or linear relation identified with a regression model does not imply causation! Read more
        
        <a href="https://sitn.hms.harvard.edu/flash/2021/when-correlation-does-not-imply-causation-why-your-gut-microbes-may-not-yet-be-a-silver-bullet-to-all-your-problems/" target="_blank"> about this topic.</a>
        
    </div>
</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>An inner join can be used to join two dataframes when you only want to keep observations contained in both dataframes;</li>
  <li>Correlation measures how much two variables change together, it can be calculated in R with cor.test();</li>
  <li>A linear regression model relates one dependent variable to an independent or explanatory variable. It provides you with an estimate of how much the dependent variable vary when the independent variable changes by one unit. Regression can be computed in R with lm();</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="regression" /><category term="analysis" /><summary type="html"><![CDATA[lesson about Linear Regression in R]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_04.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_04.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Climate Data Visualization</title><link href="http://localhost:4000/2023/01/24/Historical-Weather-Data.html" rel="alternate" type="text/html" title="Climate Data Visualization" /><published>2023-01-24T00:00:00-03:00</published><updated>2023-03-05T00:00:00-03:00</updated><id>http://localhost:4000/2023/01/24/Historical-Weather-Data</id><content type="html" xml:base="http://localhost:4000/2023/01/24/Historical-Weather-Data.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><strong>‘Global warming isn’t a prediction. It is happening.’</strong></p>

<p>James Hansen</p>

<p><br /></p>

<p>There is indisputable evidence that our planet is warming at an abnormal rate. The effects of global warming already started to affect the Earth. Melting glaciers, sea level rise, and intense heat waves already affect several countries. In this lesson, you will use historical weather data to plot graphs that help to raise awareness about climate change.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data Source</h1>
<p>Data for this lesson comes from the <a href="https://www.ncei.noaa.gov/data/global-summary-of-the-year/access/UK000056225.csv" target="_blank">National Centers for Environmental Information</a>. This institution provides historical weather data by city and country over the last centuries.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-graphical-data-analysis-with-r">Coding the past: graphical data analysis with r</h1>

<h2 id="1-loading-historical-weather-data-with-fread">1. Loading historical weather data with <em>fread</em></h2>

<p>First, we will load the <a href="http://localhost:4000/assets/data/oxford_temp.csv">temperature database</a> with the R function <code class="language-plaintext highlighter-rouge">fread()</code>. Note that there are many variables available (<a href="https://www.ncei.noaa.gov/pub/data/metadata/documents/GSOYReadme.txt" target="_blank">read more about them</a>). However, we are only interested in <em>DATE</em> and <em>TAVG</em> (average annual temperature in Oxford). The <code class="language-plaintext highlighter-rouge">select</code> parameter is used to select which variables to load.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">data.table</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">imputeTS</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="n">temperatures</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fread</span><span class="p">(</span><span class="s2">"oxford_temp.csv"</span><span class="p">,</span><span class="w">
                      </span><span class="n">select</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"DATE"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TAVG"</span><span class="p">))</span></code></pre></figure>

</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-imputing-missing-values-in-r">2. Imputing missing values in R</h2>

<p><em>TAVG</em> has missing values and was loaded as character. Let us convert it to numeric and impute missing values with linear interpolation using ` na_interpolation`, available in the <em>imputeTS</em> library.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">imputeTS</span><span class="p">)</span><span class="w">

</span><span class="n">temperatures</span><span class="o">$</span><span class="n">TAVG</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">na_interpolation</span><span class="p">(</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">temperatures</span><span class="o">$</span><span class="n">TAVG</span><span class="p">),</span><span class="w"> </span><span class="n">option</span><span class="w"> </span><span class="o">=</span><span class="s2">"linear"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>If you prefer to skip steps 1 and 2, <a href="http://localhost:4000/assets/data/temperatures.RData">download here</a> the prepared dataset in <em>.RData</em> format. It will be used for the next steps.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-what-is-ggplot2-and-the-grammar-of-graphics">3. What is ggplot2 and the grammar of graphics?</h2>

<p><a href="https://ggplot2.tidyverse.org/" target="_blank">Ggplot2</a> is an R library to create statistical graphics. It is based in the <a href="https://vita.had.co.nz/papers/layered-grammar.html" target="_blank">grammar of graphics</a>, a tool to understand graphics as a set of components which together give you flexibility to create original visualizations.</p>

<p><br /></p>

<p>In the figure bellow, you see the 3 main elements of ggplot2. First, you need a dataset with variables. Each of these variables can be mapped to one particular aesthetic - a visual property of a geom object. Geom objects are the elements you see in your graph (line and dots, for instance). Their characteristics (position on y axis, position on x axis, color, size, etc.) are defined by aesthetics mapping. One graph can contain several layers, each one with a geom object.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_03_01.png" alt="ggplot geom objects and layers" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-ggplot2-dotplot">4. ggplot2 dotplot</h2>

<p>In this section, we will use ggplot2 to depict the historical temperatures in the city of Oxford from 1815 to 2022. We will use points do identify the temperature over the years. Although we usually use line plots to represent time series, some researchers claim that the lines do not represent observed data. Actually lines only connect the dots. Therefore, in this lesson, you will learn to plot time series both with dots and with lines.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> The author of "Fundamentals of Data Visualization", Claus O. Wilke, clarifies the use of dots and lines to plot time series. To read more about it, see
        
        <a href="https://clauswilke.com/dataviz/time-series.html" target="_blank"> the book here.</a>
        
    </div>
</div>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">ggplot()</code> function will contain two arguments. The first is the data and the second is <em>aes()</em> (aesthetics), which maps the position on the x axis to the variable <em>DATE</em>, the position on the y axis to <em>TAVG</em> and color to <em>TAVG</em>, meaning the color of the geom objects will depend on average annual temperature. After the mapping, we add the first layer of our plot with <code class="language-plaintext highlighter-rouge">geom_point()</code>. The points represent the observations in the dataset with x and y position as well as color defined by the mapping we set. Two additional layers set x and y axis names.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">DATE</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Year"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<p><img src="/assets/images/lesson_03_02.png" alt="ggplot dot plot with default theme" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-setting-colors-with-scale_color_gradient">5. Setting colors with scale_color_gradient</h2>

<p>One improvement could be representing lower temperatures with blue colors and higher temperatures with red. Moreover this default behavior is not intuitive, since darker colors are usually associated with larger quantities and not otherwise. Note that <em>TAVG</em> is a numeric variable and when we map it to color, ggplot uses a gradient to color the geom object. Adding the <code class="language-plaintext highlighter-rouge">scale_color_gradient()</code> layer allows us to define the color associated with low and high values. Moreover, it allows us to choose the name of the scale:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">DATE</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Year"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_03_03.png" alt="ggplot dot plot with customized colors" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-create-your-own-ggplot2-theme">6. Create your own ggplot2 theme</h2>

<p>The plot above got a little better, but how to customize it further? There are several R packages providing ggplot2 themes, but if we would like a theme that matches the theme of this page, for example, what could we do? An option is to create our own theme with the <code class="language-plaintext highlighter-rouge">theme()</code> layer. <code class="language-plaintext highlighter-rouge">theme()</code> offers several arguments to create your style. In the figure bellow you can see the arguments necessary to change the background and text color of the elements in our plot. Moreover, there are arguments to eliminate grids.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_03_04.png" alt="ggplot theme arguments" /></p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To know more <i>theme()</i> arguments available, check
        
        <a href="https://ggplot2.tidyverse.org/reference/theme.html" target="_blank"> the ggplot2 reference page.</a>
        
    </div>
</div>

<p><br /></p>

<p>A theme can be created by a customized function which executes the ggplot <code class="language-plaintext highlighter-rouge">theme()</code>. In the code bellow you can see that the theme is built starting from the black and white ggplot2 theme.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
        </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Eliminates grids:</span><span class="w">
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>


</div>

<p><br /></p>

<p>Let us now try our theme:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-6">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">DATE</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Year"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_03_05.png" alt="ggplot customized theme " /></p>

<p><br /></p>

<p>The plot fits the page and highlight the data a lot better now. You could still increase the size of your point geom objects to highlight them. When you do not want to map a certain aesthetic to a variable, you can declare it outside of the <code class="language-plaintext highlighter-rouge">aes()</code> argument. Bellow, two changes are made in the point geom objects. First, <code class="language-plaintext highlighter-rouge">alpha</code> adds transparency. Second, <code class="language-plaintext highlighter-rouge">size</code> increases the size of all the points (without mapping).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-7">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">DATE</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Year"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_03_06.png" alt="ggplot customized theme with changes in size and alpha " /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-adding-a-second-layer-containing-ggplot-line">7. Adding a second layer containing ggplot line</h2>

<p>Now we will make use of the flexibility of the grammar of graphics to add an additional layer to our plot. This time we will add a geom line object:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-3-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-3-8">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temperatures</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="w"> </span><span class="n">DATE</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TAVG</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ºC"</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#1AA3FF"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Year"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Annual Mean Temperature in Oxford [ºC]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_03_07.png" alt="ggplot customized theme with and a second geom layer " /></p>

<p><br /></p>

<p>It is clear that average temperatures are increasing year by year!</p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>Ggplot2 creates effective statistical graphics making use of layers to produce flexible and original visualizations;</li>
  <li>Follow two basic steps to plot in ggplot2:
    <ul>
      <li>map your variables to the desired aesthetics (visual aspect of a geom object);</li>
      <li>create the layers containing the geom objects;</li>
    </ul>
  </li>
  <li>Use <code class="language-plaintext highlighter-rouge">theme()</code> to create your own customized theme;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="visualization" /><category term="ggplot2" /><summary type="html"><![CDATA[Code effective visualizations using ggplot2 dotplot.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_03.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_03.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Where To Find And How To Load Historical Data</title><link href="http://localhost:4000/2023/01/10/Where-to-find-and-how-to-load-historical-data.html" rel="alternate" type="text/html" title="Where To Find And How To Load Historical Data" /><published>2023-01-10T00:00:00-03:00</published><updated>2023-03-05T00:00:00-03:00</updated><id>http://localhost:4000/2023/01/10/Where-to-find-and-how-to-load-historical-data</id><content type="html" xml:base="http://localhost:4000/2023/01/10/Where-to-find-and-how-to-load-historical-data.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><strong>‘Information is not knowledge’</strong>
<br />
Albert Einstein</p>

<p><br /></p>

<p>With so much data available nowadays, I frequently feel overwhelmed when I have to find data to study a subject. Is this dataset reliable? How was the data treated? Where can I find the codebook with detailed information on the variables? These are only some of my concerns. When it comes to historical data, the task can be even harder. In this lesson, you will learn about 5 fascinating and reliable websites to find historical data and how to load datasets in Python and R.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-sources">Data Sources</h1>

<p><br /></p>

<h2 id="1-harvard-business-school">1. <a href="https://www.hbs.edu/businesshistory/courses/teaching-resources/historical-data-visualization/data-and-sources" target="_blank">Harvard Business School</a></h2>

<p>The Harvard Business School developed the project ‘Historical Data Visualization’ to foster the understanding of global capitalism throughout time. The page offers more than 40 datasets about a broad range of topics. For instance, you can find data on life expectancy, literacy rates or economic activity in several countries during the 19th and 20th century. Datasets are mostly in Excel format. Definitely worth a visit!</p>

<p><br /></p>

<h2 id="2-human-mortality-database">2. <a href="https://www.mortality.org/Home/Index" target="_blank">Human Mortality Database</a></h2>

<p>Human Mortality Database (HMD) provides death rates and life expectancy for several countries over the last two centuries. Even though the platform requires a quick registration to give you access to the data, it is very complete and straightforward to understand. Datasets are in tab-delimited text (ASCII) files.</p>

<p><br /></p>

<h2 id="3-national-centers-for-environmental-information">3. <a href="https://www.ncei.noaa.gov/" target="_blank">National Centers for Environmental Information</a></h2>

<p>Would you like to study how climate has changed over the last centuries? Then this is an invaluable source for you! The National Centers for Environmental Information is the leading authority for environmental data in the USA and provides high quality data about climate, ecosystems and water resources. Data files can be downloaded in comma separated values format.</p>

<p><br /></p>

<h2 id="4-clarin-historical-corpora">4. <a href="https://www.clarin.eu/resource-families/historical-corpora" target="_blank">Clarin Historical Corpora</a></h2>

<p>If you wish to work with text data, this is a valuable source of material. It offers access to ancient and medieval greek texts, the manifests wrote during the American Revolution, court proceedings in England in the 18th century and many other instigating materials. Files are usually provided in .txt format. The requirements to access files varies according to each case, since data comes from different institutions.</p>

<p><br /></p>

<h2 id="5-slave-voyages">5. <a href="https://www.slavevoyages.org/" target="_blank">Slave Voyages</a></h2>

<p>This impressive platform, supported by the Hutchins Center of Harvard University, gathers data regarding the forced relocations of more than 12 million African people between the 16th and 19th century. Files are provided in SPSS or comma separated values format.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-how-to-load-data-in-python">Coding the past: how to load data in Python</h1>

<h2 id="1-pandas-read_csv">1. Pandas <em>read_csv()</em></h2>
<p>In this section, you will learn to load data into Python. You will be using <a href="https://www.slavevoyages.org/voyage/downloads#the-trans-atlantic-slave-trade-database/1/en/" target="_blank">data</a> provided by the <a href="https://www.slavevoyages.org/" target="_blank">Slave Voyages</a> website. The dataset contains data regarding 36,108 transatlantic slave trade voyages. <a href="https://www.slavevoyages.org/voyage/about#variable-list/2/en/" target="_blank">Learn more about the variables here</a>.</p>

<p><br /></p>

<p>To load our data in Python, we will use <a href="https://pandas.pydata.org/docs/index.html" target="_blank">Pandas</a>, a Python library that provides data structures and analysis tools. The Pandas method <code class="language-plaintext highlighter-rouge">read_csv()</code> is the ideal option to load comma separated values into a dataframe. A dataframe is one of the data structures provided by Pandas and it consists of a table with columns (variables) and rows (observations). Bellow, we use the default configuration of <code class="language-plaintext highlighter-rouge">read_csv()</code> to load our data. Note that the only parameter passed to the method is the file path where you saved the dataset.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-2-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-2-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"/content/drive/MyDrive/historical_data/tastdb-exp-2019.csv"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-getting-pandas-dataframe-info">2. Getting pandas dataframe info</h2>

<p>A dataframe object is now created. It has several attributes or characteristics. For example, we can check its dimensions with <code class="language-plaintext highlighter-rouge">shape</code> and its column names with <code class="language-plaintext highlighter-rouge">columns</code>. Note that column names are the names of our variables. Moreover, you can also call methods, which, in general, carry out an operation to analyze the data contained in the dataframe. For example, the method <code class="language-plaintext highlighter-rouge">describe()</code> calculates summary statistics of each variable and <code class="language-plaintext highlighter-rouge">head()</code> filters and displays only the first n observations of your data. Check all <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame" target="_blank">Pandas <em>DataFrame</em> attributes and methods here</a>.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_02_01.png" alt="Pandas DataFrame Object " /></p>

<p><br /></p>

<p>Use the following code to check the dimensions and variable names of the dataset:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-2-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-2-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="s">"Dimensions: "</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> 
      <span class="s">"Variable names: "</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The attributes show that there are 276 variables and 36,108 observations in this dataset. Let us suppose you are only interested in the number of slaves disembarked (<em>slamimp</em>) in America per year (<em>yearam</em>). You could load only these two variables using the <code class="language-plaintext highlighter-rouge">read_csv()</code> parameter <code class="language-plaintext highlighter-rouge">usecols</code>. This parameter receives a list with variable names you wish to load. In larger datasets this parameter is very handy because you do not want to load variables not relevant to your study.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-2-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-2-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"/content/drive/MyDrive/historical_data/tastdb-exp-2019.csv"</span><span class="p">,</span>
                 <span class="n">usecols</span><span class="o">=</span><span class="p">[</span><span class="s">'YEARAM'</span><span class="p">,</span> <span class="s">'SLAMIMP'</span><span class="p">])</span>

<span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<table class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>SLAMIMP</th>
      <th>YEARAM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>290.0</td>
      <td>1817</td>
    </tr>
    <tr>
      <th>1</th>
      <td>223.0</td>
      <td>1817</td>
    </tr>
    <tr>
      <th>2</th>
      <td>350.0</td>
      <td>1817</td>
    </tr>
    <tr>
      <th>3</th>
      <td>342.0</td>
      <td>1817</td>
    </tr>
    <tr>
      <th>4</th>
      <td>516.0</td>
      <td>1817</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>Now the dataframe is loaded only with the two specified variables. As said, Pandas dataframes offer tools to analyze the data, using <em>DataFrame</em> methods. Above, we use the method <code class="language-plaintext highlighter-rouge">head()</code> to display the five first observation in our dataframe. You can set how many observations <code class="language-plaintext highlighter-rouge">head()</code> should return through the <code class="language-plaintext highlighter-rouge">n</code> parameter (default is 5).</p>

<p><br /></p>

<p>Moreover, we can use <code class="language-plaintext highlighter-rouge">describe()</code> to obtain summary statistics of our variables. From the summary statistics we can see that the earliest record is from the year 1514 and the latest one of 1886. Also, the maximum number of slaves traded in one voyage was 1,700.</p>

<p><br /></p>

<table class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th>SLAMIMP</th>
      <th>YEARAM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>34182.00</td>
      <td>36108.00</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>269.24</td>
      <td>1764.33</td>
    </tr>
    <tr>
      <th>std</th>
      <td>137.32</td>
      <td>59.47</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.00</td>
      <td>1514.00</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>177.00</td>
      <td>1732.00</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>261.00</td>
      <td>1773.00</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>350.00</td>
      <td>1806.00</td>
    </tr>
    <tr>
      <th>max</th>
      <td>1700.00</td>
      <td>1866.00</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-how-to-import-a-dataset-in-r">Coding the past: how to import a dataset in R</h1>

<p>In R there are several functions that load comma separated files. I chose <code class="language-plaintext highlighter-rouge">fread</code> from the <code class="language-plaintext highlighter-rouge">data.table</code> library, because it offers a straightforward parameter to select the variables you wish to load (<code class="language-plaintext highlighter-rouge">select</code>). <code class="language-plaintext highlighter-rouge">fread</code> creates a data frame, similar to a pandas dataframe.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-2-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-2-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">data.table</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fread</span><span class="p">(</span><span class="s2">"tastdb-exp-2019.csv"</span><span class="p">,</span><span class="w"> 
            </span><span class="n">select</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"YEARAM"</span><span class="p">,</span><span class="s2">"SLAMIMP"</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<p>To get summary statistics about your variables you can use the function <code class="language-plaintext highlighter-rouge">summary(df)</code>. To view the n first observations of your dataframe, use <code class="language-plaintext highlighter-rouge">head(df,n)</code> as shown bellow. <code class="language-plaintext highlighter-rouge">Summary</code> and <code class="language-plaintext highlighter-rouge">head</code> produce very similar results to <code class="language-plaintext highlighter-rouge">describe</code> and <code class="language-plaintext highlighter-rouge">head</code> in Python.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-2-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-2-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">summary</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">head</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="m">10</span><span class="p">)</span></code></pre></figure>


</div>

<p><br />
More posts on how to find reliable data will be published soon!
<br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>These websites offer high quality historical data:
    <ul>
      <li><a href="https://www.hbs.edu/businesshistory/courses/teaching-resources/historical-data-visualization/data-and-sources" target="_blank">Harvard Business School</a></li>
      <li><a href="https://www.mortality.org/Home/Index" target="_blank">Human Mortality Database</a></li>
      <li><a href="https://www.ncei.noaa.gov/" target="_blank">National Centers for Environmental Information</a></li>
      <li><a href="https://www.clarin.eu/resource-families/historical-corpora" target="_blank">Clarin Historical Corpora</a></li>
      <li><a href="https://www.slavevoyages.org/" target="_blank">Slave Voyages</a></li>
    </ul>
  </li>
  <li>You can load comma separated values in Python with the pandas method <code class="language-plaintext highlighter-rouge">.read_csv()</code>;</li>
  <li>You can load comma separated values in R with the function <code class="language-plaintext highlighter-rouge">fread()</code> from the library <code class="language-plaintext highlighter-rouge">data.table</code>;</li>
</ul>
<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="python" /><category term="data" /><category term="read_csv" /><summary type="html"><![CDATA[Use R and Python to load csv historical data.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_02.png" /><media:content medium="image" url="http://localhost:4000/lesson_02.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>