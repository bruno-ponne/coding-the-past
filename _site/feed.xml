<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-03T16:54:44-03:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Use R to explore the link between literacy and suicide in 1830s France</title><link href="http://localhost:4000/2023/08/16/Study-of-Relationships.html" rel="alternate" type="text/html" title="Use R to explore the link between literacy and suicide in 1830s France" /><published>2023-08-16T00:00:00-03:00</published><updated>2023-08-16T00:00:00-03:00</updated><id>http://localhost:4000/2023/08/16/Study-of-Relationships</id><content type="html" xml:base="http://localhost:4000/2023/08/16/Study-of-Relationships.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘Happiness in intelligent people is the rarest thing I know’</strong></p>

<p>A character in Ernest Hemingway’s novel “The Garden of Eden”</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists!</p>

<p><br /></p>

<p>In this lesson, we will learn how to evaluate the relationship between two variables with R. Check out the video below for a short introduction.</p>

<p><br /></p>

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/Fee7FMwAv_Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></center>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The Guerry dataset is provided by the R package <a href="https://cran.r-project.org/web/packages/HistData/index.html">HistData</a>. To know more about this package, please refer to our lesson <a href="/2023/07/12/HistData.html">‘Uncovering History with R - A Look at the HistData Package’</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-the-relationship-between-literacy-and-suicides-in-1830s-france">Coding the past: the relationship between literacy and suicides in 1830s France</h1>

<p><br /></p>

<h2 id="1-exploring-andre-michel-guerrys-pioneering-data-moral-statistics-of-1830s-france">1. Exploring Andre-Michel Guerry’s Pioneering Data: Moral Statistics of 1830s France</h2>

<p>Andre-Michel Guerry was a French lawyer who was passionate about statistics. He is considered to be the founder of moral statistics and had a major influence on the development of modern social science. His work “Essay on the Moral Statistics of France” includes data on several social variables of 86 French departments in the 1830s.</p>

<p><br /></p>

<p>To access this data, we need to load the HistData package. After doing so, we can use the command <code class="language-plaintext highlighter-rouge">help(Guerry)</code> to see the description of the dataset and the details about each of the 23 variables. Variables include information such as population, crime, literacy, suicide, wealth, and location of the 86 French departments.</p>

<p><br /></p>

<p>You can use <code class="language-plaintext highlighter-rouge">df &lt;- Guerry</code> to load the data. Feel free to explore the dataset and check the <strong>str</strong>ucture of the dataframe with <code class="language-plaintext highlighter-rouge">str(df)</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">HistData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">help</span><span class="p">(</span><span class="n">Guerry</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Guerry</span><span class="w">

</span><span class="n">str</span><span class="p">(</span><span class="n">df</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-add-a-new-column-to-a-dataframe-in-r">2. Add a new column to a dataframe in R</h2>

<p>In the documentation of the dataset, the author states “Note that most of the variables (e.g., Crime_pers) are scaled so that ‘more is better’ morally.”. Thus, suicide, for example, is expressed as the population divided by the number of suicides. In this way, the fewer the suicides, the larger the value in the <code class="language-plaintext highlighter-rouge">Suicides</code> column.</p>

<p><br /></p>

<p>To make our analysis easier to interpret, we can calculate the inverse of <code class="language-plaintext highlighter-rouge">Suicides</code>, that is, instead of having <strong>population/suicides</strong>, we will consider <strong>suicides/population</strong> (suicides per inhabitants). Moreover, to avoid very small numbers, let us multiply this by 100,000 so that we have suicides per 100,000 population. The code below creates this new variable.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="n">df</span><span class="o">$</span><span class="n">Suicides</span><span class="p">)</span><span class="o">*</span><span class="m">100000</span></code></pre></figure>

</div>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content">  Note that "Pop1831" tells us the population of French departments in the thousands in 1831. "summary(df$Pop1831)" tells us that the least populated department had a population of 129,000 inhabitants and the most populated had around 990,000 inhabitants.
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-use-geom_point-to-create-a-scatter-plot">3. Use geom_point to create a scatter plot</h2>

<p>Now, we’ll examine the relationship between <code class="language-plaintext highlighter-rouge">Suicides_Pop</code> and <code class="language-plaintext highlighter-rouge">Literacy</code> using a scatter plot. As per the documentation, <code class="language-plaintext highlighter-rouge">Literacy</code> represents the “percentage of military conscripts who can read and write” in a department. Keep in mind that the relationships studied in this lesson apply only to this subgroup which is not representative of the whole population. The code below leverages <code class="language-plaintext highlighter-rouge">geom_point</code> to visualize this relationship.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Relationship between Suicides and Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage of literate conscripts"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Suicides (per 100,000 population)"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p>Please note, the code above incorporates the function <code class="language-plaintext highlighter-rouge">theme_coding_the_past</code> to style the plot. You can access this theme in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate Data Visualization’</a></p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_01.png" alt="Percentage of literate conscripts vs Suicides per inhabitants" /></p>

<p><br /></p>

<p>The plot suggests that as literacy percentages rise, suicide rates tend to increase. In the distribution of literacy rates below, we also see that the majority of the French departments recorded literacy rates lower than 50% (indicated by the dashed line). If you count the departments to the right of the dashed line, you will find 24 departments, which represents only 24/86 = 28% of the total departments. Notably, the highest suicide rates are in this subgroup.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-13-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w">  </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">,</span><span class="w"> </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Distribution of literacy percentages"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_02.png" alt="Distribution of literacy percentages" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-corttest-in-r">4. cort.test in R</h2>

<p>Having observed a graphical association between <code class="language-plaintext highlighter-rouge">Literacy</code> and <code class="language-plaintext highlighter-rouge">Suicides</code>, let’s use <code class="language-plaintext highlighter-rouge">cor.test</code> to find this association analytically. This function takes two arguments <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> and returns a Pearson correlation coefficient (by default) and its statistical significance. As explained in the lesson <a href="/2023/02/07/Linear-Models-in-R.html">R programming for climate data analysis and visualization</a> “correlation measures how much two variables change together. It ranges from 1 to -1, where 1 means perfect positive correlation, 0 means no correlation at all and -1 means perfect negative correlation”.</p>

<p><br /></p>

<p>Using <code class="language-plaintext highlighter-rouge">cor.test(x = df$Literacy, df$Suicides_Pop)</code> we obtain a correlation coefficient of 0.4 which means a moderate positive correlation. As literacy increases so does suicide proportion. The p-value is less than 0.01, meaning there is a statistically significant association between <code class="language-plaintext highlighter-rouge">Literacy</code> and <code class="language-plaintext highlighter-rouge">Suicides_Pop</code>. Framed differently, under the hypothesis that there is no correlation between the two variables, the probability of finding a coefficient of 0.4 or higher would be less than 1%. So we can reject the null hypothesis.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-linear-models-with-r">5. Linear models with R</h2>

<p>To further study the relationship between these two variables let’s model 3 linear regressions. To know more about linear regression, check out the lesson <a href="/2023/02/07/Linear-Models-in-R.html">R programming for climate data analysis and visualization</a>.</p>

<p><br /></p>

<p>The first model will only include <code class="language-plaintext highlighter-rouge">Suicides_Pop</code> as the dependent variable and <code class="language-plaintext highlighter-rouge">Literacy</code> as the independent variable. Use <code class="language-plaintext highlighter-rouge">summary(lm(Suicides_Pop ~ Literacy, data = df))</code> to see the results of this model. The literacy coefficient tells us that if we increase the literacy rate by 1%, then the suicide proportion grows by 0.11. Put differently, a 10% increase in literacy is associated with around 1 suicide more per 100,000 population. This estimate is statistically significant.</p>

<p><br />
In the code below, we use <code class="language-plaintext highlighter-rouge">geom_smooth</code> to plot the regression line describing the positive link between literacy and suicides. The <code class="language-plaintext highlighter-rouge">method</code> argument tells ggplot to use a linear model (lm) to depict the relationship.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-13-5">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Suicides_Pop</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_smooth</span><span class="p">(</span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"lm"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">se</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Relationship between Suicides and Literacy"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Percentage of literate conscripts"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Suicides (per 100,000 population)"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_13_03.png" alt="geom_smooth" /></p>

<p><br /></p>

<p>Note that we cannot say that higher literacy rates directly cause more suicides, as factors beyond literacy rates might influence suicide rates. In the next section, we will check whether wealth and the distance to Paris influence suicides as well. Moreover, we will determine if the association between literacy and suicides holds even after controlling for these variables. To show the results, we will use <a href="https://cran.r-project.org/web/packages/stargazer/index.html">stargazer</a>, a very handy package designed for displaying linear model results.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-how-to-use-stargazer-in-r">6. How to use stargazer in R</h2>

<p>The <code class="language-plaintext highlighter-rouge">stargazer</code> package offers a very neat and practical way of presenting the results of several linear models. Users can set it up to produce LaTeX or HTML outputs using the <code class="language-plaintext highlighter-rouge">type</code> argument. In the code that follows, we configure it to generate HTML, making it suitable for this blog post. First, we create three models adding variables indicating the wealth and distance to Paris of each department. Second, we pass these models to stargazer.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-13-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-13-6">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">linear_model_01</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">linear_model_02</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Wealth</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">linear_model_03</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Suicides_Pop</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">Literacy</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Wealth</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Distance</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">stargazer</span><span class="p">)</span><span class="w">

</span><span class="n">stargazer</span><span class="p">(</span><span class="n">linear_model_01</span><span class="p">,</span><span class="w"> </span><span class="n">linear_model_02</span><span class="p">,</span><span class="w"> </span><span class="n">linear_model_03</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"html"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">stargazer</code> table can be seen below. Note in model 2 that <code class="language-plaintext highlighter-rouge">Wealth</code> appears to influence <code class="language-plaintext highlighter-rouge">Suicides</code> negatively, meaning that richer areas are associated with fewer suicides. The coefficient regarding <code class="language-plaintext highlighter-rouge">Literacy</code> decreases a bit but remains statistically significant. Finally, model 3 includes the distance to Paris as an additional variable. The coefficient of <code class="language-plaintext highlighter-rouge">Literacy</code> decreases again but remains statistically significant. Moreover, being close to Paris is associated with more suicides.</p>

<p><br /></p>

<table style="text-align:center; width: 100%;"><tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left"></td><td colspan="3"><em>Dependent variable:</em></td></tr>
<tr><td></td><td colspan="3" style="border-bottom: 1px solid white"></td></tr>
<tr><td style="text-align:left"></td><td colspan="3">Suicides_Pop</td></tr>
<tr><td style="text-align:left"></td><td>(1)</td><td>(2)</td><td>(3)</td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left">Literacy</td><td>0.112<sup>***</sup></td><td>0.080<sup>***</sup></td><td>0.064<sup>**</sup></td></tr>
<tr><td style="text-align:left"></td><td>(0.027)</td><td>(0.026)</td><td>(0.025)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Wealth</td><td></td><td>-0.080<sup>***</sup></td><td>-0.059<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td></td><td>(0.018)</td><td>(0.018)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Distance</td><td></td><td></td><td>-0.014<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td>(0.004)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">Constant</td><td>0.645</td><td>5.347<sup>***</sup></td><td>7.901<sup>***</sup></td></tr>
<tr><td style="text-align:left"></td><td>(1.168)</td><td>(1.489)</td><td>(1.604)</td></tr>
<tr><td style="text-align:left"></td><td></td><td></td><td></td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left">Observations</td><td>86</td><td>86</td><td>86</td></tr>
<tr><td style="text-align:left">R<sup>2</sup></td><td>0.167</td><td>0.329</td><td>0.408</td></tr>
<tr><td style="text-align:left">Adjusted R<sup>2</sup></td><td>0.157</td><td>0.313</td><td>0.386</td></tr>
<tr><td style="text-align:left">Residual Std. Error</td><td>4.360 (df = 84)</td><td>3.938 (df = 83)</td><td>3.720 (df = 82)</td></tr>
<tr><td style="text-align:left">F Statistic</td><td>16.826<sup>***</sup> (df = 1; 84)</td><td>20.321<sup>***</sup> (df = 2; 83)</td><td>18.841<sup>***</sup> (df = 3; 82)</td></tr>
<tr><td colspan="4" style="border-bottom: 1px solid white"></td></tr><tr><td style="text-align:left"><em>Note:</em></td><td colspan="3" style="text-align:right"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr>
</table>

<p><br /></p>

<hr />

<p><br /></p>

<p>Like all social phenomena, the incidence of suicide is shaped by a multitude of factors.  While we cannot definitively claim that literacy directly caused suicides in 19th-century France, our analysis above does indicate an association between these variables. Delving deeper into the contextual nuances of France in the 1830s might shed light on whether literacy indeed influenced the decision to commit suicide. For instance, check this article by Lisa Lieberman <a href="https://www.cambridge.org/core/journals/comparative-studies-in-society-and-history/article/abs/romanticism-and-the-culture-of-suicide-in-nineteenthcentury-france/FA6EBEDC86A5F6812B37DCA03D609C67">“Romanticism and the Culture of Suicide in Nineteenth-Century France”</a></p>

<p><br /></p>

<p>If you are interested in this topic, <a href="https://en.wikipedia.org/wiki/The_Sorrows_of_Young_Werther">The Sorrows of Young Werther</a>, by Johann Wolfgang Goethe, is a literary representation of a particular view on suicide that would influence the Romantic movement in 19th-century Europe.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_13.jpeg" alt="The Sorrows of Young Werther" />
Daniel Chodowiecki. Goethe’s Werther in his bedroom, with him lying dead on his bed. Public Domain.</p>

<p><br /></p>

<p><br /></p>

<p><strong>If you have any questions or would like to share your thoughts on this topic, please feel free to ask in the comments below.</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>Association between two variables can be identified with a scatter plot;</li>
  <li>It can also be explored analytically with <code class="language-plaintext highlighter-rouge">cor.test</code>;</li>
  <li>Linear regression helps us further understand the relationship of two variables, given other relevant variables</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="regression" /><category term="ggplot2" /><summary type="html"><![CDATA[Use R to analyze the relationship between two variables. Learn how to create linear models with R.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_13.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_13.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">When Numbers Meet Stories - an introduction to the synthetic control method in R</title><link href="http://localhost:4000/2023/07/21/Synthetic-Control.html" rel="alternate" type="text/html" title="When Numbers Meet Stories - an introduction to the synthetic control method in R" /><published>2023-07-21T00:00:00-03:00</published><updated>2023-07-21T00:00:00-03:00</updated><id>http://localhost:4000/2023/07/21/Synthetic-Control</id><content type="html" xml:base="http://localhost:4000/2023/07/21/Synthetic-Control.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Qualitative flesh on quantitative bones.”</p>

<p>Sidney Tarrow</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists!</p>

<p><br /></p>

<p>As our world grows increasingly data-driven, novel methods emerge that allow us to explore present and past social phenomena using sophisticated algorithms and statistical models. One such method is the synthetic control.</p>

<p><br /></p>

<p>Alberto Abadie, Alexis Diamond, and Jens Hainmueller, in their groundbreaking work, “Comparative Politics and the Synthetic Control Method,” have used the synthetic control method to bridge the often disparate domains of qualitative and quantitative research. Their article presents a systematic framework for selecting comparison units in comparative case studies. As an illustrative example, the authors examine the economic impact of the 1990 German reunification on West Germany.</p>

<p><br /></p>

<p>In this lesson we present the synthetic control method and show how to replicate Abadie et al. (2015)’s study of the impact of German reunification on West German GDP using <code class="language-plaintext highlighter-rouge">Synth</code>, an R package. I also present other applications of the synthetic control method.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_01.jpeg" alt="Berlin Wall" /></p>
<p class="fig-caption">The Berlin Wall. Rieste, CC0, via Wikimedia Commons. Public Domain.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The data required to replicate Abadie’s study is available in the <a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/24714">Harvard Database</a>, which includes both the R script needed for replication and the relevant dataset. This dataset contains information about West Germany and 16 other developed countries. The included variables encompass aspects such as education, income, trade openness, industry share, inflation rate, and investment rate. Note that you do not need to go over the R script provided by the authors since I will simplify and explain it for you in this lesson.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-the-synthetic-control-method">Coding the past: the synthetic control method</h1>

<p><br /></p>

<h2 id="1-the-synthetic-control-method">1. The Synthetic Control Method</h2>

<p>In the article, <a href="https://doi.org/10.1590/1981-3821202300010005">Better Incentives, Better Marks: A Synthetic Control Evaluation of Educational Policies in Ceará, Brazil</a>, I explain that the fundamental issue in evaluating the impact of an event, treatment, or intervention is that, once it occurs in a specific place and time, one can no longer assess how the outcome of interest would have developed in the absence of that event or intervention.</p>

<p><br /></p>

<p>Consider our example of Germany’s reunification; after it happened, it became impossible to determine how its Gross Domestic Product (GDP) would have progressed had reunification not taken place. The synthetic control method is a tool designed to overcome this limitation.</p>

<p><br /></p>

<p>How does the synthetic control method estimate what would have happened to West Germany’s GDP in the absence of reunification?</p>

<p><br /></p>

<p>A straightforward approach would be to select a country similar to West Germany, one that did not experience any significant political events, and examine how its GDP evolved over the same period. Would Denmark, France, New Zealand, or Norway serve as suitable comparison units? Rather than choosing a single country as a comparison reference, the synthetic control method estimates a weighted average of several similar countries. The primary skill of synthetic control lies in its use of optimization to find the best weights for calculating this weighted average, ensuring that this artificial unit — the composite of all the similar countries — most closely resembles West Germany in the period prior to the event. The set of similar countries is called the donor pool.</p>

<p><br /></p>

<p>To calculate these weights, we require data on the characteristics of West Germany and the similar countries over time. Ultimately, the synthetic control method generates a synthetic West Germany that did not undergo reunification, which can be used as a reference to assess the impact of the actual reunification. This concept will become clearer as we proceed with the replication outlined below.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> For more information on the optimization process, please refer to
        
        <a href="https://www.aeaweb.org/articles?id=10.1257/jel.20191450" target="_blank"> Abadie (2021)</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-the-synth-package">2. The synth package</h2>

<p><code class="language-plaintext highlighter-rouge">Synth</code> is an R implementation of the synthetic control method. Its most relevant functions are as follows:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">dataprep()</code>: this function prepares the data for the optimization process;</li>
  <li><code class="language-plaintext highlighter-rouge">synth()</code>:  it calculates the optimal weights for each candidate comparison unit and each characteristic;</li>
  <li><code class="language-plaintext highlighter-rouge">path.plot()</code> and <code class="language-plaintext highlighter-rouge">gaps.plot()</code>: These functions provide plots of the trend of the affected unit and its synthetic version, along with the gap between them (the effect).</li>
</ul>

<p><br /></p>

<p>The primary task for computing the synthetic control involves configuring the <code class="language-plaintext highlighter-rouge">dataprep()</code> function. This function provides necessary information to <code class="language-plaintext highlighter-rouge">synth()</code> about which unit was affected by the event, which units will act as comparisons (donor pool), and the characteristics used to estimate the synthetic control. Below are the main arguments <code class="language-plaintext highlighter-rouge">dataprep()</code>:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>foo: a data frame containing the necessary data;</li>
  <li>predictors: a vector containing the names of the variables with characteristics (predictors);</li>
  <li>special.predictors: a list object identifying additional numeric predictors, their associated pretreatment years and the measure of central tendency to use (e.g., mean, median);</li>
  <li>dependent: the name of the variable of interest (e.g., GDP);</li>
  <li>unit.variable: the name of the variable containing the code of the units. It must be numerical (e.g., codes for each country)</li>
  <li>time.variable: the name of the variable indicating time (year). It must be numerical.</li>
  <li>treatment.identifier: the code of the unit that suffered the event or intervention;</li>
  <li>controls.identifier: the codes of the units that did not undergo the event or intervention (donor pool);</li>
  <li>time.predictors.prior: time period to calculate the average of characteristics (predictors of the dependent variable);</li>
  <li>time.optimize.ssr: the period of optimization, during which the mean squared prediction error (MSPE) between treated and synthetic control units is minimized.</li>
  <li>time.plot: the periods for the plots made by path.plot and gaps.plot ;</li>
  <li>unit.names.variable: the name of the variable with unit (country) names.  It must be of character type.</li>
</ul>

<p><br /></p>

<p>Some of these arguments might not be clear for you right now, but they will make sense once we explain them with the example below. After estimating the synthetic control, we can use the <code class="language-plaintext highlighter-rouge">path.plot()</code> and <code class="language-plaintext highlighter-rouge">gaps.plot()</code> functions to visualize the effects.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_12_02.png" alt="synthetic control estimation flow " /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-synthetic-control-in-r">3. Synthetic control in R</h2>

<p>The first step to replicate the study is to load the <code class="language-plaintext highlighter-rouge">Synth</code> package and the dataset. We use the <code class="language-plaintext highlighter-rouge">foreign</code> package to load the file <code class="language-plaintext highlighter-rouge">repgermany.dta</code>. The dataset contains information about West Germany and 16 other developed countries: Australia, Austria, Belgium, Denmark, France, Greece, Italy, Japan, the Netherlands, New Zealand, Norway, Portugal, Spain, Switzerland, the United Kingdom, and the United States. Information on education, income, trade openness, industry share, inflation rate, and investment rate is included. The data spans the period from 1960 to 2001.
<br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">foreign</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">Synth</span><span class="p">)</span><span class="w">

</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.dta</span><span class="p">(</span><span class="s2">"repgermany.dta"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>The next step is to prepare the data for the synth function. We use the <code class="language-plaintext highlighter-rouge">dataprep()</code> function to do that. The code below specifies the following:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">foo = d</code>: the full dataframe containing the data;</li>
  <li><code class="language-plaintext highlighter-rouge">predictors = c("gdp","trade","infrate")</code>: the predictors of the dependent variable (GDP).</li>
  <li><code class="language-plaintext highlighter-rouge">special.predictors = list(list("industry" ,1981:1990, c("mean")), list("schooling",c(1980,1985), c("mean")), list("invest80" ,1980, c("mean")))</code>: additional predictors and their associated pretreatment years. This argument allows us to choose the time periods and which measure of central tendency (eg. “mean”, “median”) to use. Note that the <code class="language-plaintext highlighter-rouge">synth</code> function requires a summary statistic of the predictors rather than the complete time series. In this case, we use the mean of the industry share, schooling, and investment rate in the 1980s. The predictors specified in the <code class="language-plaintext highlighter-rouge">predictors</code> argument also use the mean by default;</li>
  <li><code class="language-plaintext highlighter-rouge">dependent = "gdp"</code>: the dependent variable, which is GDP;</li>
  <li><code class="language-plaintext highlighter-rouge">unit.variable = "index"</code>: the variable containing country codes;</li>
  <li><code class="language-plaintext highlighter-rouge">time.variable = "year"</code>: the variable indicating time (year);</li>
  <li><code class="language-plaintext highlighter-rouge">treatment.identifier = 7</code>: the code of the unit that suffered the event (West Germany);</li>
  <li><code class="language-plaintext highlighter-rouge">controls.identifier = unique(d$index)[-7]</code>: all country codes, except for West Germany;</li>
  <li><code class="language-plaintext highlighter-rouge">time.predictors.prior = 1981:1990</code>: the mean of the predictors specified in the <code class="language-plaintext highlighter-rouge">predictors</code> argument will be calculated in the period from 1981 to 1990;</li>
  <li><code class="language-plaintext highlighter-rouge">time.optimize.ssr = 1960:1989</code>: the optimization will be performed in the period from 1960 to 1989;</li>
  <li><code class="language-plaintext highlighter-rouge">time.plot = 1960:2003</code>: the plots will be made from 1960 to 2003;</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dataprep_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w">
  </span><span class="n">dataprep</span><span class="p">(</span><span class="w">
    </span><span class="n">foo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">d</span><span class="p">,</span><span class="w">
    </span><span class="n">predictors</span><span class="w">    </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"gdp"</span><span class="p">,</span><span class="s2">"trade"</span><span class="p">,</span><span class="s2">"infrate"</span><span class="p">),</span><span class="w">
    </span><span class="n">dependent</span><span class="w">     </span><span class="o">=</span><span class="w"> </span><span class="s2">"gdp"</span><span class="p">,</span><span class="w">
    </span><span class="n">unit.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"index"</span><span class="p">,</span><span class="w">
    </span><span class="n">time.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"year"</span><span class="p">,</span><span class="w">
    </span><span class="n">special.predictors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"industry"</span><span class="w"> </span><span class="p">,</span><span class="m">1981</span><span class="o">:</span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">)),</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"schooling"</span><span class="p">,</span><span class="nf">c</span><span class="p">(</span><span class="m">1980</span><span class="p">,</span><span class="m">1985</span><span class="p">),</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">)),</span><span class="w">
      </span><span class="nf">list</span><span class="p">(</span><span class="s2">"invest80"</span><span class="w"> </span><span class="p">,</span><span class="m">1980</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">))</span><span class="w">
    </span><span class="p">),</span><span class="w">
    </span><span class="n">treatment.identifier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7</span><span class="p">,</span><span class="w">
    </span><span class="n">controls.identifier</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">d</span><span class="o">$</span><span class="n">index</span><span class="p">)[</span><span class="m">-7</span><span class="p">],</span><span class="w">
    </span><span class="n">time.predictors.prior</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1981</span><span class="o">:</span><span class="m">1990</span><span class="p">,</span><span class="w">
    </span><span class="n">time.optimize.ssr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1960</span><span class="o">:</span><span class="m">1989</span><span class="p">,</span><span class="w">
    </span><span class="n">unit.names.variable</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"country"</span><span class="p">,</span><span class="w">
    </span><span class="n">time.plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1960</span><span class="o">:</span><span class="m">2003</span><span class="w">
  </span><span class="p">)</span><span class="w">

</span><span class="n">synth_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">synth</span><span class="p">(</span><span class="n">dataprep_out</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p>The final step is to pass the output of <code class="language-plaintext highlighter-rouge">dataprep()</code> to the <code class="language-plaintext highlighter-rouge">synth()</code>function. This provides the weights for each candidate comparison unit (solution.w) and each characteristic (solution.v) used in the optimization. Note that the optimization algorithm assigned the largest weights to Austria and the United States, which makes sense given the economic and historical similarities of these countries with West Germany.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-visualizing-synthetic-control-models">4. Visualizing synthetic control models</h2>

<p>Now we can use <code class="language-plaintext highlighter-rouge">Synth</code> functions path.plot() and gaps.plot() to visualize the effects. The <code class="language-plaintext highlighter-rouge">path.plot()</code> function plots the trend of the affected unit and its synthetic version. The <code class="language-plaintext highlighter-rouge">gaps.plot()</code> function plots the gap between them (the effect). You can set the labels of the axes and the title of the plot using the arguments <code class="language-plaintext highlighter-rouge">Ylab</code>, <code class="language-plaintext highlighter-rouge">Xlab</code>, and <code class="language-plaintext highlighter-rouge">Main</code>. You can also set the legend text using the argument <code class="language-plaintext highlighter-rouge">Legend</code> and a dashed line to indicate the year of the event using the argument <code class="language-plaintext highlighter-rouge">tr.intake</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-12-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-12-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">path.plot</span><span class="p">(</span><span class="n">synth.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">synth_out</span><span class="p">,</span><span class="w">
          </span><span class="n">dataprep.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dataprep_out</span><span class="p">,</span><span class="w">
          </span><span class="n">tr.intake</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w">
          </span><span class="n">Ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Per capita GDP"</span><span class="p">,</span><span class="w">
          </span><span class="n">Xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Year"</span><span class="p">,</span><span class="w">
          </span><span class="n">Legend</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"West Germany"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Synthetic West Germany"</span><span class="p">),</span><span class="w">
          </span><span class="n">Main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"West Germany vs Synthetic West Germany"</span><span class="p">)</span><span class="w">

</span><span class="n">gaps.plot</span><span class="p">(</span><span class="n">synth.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">synth_out</span><span class="p">,</span><span class="w">
          </span><span class="n">dataprep.res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dataprep_out</span><span class="p">,</span><span class="w">
          </span><span class="n">tr.intake</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w">
          </span><span class="n">Ylab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Effect"</span><span class="p">,</span><span class="w">
          </span><span class="n">Xlab</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Year"</span><span class="p">,</span><span class="w">
          </span><span class="n">Main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" Gap between per capita GDP in West Germany and its synthetic version"</span><span class="p">)</span></code></pre></figure>

</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_03.png" alt="West Germany GDP vs Synthetic West Germany" /></p>

<p><br /></p>

<p>In this first plot, we can observe that the per capita GDP of synthetic West Germany closely resembles that of actual West Germany during the period prior to reunification. Upon the implementation of reunification, the model suggests that the synthetic West Germany, unaffected by reunification, would have continued following the same trend in its GDP per capita, while the actual West Germany experienced a decrease. The difference between their trajectories represents the effect of reunification on GDP per capita.</p>

<p><br /></p>

<p>It is important to note that during the first two years of German reunification, West Germany actually experienced an increase in GDP per capita. According to Abadie et al. (2015), this increase can be attributed to a demand boom in goods and services. However, starting from 1992 onwards, the effect of reunification on GDP turned negative.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_04.png" alt="Effect of Reunification on GDP per capita" /></p>

<p><br /></p>

<p>The plot above clearly illustrates the effect by highlighting the difference between the synthetic West Germany and the actual West Germany. Following the initial demand boom, the gap between the two units widens significantly after 1992, indicating a negative impact of reunification on West Germany’s GDP. For instance, in 2003, the gap amounts to approximately 3,000 dollars. Considering that West Germany’s GDP per capita in 2003 was around 29,000 dollars, the effect of reunification resulted in a decrease of approximately 10% in GDP per capita that year. Over the entire period, the authors estimate that reunification led to an average reduction of about 1,600 USD in GDP per year (Abadie et al., 2015).</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-synthetic-control-for-policy-evaluation">5. Synthetic Control for policy evaluation</h2>

<p>Besides its application to evaluate historical events, like the German reunification, synthetic control is also used to evaluate the impact of policies.</p>

<p><br /></p>

<p>Abadie et al. (2010) evaluate the effect of a tobacco control program in California. The authors use the synthetic control method to estimate the effect of the program on cigarette consumption.</p>

<p><br /></p>

<p>In the article <a href="https://doi.org/10.1590/1981-3821202300010005">Better Incentives, Better Marks: A Synthetic Control Evaluation of Educational Policies in Ceará, Brazil</a>, I employed the synthetic control method to evaluate the impact of the educational policies implemented in Ceará, Brazil. The study revealed that a combination of technical assistance (TA) and tax incentives (TI) resulted in up to a 12 percent increase in student test scores. The figure below illustrates the estimated models, where the green line represents the treated Ceará, and the yellow line represents the synthetic Ceará. The gap between these lines represents the effect of the policies.</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_12_05.jpeg" alt="Synthetic control used for policy evaluation" /></p>

<p><br /></p>

<p><strong>If you have any questions about the synthetic control method, please feel free to ask in the comments below.</strong></p>

<p><br /></p>

<p>Moreover, I recommend checking out <a href="https://www.aeaweb.org/articles?id=10.1257/jel.20191450">Using Synthetic Controls: Feasibility, Data Requirements, and Methodological Aspects</a>, a clarifying article by Abadie (2021) that provides a comprehensive overview of the synthetic control method.</p>

<p><br /></p>

<hr />

<p><br /></p>

<p><strong>Articles cited</strong></p>

<p><br /></p>

<ul class="conclusion-list">
  <li>Abadie, Alberto. 2021. “Using Synthetic Controls: Feasibility, Data Requirements, and Methodological Aspects.” Journal of Economic Literature, 59 (2): 391-425 DOI: 10.1257/jel.20191450</li>
  <li>Abadie, Alberto, Alexis Diamond, and Jens Hainmueller. 2015. “Comparative Politics and the Synthetic Control Method.” American Journal of Political Science 59 (2): 495-510. doi: 10.1111/ajps.12116</li>
  <li>Abadie, Alberto, Alexis Diamond &amp; Jens Hainmueller. 2010. “Synthetic Control Methods for Comparative Case Studies: Estimating the Effect of California’s Tobacco Control Program” Journal of the American Statistical Association, 105:490, 493-505, DOI: 10.1198/jasa.2009.ap08746</li>
  <li>Ponne, Bruno Gasparotto. 2023. “Better Incentives, Better Marks: A Synthetic Control Evaluation of the Educational Policies in Ceará, Brazil”. Braz. political sci. rev., 17(1), e0005. https://doi.org/10.1590/1981-3821202300010005</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>Synthetic control is a method that allows us to estimate the effect of an event, treatment, or intervention by creating an artificial comparison unit;</li>
  <li>The <code class="language-plaintext highlighter-rouge">Synth</code> package is an R implementation that allows us to estimate synthetic control models;</li>
  <li>Besides being used to evaluate historical events, synthetic control is also used to evaluate the impact of policies.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="historicaldata" /><summary type="html"><![CDATA[Use the synth package to estimate synthetic control models, a powerful causal inference tool. Explore its strengths, limitations and main applications.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_12.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_12.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Uncovering History with R - A Look at the HistData Package</title><link href="http://localhost:4000/2023/07/12/HistData.html" rel="alternate" type="text/html" title="Uncovering History with R - A Look at the HistData Package" /><published>2023-07-12T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/07/12/HistData</id><content type="html" xml:base="http://localhost:4000/2023/07/12/HistData.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Historians offer us systems of the past that are too complete, series of causes and effects that are too exact and too clear to have ever been entirely true.”</p>

<p>Marguerite Yourcenar - Mémoires d`Hadrien (1974)</p>

<p><br /></p>

<p>Greetings, humanists, social and data scientists! Are you curious about how data analysis can enrich your research and understanding? Look no further! Today, we explore the world of historical data analysis using R’s powerful package: HistData. This package contains a collection of more than 30 datasets that can be used to explore historical trends and patterns.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p><a href="https://cran.r-project.org/package=HistData">HistData</a> is an R package that provides a collection of 31 small datasets that are part of a program of research known as statistical historiography, that is, “the use of statistical methods to study problems and questions in the history of statistics and graphics” (Friendly, 2021). They can, of course, be used to study other topics in the humanities and social sciences. Thank you to the authors Michael Friendly, Stephane Dray, Hadley Wickham, James Hanley, Dennis Murphy, Peter Li for this wonderful compilation of datasets! Here are some of the data included.</p>

<p><br /></p>

<table class="dataframe-2">
    <thead>
        <tr>
            <th>Dataset</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Arbuthnot</td>
            <td>Arbuthnot’s data on male and female birth ratios in London from 1629-1710</td>
        </tr>
        <tr>
            <td>Armada</td>
            <td>The Spanish Armada</td>
        </tr>
        <tr>
            <td>Bowley</td>
            <td>Bowley’s data on values of British and Irish trade, 1855-1899</td>
        </tr>
        <tr>
            <td>Cavendish</td>
            <td>Cavendish’s 1798 determinations of the density of the earth</td>
        </tr>
        <tr>
            <td>ChestSizes</td>
            <td>Quetelet’s data on chest measurements of Scottish militiamen</td>
        </tr>
        <tr>
            <td>Cholera</td>
            <td>William Farr’s Data on Cholera in London, 1849</td>
        </tr>
        <tr>
            <td>CushnyPeebles</td>
            <td>Cushny-Peebles data: Soporific effects of scopolamine derivatives</td>
        </tr>
        <tr>
            <td>Dactyl</td>
            <td>Edgeworth’s counts of dactyls in Virgil’s Aeneid</td>
        </tr>
        <tr>
            <td>DrinksWages</td>
            <td>Elderton and Pearson’s (1910) data on drinking and wages</td>
        </tr>
        <tr>
            <td>Fingerprints</td>
            <td>Waite’s data on Patterns in Fingerprints</td>
        </tr>
        <tr>
            <td>Galton</td>
            <td>Galton’s data on the heights of parents and their children</td>
        </tr>
        <tr>
            <td>GaltonFamilies</td>
            <td>Galton’s data on the heights of parents and their children, by family</td>
        </tr>
        <tr>
            <td>Guerry</td>
            <td>Data from A.-M. Guerry, "Essay on the Moral Statistics of France"</td>
        </tr>
        <tr>
            <td>HalleyLifeTable</td>
            <td>Halley’s Life Table</td>
        </tr>
        <tr>
            <td>Jevons</td>
            <td>W. Stanley Jevons’ data on numerical discrimination</td>
        </tr>
    </tbody>
</table>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-exploring-histdata">Coding the past: exploring HistData</h1>

<p><br /></p>

<h2 id="1-how-to-install-the-package-in-r">1. How to install the package in R?</h2>

<p>To get started with HistData, you will first need to install and load the package into your R environment. We will additionally load other necessary libraries. You can do this using the following commands:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-11-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"HistData"</span><span class="p">)</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">HistData</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyr</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>You can access descriptions for each dataset using the <code class="language-plaintext highlighter-rouge">help(DataSet)</code> command. Moreover, running <code class="language-plaintext highlighter-rouge">example(DataSet)</code> will, in most cases, demonstrate applications similar to their historical use.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-load-and-rename-a-dataset-from-histdata">2. How to load and rename a dataset from HistData?</h2>

<p>To demonstrate HistData’s capabilities, we will use the <code class="language-plaintext highlighter-rouge">Nightingale</code> dataset. This dataset contains the monthly number of deaths from various causes in the British Army during the <a href="https://en.wikipedia.org/wiki/Crimean_War">Crimean War (1853-1856)</a>. The data was collected by Florence Nightingale, a British nurse who became famous for her work in the Crimean War. She was also a pioneer in the use of data visualization to communicate information.</p>

<p><br /></p>

<p class="fig-caption"><img src="/assets/images/lesson_11_01.jpeg" alt="Florence Nightingale" />
Florence Nightingale. Photograph by Millbourn. Wellcome Collection. Public Domain</p>

<p><br /></p>

<p>To load the <code class="language-plaintext highlighter-rouge">Nightingale</code> dataset, we use the <code class="language-plaintext highlighter-rouge">data()</code> function. It will be automatically named <code class="language-plaintext highlighter-rouge">Nightingale</code> in our environment. However, we can load it into a dataframe with a different name, such as <code class="language-plaintext highlighter-rouge">df</code>, using the following command:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data</span><span class="p">(</span><span class="n">Nightingale</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Nightingale</span></code></pre></figure>

</div>

<p><br /></p>

<p>To check the structure of the dataset, use the <code class="language-plaintext highlighter-rouge">str(Nightingale)</code>. This will show you the number of observations and variables, as well as the type of data in each column. You  will see that the dataset has 10 variables: <code class="language-plaintext highlighter-rouge">Date</code>, <code class="language-plaintext highlighter-rouge">Month</code>, <code class="language-plaintext highlighter-rouge">Year</code>, <code class="language-plaintext highlighter-rouge">Army</code>, <code class="language-plaintext highlighter-rouge">Disease</code>, <code class="language-plaintext highlighter-rouge">Wounds</code>, <code class="language-plaintext highlighter-rouge">Other</code>, <code class="language-plaintext highlighter-rouge">Disease.rate</code>, <code class="language-plaintext highlighter-rouge">Wounds.rate</code>, and <code class="language-plaintext highlighter-rouge">Other.rate</code>.  There are 24 observations for each variable. We will focus on the following variables:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">Date</code>: the date of the observation;</li>
  <li><code class="language-plaintext highlighter-rouge">Year</code>: the year of the observation;</li>
  <li><code class="language-plaintext highlighter-rouge">Disease</code>: the number of deaths from preventable or mitigable zymotic diseases;</li>
  <li><code class="language-plaintext highlighter-rouge">Wounds</code>: the number of deaths directly from battle wounds;</li>
  <li><code class="language-plaintext highlighter-rouge">Other</code>: the number of deaths from other causes.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-explore-the-dataset">3. Explore the dataset</h2>

<p>First, let’s create a new variable <code class="language-plaintext highlighter-rouge">Total</code> with the total amount of deaths per period. We can do this by adding the <code class="language-plaintext highlighter-rouge">Disease</code>, <code class="language-plaintext highlighter-rouge">Wounds</code>, and <code class="language-plaintext highlighter-rouge">Other</code> variables. This is done with the <code class="language-plaintext highlighter-rouge">mutate()</code> function available in the <code class="language-plaintext highlighter-rouge">dplyr</code> package.  We can then use the <code class="language-plaintext highlighter-rouge">group_by()</code> and <code class="language-plaintext highlighter-rouge">summarise()</code> functions to calculate the average number of deaths per year.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Total</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Disease</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Wounds</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">Other</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">Year</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">average_n_deaths</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">Total</span><span class="p">))</span></code></pre></figure>

</div>

<p><br /></p>

<p>We can see that the average number of deaths was 688 in 1854; reached a peak of 967 deaths in 1855; and decreased in 1856.</p>

<p><br /></p>

<p>To visualize the trend of deaths over time, we can use <code class="language-plaintext highlighter-rouge">geom_line()</code> function from the <code class="language-plaintext highlighter-rouge">ggplot2</code> package. The <code class="language-plaintext highlighter-rouge">Date</code> variable should be mapped to the x-axis and the <code class="language-plaintext highlighter-rouge">Total</code> variable to the y-axis. We can use the <code class="language-plaintext highlighter-rouge">labs()</code> function to add a title and labels to the x and y axes. Note that <code class="language-plaintext highlighter-rouge">theme_coding_the_past()</code> is a custom theme that I created in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization’</a> to make the plot match the blog theme. You can use the default theme or create your own.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
    </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
      </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
      </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
      </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
      </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Eliminates grids:</span><span class="w">
      </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
      </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
      </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
      </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
      </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Date</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Total</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Deaths in the British Army during the Crimean War"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Date"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Total Number of Deaths"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_11_02.png" alt="Plot of Total Deaths through time " /></p>

<p><br /></p>

<p>Florence Nightingale hypothesized that deaths in war hospitals were more frequently caused by poor sanitary conditions than by the war injuries themselves. As a result of Nightingale’s reports and persistent advocacy, a Sanitary Commission was dispatched in March 1855 to enhance hygiene standards, improve ventilation, and introduce preventive measures such as handwashing. To evaluate whether the death rates declined following the arrival of the Sanitary Commission, Florence took a progressive approach for her time. She analyzed and visualized data!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-florences-approach-a-coxcomb-chart">4. Florence’s approach: a Coxcomb chart</h2>

<p>To better understand how the number of deaths evolved during the war period, Florence utilized a Coxcomb plot. This plot is similar to a pie chart, but all sectors have equal angles, differing in how far they extend from the center of the circle.</p>

<p><br /></p>

<p>The figure below presents the Coxcomb plot that Florence created. The plot illustrates the number of deaths per month and cause. The radius of each sector is proportional to the number of deaths. There are 12 sectors, each representing a month of the year, starting from the left (April 1854) and proceeding in a clockwise direction until March 1855, thus completing the circle. Each sector is further divided by color, indicating the cause of death. Florence split the data into two different visualizations: one for before the arrival of the Sanitary Commission (plot on the right), and one for after (plot on the left).</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_11_03.jpeg" alt="Florence Coxcomb Chart " /></p>
<p class="fig-caption">Florence Nightingale, Public domain, via <a href="https://commons.wikimedia.org/wiki/File:Nightingale-mortality.jpg">Wikimedia Commons</a></p>

<p><br /></p>

<p>In the next sections, we will replicate Nightingale’s Coxcomb plot using the <code class="language-plaintext highlighter-rouge">ggplot2</code> package. Before that, we will use the <code class="language-plaintext highlighter-rouge">pivot_longer()</code> function from the <code class="language-plaintext highlighter-rouge">tidyr</code> package to transform the data from a wide to a long format. This will allow us to visualize the trend of deaths by cause over time.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-how-to-use-r-pivot_longer">5. How to use R pivot_longer?</h2>

<p>The <code class="language-plaintext highlighter-rouge">pivot_longer()</code> function, from the <code class="language-plaintext highlighter-rouge">tidyr</code> package, enables us to convert our data from a wide format to a long one. This process will create a new variable named <code class="language-plaintext highlighter-rouge">Cause</code> with the values <code class="language-plaintext highlighter-rouge">Disease</code>, <code class="language-plaintext highlighter-rouge">Wounds</code> and <code class="language-plaintext highlighter-rouge">Other</code>, all of which were previously separate variables. The death counts corresponding to each cause will now be housed in a new variable labeled <code class="language-plaintext highlighter-rouge">Deaths</code>. The <code class="language-plaintext highlighter-rouge">cols</code> argument specifies the variables to be transformed, while the <code class="language-plaintext highlighter-rouge">names_to</code> and <code class="language-plaintext highlighter-rouge">values_to</code> arguments specify the names of the new variables. The figure below illustrates the transformation from wide to long format.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_11_04.png" alt="pivot_longer illustration " /></p>

<p><br /></p>

<p>The following code first selects the relevant variables and then carries out the wide to long transformation. Moreover, we create one dataset for the data before the Commission’s arrival and another one for after the arrival. We will use these datasets to replicate Florence’s Coxcomb plot in the next section.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">Date</span><span class="p">,</span><span class="w"> </span><span class="n">Disease</span><span class="p">,</span><span class="w"> </span><span class="n">Wounds</span><span class="p">,</span><span class="w"> </span><span class="n">Other</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Disease</span><span class="o">:</span><span class="n">Other</span><span class="p">,</span><span class="w"> </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Cause"</span><span class="p">,</span><span class="w"> </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Deaths"</span><span class="p">)</span><span class="w">

</span><span class="n">df_before</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Date</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">as.Date</span><span class="p">(</span><span class="s2">"1855-04-01"</span><span class="p">))</span><span class="w">
</span><span class="n">df_after</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Date</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">as.Date</span><span class="p">(</span><span class="s2">"1855-04-01"</span><span class="p">))</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-replicate-florences-coxcomb-plot-with-ggplot2">6. Replicate Florence’s Coxcomb plot with ggplot2</h2>

<p>The code below replicates Nightingale’s Coxcomb plot. <code class="language-plaintext highlighter-rouge">Date</code> is mapped to the x-axis and the <code class="language-plaintext highlighter-rouge">Deaths</code> to the y-axis. The <code class="language-plaintext highlighter-rouge">fill</code> parameter is dependent on <code class="language-plaintext highlighter-rouge">Cause</code>. The <code class="language-plaintext highlighter-rouge">geom_bar()</code> layer creates a stacked bar chart. The <code class="language-plaintext highlighter-rouge">scale_y_sqrt()</code> function transforms the y-axis into a square root scale to better visualize the differences between the number of deaths by cause. Note also that the <code class="language-plaintext highlighter-rouge">limits</code> argument guarantees that before and after y-axis will have the same scale: from 0 to 3000 deaths. Thus we can compare the two plots more easily.</p>

<p><br /></p>

<p>Finally, <code class="language-plaintext highlighter-rouge">coord_polar()</code> converts the bar chart into a Coxcomb plot. The ´start´ argument sets the offset of starting point from “12 o’clock” in radians. We set it to 3*pi/2 (270°) to start at “9 o’clock” to replicate Florence’s choice. The <code class="language-plaintext highlighter-rouge">ggtitle()</code> function adds a title to the plot. The <code class="language-plaintext highlighter-rouge">scale_fill_manual()</code> function sets the colors of the sectors. The <code class="language-plaintext highlighter-rouge">theme()</code> adapts the plot to fit the style of this page. The exact same plot is created for the data after the arrival of the Sanitary Commission.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-6">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">my_colors</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="s2">"#95D758"</span><span class="p">,</span><span class="w"> </span><span class="s2">"#38B6FF"</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_before</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">Date</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Deaths</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Cause</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># Stacked bar chart</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">position</span><span class="o">=</span><span class="s2">"identity"</span><span class="p">,</span><span class="w"> </span><span class="n">stat</span><span class="o">=</span><span class="s2">"identity"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">my_colors</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="c1"># Fixed scale for before and after</span><span class="w">
  </span><span class="n">scale_y_sqrt</span><span class="p">(</span><span class="n">limits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">3000</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="c1"># A coxcomb plot (bar chart + polar coordinates)</span><span class="w">
  </span><span class="n">coord_polar</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="m">3</span><span class="o">*</span><span class="nb">pi</span><span class="o">/</span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s2">"Before Commission Arrival"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="c1">#theme changes</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
    </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
    </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
    </span><span class="c1"># White plot title</span><span class="w">
    </span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
    </span><span class="c1"># Changes legend position and texts color</span><span class="w">
    </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
    </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">,</span><span class="w">
    </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
    </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
    </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
    </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
    </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
    </span><span class="c1"># Omits axes titles and ticks</span><span class="w">
    </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">())</span></code></pre></figure>

</div>

<p><br /></p>

<p>In the plots below, we can confirm that the number of deaths from preventable diseases, in pink, is a lot larger before the arrival of the Sanitary Commission. On the other hand, the number of deaths from wounds and other causes, in blue and green, respectively, is smaller and relatively stable.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_11_05.png" alt="Florence Coxcomb Chart - before " /></p>

<p><br /></p>

<p><img src="/assets/images/lesson_11_06.png" alt="Florence Coxcomb Chart - after" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-a-line-plot-instead-of-a-coxcomb-plot">7. A line plot instead of a Coxcomb plot</h2>

<p>And what if we used a line plot to analyze the same data? The code below employs geom_line to achieve that. Note that geom_vline adds a vertical line at the date of the arrival of the Sanitary Commission.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-11-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-11-7">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Date</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Deaths</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Cause</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Deaths in the British Army during the Crimean War"</span><span class="p">,</span><span class="w">
       </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Date"</span><span class="p">,</span><span class="w">
       </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Number of Deaths"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.Date</span><span class="p">(</span><span class="s2">"1855-04-01"</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">my_colors</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_11_07.png" alt="Florence Chart with a line plot" /></p>

<p><br /></p>

<p>Once again, this plot illustrates that mortality decreased following the arrival of the Sanitary Commission. Notably, deaths from preventable diseases, represented by the pink line, experienced a significant reduction. It’s crucial to bear in mind, however, that before-and-after analyses do not provide definitive proof of causality. Nevertheless, the evidence showcased in both the line plot and the Coxcomb plot strongly indicates that the implemented measures likely drove the observed decrease in fatalities.</p>

<p><br /></p>

<p><strong>What are your thoughts? Do you prefer the Coxcomb plot or the line plot? In your opinion, which visualization is the most effective? I welcome your feedback in the comments below!</strong></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">HistData</code> is a package that provides a collection of 31 small datasets that can be used to explore historical trends and patterns;</li>
  <li>A Coxcomb chart is similar to a pie chart, but all divisions have equal angles, differing in how far they extend from the center of the circle;</li>
  <li>Different plots can be used to visualize the same data. The choice of visualization depends on the type of data and the message you want to convey.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="historicaldata" /><category term="statistics" /><category term="ggplot2" /><summary type="html"><![CDATA[Explore the world of historical data analysis using R's powerful package - HistData. This package contains a collection of more than 30 datasets for your research.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_11.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_11.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Checking normality in R</title><link href="http://localhost:4000/2023/06/01/Normal-Distribution.html" rel="alternate" type="text/html" title="Checking normality in R" /><published>2023-06-01T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/06/01/Normal-Distribution</id><content type="html" xml:base="http://localhost:4000/2023/06/01/Normal-Distribution.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“The normal distribution describes the manner in which many phenomena vary around a central value that represents their most probable outcome”</p>

<p>Leonard Mlodinow</p>

<p><br /></p>

<p>In this lesson, we will dive into the concept of the normal distribution, which is a fundamental concept within statistics. Also known as the Gaussian distribution or bell curve, the normal distribution is a symmetric probability distribution that manifests in numerous natural and social phenomena. During this lesson, we will employ the Swiss dataset to examine and visualize the normal distribution. This dataset comprises the infant mortality rate of 47 French-speaking provinces in Switzerland around 1888.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Infant Mortality Rate is the number of children deaths under one year of age per 1,000 live births. Learn more 
        
        <a href="https://data.oecd.org/healthstat/infant-mortality-rates.htm" target="_blank"> on this OECD page.</a>
        
    </div>
</div>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The <a href="https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/swiss.html">Swiss Fertility and Socioeconomic Indicators (1888) Data</a> is available in the <code class="language-plaintext highlighter-rouge">datasets</code> R package and was originally used in <em>Data Analysis and Regression: A Second Course in Statistics</em> by Mosteller and Tukey (1977).</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-testing-normality-in-r">Coding the past: testing normality in R</h1>

<p><br /></p>

<h2 id="1-what-is-a-normal-distribution">1. What is a normal distribution?</h2>

<p>As we learned from the lesson <a href="/2023/05/15/Z-score-in-R.html">‘Z score in R’</a>, a distribution of data illustrates the frequency of occurrence for different values of a variable. One common way to visualize a distribution is through a histogram.</p>

<p><br /></p>

<p>The normal distribution is a particular kind of data distribution characterized by the following aspects:</p>

<p><br /></p>

<ul class="conclusion-list">
  <li>approximately 95% of all observations of the data fall within 2 standard deviations from the mean. This means that the vast majority of data points cluster closely around the average value;</li>
</ul>

<p><br /></p>

<ul class="conclusion-list">
  <li>when visualized with a histogram, it forms a symmetrical bell-shaped curve. This symmetry indicates that the distribution’s shape is identical on both sides of the mean.</li>
</ul>

<p><br /></p>

<ul class="conclusion-list">
  <li>three important measures of central tendency coincide - the mean, the mode, and the median. This implies that the average value, the most frequently occurring value, and the middle value of the dataset tend to be all equal.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-what-is-rnorm-in-r">2. What is rnorm in R?</h2>

<p>Suppose we want to generate a dataset of heights that follows a normal distribution in R. Specifically, we aim to generate the heights of 1,000 students with a mean of 175 cm and a standard deviation of 5 cm. R provides a function called <code class="language-plaintext highlighter-rouge">rnorm</code> that generates normally distributed data. It takes three arguments: the number of observations you would like to be generated, mean, and standard deviation. In the code below, we generate a normally distributed dataset and plot its histogram.</p>

<p><br /></p>

<p>To ensure reproducibility, we use <code class="language-plaintext highlighter-rouge">set.seed(42)</code> to obtain the same set of numbers every time the code is run. Moreover, to customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization’</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">42</span><span class="p">)</span><span class="w">

</span><span class="c1">#Generating normally distributed data</span><span class="w">

</span><span class="n">heights</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">heights</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="m">175</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">))</span><span class="w">

</span><span class="c1">#Checking the summary statistics</span><span class="w">

</span><span class="n">summary</span><span class="p">(</span><span class="n">heights</span><span class="o">$</span><span class="n">heights</span><span class="p">)</span><span class="w">
</span><span class="n">sd</span><span class="p">(</span><span class="n">heights</span><span class="o">$</span><span class="n">heights</span><span class="p">)</span><span class="w">


</span><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
        </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Eliminates grids:</span><span class="w">
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">


</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">heights</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">heights</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Height [cm]"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_01.png" alt="Histogram of simulated normal distribution " /></p>

<p><br /></p>

<p>As you can see, the distribution has a bell shape and is approximately symmetric, with data centered mostly around the mean (175 cm). According to the summary statistics, the shortest person in our sample measures 158.1 cm, while the tallest stands at 192.5 cm. Besides that, the standard deviation is very close to 5 cm.</p>

<p><br /></p>

<p>Based on our definition, approximately 95% of the observations should fall within a range of minus 2 standard deviations from the mean to plus 2 standard deviations from the mean. Now, let us verify if this holds true for our specific example.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">std_dev</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sd</span><span class="p">(</span><span class="n">heights</span><span class="o">$</span><span class="n">heights</span><span class="p">)</span><span class="w">

</span><span class="n">heights</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">heights</span><span class="o">&gt;</span><span class="m">175</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">std_dev</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">heights</span><span class="o">&lt;</span><span class="w"> </span><span class="m">175</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">std_dev</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">nrow</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p>As expected, only 47 out of 1000 observations, or 4.7%, are more than 2 standard deviations away from the mean.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-r-swiss-dataset">3. R swiss dataset</h2>

<p>Now, let’s examine whether infant mortality rates in 47 provinces of Switzerland in about 1888 follow a normal distribution. Before plotting the histogram, we should first verify if the mean and median of our data points are approximately equal, as is typically the case in a normal distribution, as mentioned earlier. The swiss dataset can be directly loaded to a variable as shown in the code below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-3">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">swiss</span><span class="w">

</span><span class="n">sd</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Infant.Mortality</span><span class="p">)</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Infant.Mortality</span><span class="p">)</span><span class="w">
</span><span class="n">median</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Infant.Mortality</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The standard deviation of infant mortality is 2.91 and its mean is 19.94255. Note that indeed the mean and the median (20) are very similar. Below we plot the histogram to check the shape of our distribution. We also check how many observations are more than 2 standard deviations away from the mean.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-4">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">filter</span><span class="p">(</span><span class="n">Infant.Mortality</span><span class="o">&gt;</span><span class="m">19.94255</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="m">2.91</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="o">&lt;</span><span class="w"> </span><span class="m">19.94255</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="m">2.91</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">nrow</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_02.png" alt="Histogram of infant mortality from the swiss dataset " /></p>

<p><br /></p>

<p>The shape appears to be of a normal distribution, slightly skewed to the left. Furthermore, only 2 out of 47 observations, or 4.2%, in our distribution are more than 2 standard deviations away from the mean. This also suggests that our data is indeed normally distributed.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-probability-density-function-in-r">4. Probability Density Function in R</h2>

<p>A density curve follows the shape of the histogram of the data, but instead of providing the frequency of each value, the area under this curve provides the probability that a certain range of values will occur. For the normal distribution, the density curve is defined as a function \(f(x)\) dependent on \(\mu\) (mean) and \(\sigma\) (standard deviation).</p>

\[f(x) = \frac{1}{\sigma \sqrt{2\pi}}e^{-\frac{(x-\mu)^{2}}{2\sigma^2}}\]

<p>With the formula above, we can implement this function in R to calculate the density for each value of our data.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-5">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">calculate_density</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">,</span><span class="w"> </span><span class="n">st_dev</span><span class="p">){</span><span class="w">
  </span><span class="n">d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="n">st_dev</span><span class="o">*</span><span class="nf">sqrt</span><span class="p">(</span><span class="m">2</span><span class="o">*</span><span class="nb">pi</span><span class="p">)))</span><span class="o">*</span><span class="nf">exp</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">^</span><span class="p">(</span><span class="o">-</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="n">mean</span><span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="p">(</span><span class="m">2</span><span class="o">*</span><span class="n">st_dev</span><span class="o">^</span><span class="m">2</span><span class="p">)))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>


</div>

<p><br /></p>

<p>Now we can calculate the density for each data point of the infant mortality variable and plot the density as a function of the data points.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-6">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">density</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calculate_density</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Infant.Mortality</span><span class="p">,</span><span class="w"> </span><span class="m">19.94255</span><span class="p">,</span><span class="w"> </span><span class="m">2.91</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">density</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_03.png" alt="Density plot of infant mortality from the swiss dataset drawn with geom_line " /></p>

<p><br /></p>

<p>Note that the curve does not form a perfect bell shape due to the limited number of observations.</p>

<p><br /></p>

<p>Fortunately, you do not need to create these functions manually in order to plot a density plot. Firstly, R offers a built-in function called <code class="language-plaintext highlighter-rouge">dnorm</code> that performs the same calculations as the <code class="language-plaintext highlighter-rouge">calculate_density</code> function we created earlier. It accepts identical arguments. Additionally, the <code class="language-plaintext highlighter-rouge">ggplot2</code> package includes a layer called <code class="language-plaintext highlighter-rouge">geom_density</code> which calculates the density and plots it simultaneously. Let’s explore this functionality in the example below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-7">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_density</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">bw</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_04.png" alt="Density plot of infant mortality from the swiss dataset drawn with geom_density " /></p>

<p><br /></p>

<p>Note that the <code class="language-plaintext highlighter-rouge">geom_density</code> computes kernel density estimates and allows you to control how smooth the curve is through the <code class="language-plaintext highlighter-rouge">bw</code> argument. The higher the value of <code class="language-plaintext highlighter-rouge">bw</code>, the smoother the curve.</p>

<p><br /></p>

<p>But, after all, why are density curves so important?</p>

<p><br /></p>

<p>That is because the area under these curves gives us the probability that a certain range of values occurs. Calculating the area under a curve typically requires integration. However, as an approximation, we can approximate the probability of finding Swiss provinces with infant mortality rates ranging from 19 to 21 without resorting to integrals. To do this, we draw a rectangle that approximates the area under the curve within this interval. The plot below illustrates this approach.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-10-8">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_density</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">bw</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">19</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.13</span><span class="p">,</span><span class="w">
           </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.5</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_05.png" alt="Approach to calculate the area under the density curve " /></p>

<p><br /></p>

<p>The area of the rectangle can be calculated by multiplying 2 (width) by 0.13 (height) which results in 0.26. This means that the probability of finding a province with infant mortality between 19 and 21 is 26%.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-how-to-use-pnorm-in-r">5. How to use pnorm in R</h2>

<p>There is a function in R called <code class="language-plaintext highlighter-rouge">pnorm</code> that calculates the probability of an interval of values occurring in a normal distribution. The first argument, <code class="language-plaintext highlighter-rouge">x</code>, specifies the interval for which the probability is to be calculated. By default, the calculated probability corresponds to the interval of values to the left of <code class="language-plaintext highlighter-rouge">x</code>. You can change this behavior by setting <code class="language-plaintext highlighter-rouge">lower.tail</code> to <code class="language-plaintext highlighter-rouge">FALSE</code>.</p>

<p><br /></p>

<p>For instance, if we would like to calculate the probability of finding a province with infant mortality lower than or equal to 21, then our first argument is 21. The second argument is the mean, and the third is the standard deviation. Below we also plot the density curve that highlights the area under the curve within the interval of interest.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-9')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-10-9">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_density</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">bw</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">27</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.13</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span><span class="w">

</span><span class="n">pnorm</span><span class="p">(</span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="m">19.94</span><span class="p">,</span><span class="w"> </span><span class="m">2.91</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_06.png" alt="Density Curve with a portion of its area highlighted" /></p>

<p><br /></p>

<p>The probability of finding a province with infant mortality lower than or equal to 21 is represented by the unshaded red area and is 64.2%.</p>

<p><br /></p>

<p>To find the probability of a value between 19 and 21, we have to subtract the probability of infant mortality lower than or equal to 19 from the 64.2%, as depicted in the plot below.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-10')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-10-10">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Infant.Mortality</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_density</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> </span><span class="n">bw</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Infant Mortality"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">27</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.13</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">19</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.13</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span><span class="w">

</span><span class="n">pnorm</span><span class="p">(</span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="m">19.94</span><span class="p">,</span><span class="w"> </span><span class="m">2.91</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">pnorm</span><span class="p">(</span><span class="m">19</span><span class="p">,</span><span class="w"> </span><span class="m">19.94</span><span class="p">,</span><span class="w"> </span><span class="m">2.91</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_10_07.png" alt="Density Curve with interval of interest highlighted" /></p>

<p><br /></p>

<p>According to <code class="language-plaintext highlighter-rouge">pnorm</code>, the probability of finding a province with infant mortality between 19 and 21 is 26.9%, very close to our rectangle area approximation (26%).</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-z-score-probability-in-r">6. Z-score probability in R</h2>

<p>You can also use <code class="language-plaintext highlighter-rouge">pnorm</code> to calculate probabilities with Z-scores. In this case, you only pass the z-score to the function. For example, let us calculate the probability that a province has infant mortality lower than or equal to 21. First, 21 corresponds to a z-score of (21-19.94)/2.91, or 0.36. Now we can pass this z-score to the function <code class="language-plaintext highlighter-rouge">pnorm(0.36)</code> to obtain the probability of 64.2%, as we had already calculated above!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-testing-normality-with-a-shapiro-wilk-test">7. Testing normality with a Shapiro-Wilk test</h2>

<p>The Shapiro-Wilk test is a statistical test that can be used to test the normality of a sample. The test gives us a p-value. If the p-value is less than 0.05, then the distribution in question is significantly different from a normal distribution. Otherwise, we can consider that the distribution is normal. Below we test the normality of our variable.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-10-11')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-10-11">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">shapiro.test</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Infant.Mortality</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The Shapiro-Wilk test results in a p-value of 0.4978 which is greater than 0.05. Therefore, we can consider that the distribution of infant mortality in the Swiss provinces is normal.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>The normal distribution manifests in numerous natural and social phenomena and is characterized by the following aspects:
    <ul>
      <li>approximately 95% of all observations of the data fall within 2 standard deviations from the mean;</li>
      <li>when visualized with a histogram, it forms a symmetrical bell-shaped curve;</li>
      <li>three important measures of central tendency coincide: the mean, the mode, and the median;</li>
    </ul>
  </li>
  <li>The <code class="language-plaintext highlighter-rouge">rnorm</code> function generates normally distributed data in R;</li>
  <li>The area under the density curve gives us the probability that a certain range of values occurs;</li>
  <li>The <code class="language-plaintext highlighter-rouge">pnorm</code> function calculates the probability of an interval of values occurring in a normal distribution;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="ggplot2" /><summary type="html"><![CDATA[Discover the essence of the normal distribution in R. Dive deep into histograms, density plots, and the Swiss dataset to understand Gaussian distributions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_10.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_10.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to calculate and visualize Z scores in R</title><link href="http://localhost:4000/2023/05/15/Z-score-in-R.html" rel="alternate" type="text/html" title="How to calculate and visualize Z scores in R" /><published>2023-05-15T00:00:00-03:00</published><updated>2023-05-15T00:00:00-03:00</updated><id>http://localhost:4000/2023/05/15/Z-score-in-R</id><content type="html" xml:base="http://localhost:4000/2023/05/15/Z-score-in-R.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“We don’t need no education.”</p>

<p>Pink Floyd</p>

<p><br /></p>

<p>In this lesson we will use data of the General Social Survey (1972-1978) to study American society in the seventies. In particular, we would like to study schooling duration for individuals in our sample and how specific observations compare to the rest of the sample. To do so, we will use the Z score - a measure of how many standard deviations below or above the population mean an observation is.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is included in the <a href="https://cran.r-project.org/web/packages/survival/index.html">R Survival Package</a> and was originally used in Logan (1983) - <em>A Multivariate Model for Mobility Tables</em>. The data is part of the <a href="https://gss.norc.org/">General Social Survey</a> (1972-1978).</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-z-score-in-r">Coding the past: Z score in R</h1>

<p><br /></p>

<h2 id="1-what-is-the-z-score">1. What is the Z score?</h2>

<p>The Z score is a measure of how many standard deviations a data point in a set is away from the mean of that set of values. Below you find the expression to calculate the Z score of a given point in a sample.</p>

\[Z_{X} = \frac{X - \overline{X}}{S}\]

<p>Where:</p>

<ul class="conclusion-list">
  <li>\(Z_{X}\) is the Z score of the point \(X\);</li>
  <li>\(X\) is the value for which we want to calculate the Z score;</li>
  <li>\(\overline{X}\) is the mean of the sample;</li>
  <li>\(S\) is the standard deviation of the sample.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-calculating-z-score-in-r">2. Calculating Z score in R</h2>

<p>Implementing the Z score formula in R is quite straightforward. To reuse code, we will create a function called <code class="language-plaintext highlighter-rouge">calculate_z</code> using the <code class="language-plaintext highlighter-rouge">mean</code> and <code class="language-plaintext highlighter-rouge">sd</code> base functions to calculate Z. <code class="language-plaintext highlighter-rouge">sd</code> calculates the standard deviation in R.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">calculate_z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="w"> </span><span class="n">X_mean</span><span class="p">,</span><span class="w"> </span><span class="n">S</span><span class="p">){</span><span class="w">
  </span><span class="nf">return</span><span class="p">((</span><span class="n">X</span><span class="o">-</span><span class="n">X_mean</span><span class="p">)</span><span class="o">/</span><span class="n">S</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>


</div>

<p><br /></p>

<p>To load the data, we will use the <code class="language-plaintext highlighter-rouge">data</code> function and specify the <code class="language-plaintext highlighter-rouge">survival</code> package. The dataset we are interested in is called <code class="language-plaintext highlighter-rouge">logan</code> and contains information about the duration of education for 838 individuals. The variable <code class="language-plaintext highlighter-rouge">education</code> contains the number of years of schooling for each individual.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">survival</span><span class="p">)</span><span class="w">

</span><span class="n">data</span><span class="p">(</span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="n">package</span><span class="o">=</span><span class="s2">"survival"</span><span class="p">)</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">)</span><span class="w">

</span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>The average education duration in our sample is 13.58 years, with a standard deviation of 2.73 years. With this information, we can proceed to calculate the Z score for each observation in the dataset.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">logan</span><span class="o">$</span><span class="n">z_score</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calculate_z</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> 
                             </span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
                             </span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">))</span><span class="w">

</span><span class="n">head</span><span class="p">(</span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<table class="dataframe">
<tr> <th>occupation</th> <th>focc</th> <th> education </th> <th> race </th> <th> z_score </th>  </tr>
  <tr>  <td> sales </td> <td>professional</td> <td>4</td> <td> non-black </td> <td> 0.15 </td> </tr>
  <tr>  <td> craftsmen </td> <td>sales</td> <td>13</td> <td> non-black </td> <td> -0.21 </td> </tr>
  <tr>  <td> sales </td> <td>professional</td> <td>16</td> <td> non-black </td> <td> 0.89 </td> </tr>
  <tr>  <td> craftsmen </td> <td>sales</td> <td>16</td> <td> non-black </td> <td> 0.89 </td> </tr>
  <tr>  <td> operatives </td> <td>professional</td> <td>14</td> <td> non-black </td> <td> 0.15 </td> </tr>
</table>

<p><br /></p>

<p>As you can see in the dataframe, the first individual spent 0.15 standard deviations more time in school compared to the average. A negative Z score indicates that the observation is below the average, while a positive Z score indicates that it is above the average.</p>

<p><br /></p>

<p>Use <code class="language-plaintext highlighter-rouge">summary(logan$z_score)</code> to check the Z score summary statistics. You will observe that the individual with the shortest education duration in our dataset has a schooling period that is 4.23 standard deviations below the mean. Conversely, the individual with the longest schooling duration is 2.35 standard deviations above the average.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-visualizing-z-scores-in-a-histogram">3. Visualizing Z scores in a histogram</h2>

<p>One way to visually represent our data is by using a histogram. It shows how often each different value occurs. The x-axis represents the variable values, while the y-axis represents the count of occurrences for each value in our sample.</p>

<p><br /></p>

<p>You can plot a histogram in ggplot2 with the geom layer called <code class="language-plaintext highlighter-rouge">geom_histogram()</code>. It has the argument bins where you can pass the number of intervals you would like to divide your data, that is, how many bars you will have.</p>

<p><br /></p>

<p>In the plot below, the white dashed lines indicate the interval of two standard deviations (Z=+/-2) around the mean. Similarly, the yellow dashed lines represent the interval of three standard deviations (Z=+/-3) around the mean. These lines are added with the <code class="language-plaintext highlighter-rouge">geom_vline()</code> function.</p>

<p><br /></p>

<p>To customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization’</a>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-9-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-9-4">


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">theme_coding_the_past</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
        </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s2">"#2E3031"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
        </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
        </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Eliminates grids:</span><span class="w">
        </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
        </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
        </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">mean_edu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">sd_edu</span><span class="w">   </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sd</span><span class="p">(</span><span class="n">logan</span><span class="o">$</span><span class="n">education</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">


</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">logan</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">education</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> 
                </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#FF6885"</span><span class="p">,</span><span class="w"> 
                </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.6</span><span class="p">,</span><span class="w"> 
                </span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">15</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Count"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s2">"Years of education"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">   
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">2</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">   
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">,</span><span class="w"> 
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_edu</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="n">sd_edu</span><span class="p">,</span><span class="w"> 
             </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">,</span><span class="w"> 
             </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4.5</span><span class="p">,</span><span class="w">  </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=-3"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w">   </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=3"</span><span class="p">,</span><span class="w">  </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#feb24c"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7.3</span><span class="p">,</span><span class="w">  </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=-2"</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"text"</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">18.3</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> 
            </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Z=2"</span><span class="p">,</span><span class="w">  </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_coding_the_past</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_09_01.png" alt="Histogram to visualize Z scores in R" /></p>

<p><br /></p>

<p>One remarkable conclusion we draw from the plot above is that the majority of data points fall within a range of up to two standard deviations from the mean. In fact, only 4.4% of our observations exceed this threshold of two standard deviations. Note as well that there are 15 bars in the histogram, which is the number of bins we specified in the <code class="language-plaintext highlighter-rouge">geom_histogram()</code> function.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-skewness-of-the-distribution">4. Skewness of the distribution</h2>

<p>Skewness refers to the asymmetry of a distribution. The distribution of education duration is skewed to the left. This means there are more individuals with a very low education duration compared to those with a very large duration. This can also be seen by the minimum and maximum Z score. While the minimum is -4.23, the maximum is only 2.35. Extreme Z-scores are also indicators of outliers, that is, values unusually high or low compared to most of the observations.</p>

<p><br /></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> To know more about z scores and distributions , check
        
        <a href="https://soc.utah.edu/sociology3112/normal-distribution.php" target="_blank"> this page of the University of Utah.</a>
        
    </div>
</div>

<p><br /></p>

<p>In the next lesson, we will explore a specific type of distribution known as the normal distribution. This distribution is symmetric and has certain properties that make it easier to analyze.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>The Z score is a measure of how many standard deviations a data point is away from the mean. It can be easily calculated in R;</li>
  <li>ggplot2 can be used to visualize the different Z scores in a distribution;</li>
  <li>Extreme Z-scores might indicate outliers or skewed distributions;</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="statistics" /><category term="ggplot2" /><summary type="html"><![CDATA[Master statistics by learning how to calculate and visualize Z scores in R. Learn data visualization techniques and enhance your statistical analysis skills!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_09.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_09.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Understand TF-IDF in Python</title><link href="http://localhost:4000/2023/04/26/Text-Mining-in-Python.html" rel="alternate" type="text/html" title="Understand TF-IDF in Python" /><published>2023-04-26T00:00:00-03:00</published><updated>2023-07-04T00:00:00-03:00</updated><id>http://localhost:4000/2023/04/26/Text-Mining-in-Python</id><content type="html" xml:base="http://localhost:4000/2023/04/26/Text-Mining-in-Python.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Changes are shifting outside the words.”</p>

<p>Annie Lennox</p>

<p><br /></p>

<p>In the <a href="/2023/04/02/Text-Analysis-1.html">Text Data Visualization</a> lesson we learned how to use term frequency to identify the most frequent words in a document. Nevertheless, this methodology focuses only on the prevalence of individual terms within a single document, neglecting the term’s occurrence across other documents within the corpus. As a countermeasure to this shortcoming, TF-IDF was introduced. TF-IDF stands for Term Frequency - Inverse Document Frequency. This numerical statistic serves to underscore the significance of a word within a document, relative to a broader collection or corpus. In this lesson, we’ll journey through the process of calculating TF-IDF scores and bring those abstract numbers to life through Python-based visualizations.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The data used in this lesson is available on the <a href="https://ota.bodleian.ox.ac.uk/repository/xmlui/handle/20.500.12024/2021" target="_blank">Oxford Text Archive</a>  website. It consists of a collection of pamphlets published between 1750 and 1776 by influential authors in the British colonies. These pieces depict the debate with England over constitutional rights, showing the colonists’ understanding of their contemporary events and the conditions that precipitated the American Revolution. In this lesson, we will focus on the pamphlets of Oxenbridge Thacher, James Otis, and James Mayhew. To know more about textual data sources, check this post: <a href="/2023/01/10/Where-to-find-and-how-to-load-historical-data.html">‘Where to find and how to load historical data’</a></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-identifying-relevant-words-in-historical-documents">Coding the past: identifying relevant words in historical documents</h1>

<p><br /></p>

<h2 id="1-tf-idf-formula">1. TF-IDF formula</h2>

<p><br /></p>

<p>TF-IDF (Term Frequency-Inverse Document Frequency) is a numerical measure that indicates the importance of a word in a document taking into account how frequent the word is in other documents in the same corpus. It consists of multiplying the term frequency (TF) by the inverse document frequency (IDF), which is the logarithm of the total number of documents divided by the number of documents containing the term. The formula is as follows:</p>

<p><br /></p>

\[w_{ij} = tf_{ij} * log(\frac{N}{df_i})\]

<p><br /></p>

<p>Where:</p>

<ul class="conclusion-list">
  <li>\(w_{ij}\) is the tf-idf weight for word \(i\) in document \(j\);</li>
  <li>\(tf_{ij}\) is the number of times word \(i\) appears in document \(j\) divided by the total number of words in document \(j\);</li>
  <li>\(N\) is the total number of documents in the corpus;</li>
  <li>\(df_i\) is the number of documents in the corpus that contain word \(i\).</li>
</ul>

<p><br /></p>

<h2 id="2-tf-idf-calculation-example">2. TF-IDF calculation example</h2>

<p>Suppose you want to calculate the TF-IDF weight for the word “British”, which appears 5 times in a document containing 100 words. Given a corpus containing 4 documents, with 2 documents mentioning the word “British”, TF-IDF can be calculated by:</p>

\[w_{British} = \frac{5}{100} * log(\frac{4}{2}) = 0.015\]

<p><br /></p>

<p>TF-IDF increases as the term frequency increases, but it decreases as the number of times the word appears in other documents in the corpus increases. Variations of the TF-IDF weighting scheme are often used by search engines as a central tool in scoring and ranking a document’s relevance given a user query.</p>

<p><br /></p>

<h2 id="3-preprocessing-text-data-in-python">3. Preprocessing text data in Python</h2>

<p><br /></p>

<p>We will be using the same functions from the lesson <a href="/2023/04/02/Text-Analysis-1.html">Visualizing Text Data</a> to preprocess the text data. The functions are:</p>

<ul class="conclusion-list">
  <li><code class="language-plaintext highlighter-rouge">load_text</code>: loads the text from a <em>txt</em> file and returns a list of words;</li>
  <li><code class="language-plaintext highlighter-rouge">prepare_text</code>: preprocesses the text by removing stopwords, removing words with less than 3 characters, and transforming all words to lower case;</li>
  <li><code class="language-plaintext highlighter-rouge">count_freq</code>: counts the frequency of each word in the the document and returns a dataframe with the results.</li>
</ul>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>
<span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">load_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span> <span class="s">"latin-1"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">islice</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="n">my_text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="p">[</span><span class="n">word_tokenize</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">my_text</span><span class="p">]</span>
    <span class="n">flat_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">my_text</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">flat_list</span>

<span class="k">def</span> <span class="nf">prepare_text</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">):</span>
  <span class="c1">#load stopwords:
</span>  <span class="n">stops</span> <span class="o">=</span> <span class="n">stopwords</span><span class="p">.</span><span class="n">words</span><span class="p">(</span><span class="s">'english'</span><span class="p">)</span>
  <span class="c1">#transform all word characters to lower case:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span><span class="p">]</span>
  <span class="c1">#remove all words containing up to two characters:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
  <span class="c1">#remove stopwords:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
  <span class="k">return</span> <span class="n">list_of_words</span>

<span class="k">def</span> <span class="nf">count_freq</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="n">unique_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># create a list of unique words:
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">item</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span> 
        <span class="n">unique_words</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="c1"># count the frequency of each word:
</span>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">counts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>

    <span class="c1"># create a dataframe with the words and their frequencies:
</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"word"</span><span class="p">:</span> <span class="n">unique_words</span><span class="p">,</span> <span class="s">"count"</span><span class="p">:</span> <span class="n">counts</span><span class="p">})</span>
    <span class="n">df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">"count"</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span></code></pre></figure>


</div>

<p><br /></p>

<p>After loading the functions above, we can use them to preprocess the text data.</p>

<p><br /></p>

<p>Now we load the manifests of three authors: Oxenbridge Thacher, James Otis, and James Mayhew. The results are stored in three lists called <code class="language-plaintext highlighter-rouge">thacher</code>, <code class="language-plaintext highlighter-rouge">otis</code>, and <code class="language-plaintext highlighter-rouge">mayhew</code>. After that, we preprocess the text data using the function <code class="language-plaintext highlighter-rouge">prepare_text</code> and count the frequency of each word in each document using the function <code class="language-plaintext highlighter-rouge">count_freq</code>. Results are stored in three dataframes called <code class="language-plaintext highlighter-rouge">thacher_df</code>, <code class="language-plaintext highlighter-rouge">otis_df</code>, and <code class="language-plaintext highlighter-rouge">mayhew_df</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'thacher-2021.txt'</span><span class="p">)</span>
<span class="n">otis</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'otis-2021.txt'</span><span class="p">)</span>
<span class="n">mayhew</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'mayhew2-2021.txt'</span><span class="p">)</span>

<span class="n">thacher_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">thacher</span><span class="p">)</span>
<span class="n">otis_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">otis</span><span class="p">)</span>
<span class="n">mayhew_prepared</span> <span class="o">=</span> <span class="n">prepare_text</span><span class="p">(</span><span class="n">mayhew</span><span class="p">)</span>

<span class="n">thacher_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">thacher_prepared</span><span class="p">)</span>
<span class="n">otis_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">otis_prepared</span><span class="p">)</span>
<span class="n">mayhew_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">mayhew_prepared</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-calculating-term-frequencies-for-each-document">3. Calculating term frequencies for each document</h2>

<p><br /></p>

<p>As we have seen, the first component to calculate the TF-IDF weight is the term frequency. We can calculate the term frequency for each document by dividing the number of times a word appears in the document by the total number of words in it.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">otis_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">mayhew_df</span><span class="p">[</span><span class="s">"TF"</span><span class="p">]</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-calculating-how-many-times-a-word-appears-in-each-document-in-the-corpus">4. Calculating how many times a word appears in each document in the corpus</h2>

<p><br /></p>

<p>To calculate \(df_i\), we will left join all our dataframes. Then, for each row (word) we will sum the number of times its term frequency is greater than zero. In other words, we will count in how many documents the word appears at least once. This value will vary from 1 to 3, since we have three documents in our corpus. This count can be made with the pandas method <code class="language-plaintext highlighter-rouge">ne()</code> that checks if the values in the columns specified are not equal (ne) to zero. The results are booleans that can be summed to get the number of documents in which the word appears.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-4">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#left join all dataframes:
</span><span class="n">thacher_otis</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">otis_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]],</span> 
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span> 
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span> 
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_otis"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">thacher_otis_may</span> <span class="o">=</span> <span class="n">thacher_otis</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">mayhew_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF"</span><span class="p">]],</span>
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span>
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">#rename TF column to TF_mayhew:
</span><span class="n">thacher_otis_may</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">"TF"</span><span class="p">:</span> <span class="s">"TF_mayhew"</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1">#count in how many documents each word appears:
</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"TF_thacher"</span><span class="p">,</span> <span class="s">"TF_otis"</span><span class="p">,</span> <span class="s">"TF_mayhew"</span><span class="p">]].</span><span class="n">ne</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-tf-idf-calculation">5. TF-IDF calculation</h2>

<p><br /></p>

<p>Finally we have all elements to calculate the TF-IDF weight. Note that we will be using base 10 logarithms. To calculate the logarithm, we can use the library <code class="language-plaintext highlighter-rouge">math</code> and its method <code class="language-plaintext highlighter-rouge">log10()</code>. We use the <code class="language-plaintext highlighter-rouge">apply()</code> method to apply the logarithm to each row of <em>dfi</em> and then multiply it by the term frequency. The results are stored in three new columns called <code class="language-plaintext highlighter-rouge">TF-IDF_thacher</code>, <code class="language-plaintext highlighter-rouge">TF-IDF_otis</code>, and <code class="language-plaintext highlighter-rouge">TF-IDF_mayhew</code>. Note that <em>dfi</em> varies from 1 to 3, so when the word appears in all three documents, the logarithm element will be zero and consequently TF-IDF  will be zero as well (\(log_{10} 1 = 0\)).
<br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">math</span>

<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_thacher"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_thacher"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_otis"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_otis"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span>
<span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF-IDF_mayhew"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"TF_mayhew"</span><span class="p">]</span> <span class="o">*</span> <span class="n">thacher_otis_may</span><span class="p">[</span><span class="s">"dfi"</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="n">x</span><span class="p">))</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-tf-idf-visualization">5. TF-IDF Visualization</h2>

<p><br /></p>

<p>Now we can compare how the two methods define the 10 most important words in each document. Keep in mind that the term frequency does not account for the words in other documents of the corpus while TF-IDF does. TF logic is that the most important words are the ones that appear the most in the document. TF-IDF logic is that the most important words are the ones that appear the most in the document but not in the other documents of the corpus. TF-IDF is more sophisticated because it helps you to distinguish one document from the others.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#create 2 dataframes with the top 10 words for each method:
</span>
<span class="n">TF_IDF_thacher</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_thacher"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_thacher"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_thacher</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_thacher"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_thacher"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1">#plot:
</span>
<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1">#barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_thacher</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_thacher</span><span class="p">[</span><span class="s">"TF_thacher"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_thacher</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_thacher</span><span class="p">[</span><span class="s">"TF-IDF_thacher"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1">#title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher TF-IDF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.002</span><span class="p">,</span> <span class="mf">0.003</span><span class="p">])</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1">#fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1">#layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_01.png" alt="Comparison TF vs TF-IDF: Thacher" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-8-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TF_IDF_otis</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_otis"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_otis"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_otis</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_otis"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_otis"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1"># barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_otis</span><span class="p">[</span><span class="s">"TF_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_otis</span><span class="p">[</span><span class="s">"TF-IDF_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis TF-IDF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.0005</span><span class="p">,</span> <span class="mf">0.0010</span><span class="p">,</span> <span class="mf">0.0015</span><span class="p">])</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_02.png" alt="Comparison TF vs TF-IDF: Otis" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-8-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-8-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">TF_IDF_mayhew</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF-IDF_mayhew"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF-IDF_mayhew"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">TF_mayhew</span> <span class="o">=</span> <span class="n">thacher_otis_may</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"TF_mayhew"</span><span class="p">]].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">"TF_mayhew"</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="c1"># barplot:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_mayhew</span><span class="p">[</span><span class="s">"TF_mayhew"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">TF_IDF_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">TF_IDF_mayhew</span><span class="p">[</span><span class="s">"TF-IDF_mayhew"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew TF"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew TF-IDF"</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             <span class="c1"># iterate over ax1, ax2, ax3 to: 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           <span class="c1"># invert the y axis; 
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              <span class="c1"># eliminate grid;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 <span class="c1"># set title font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set x axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    <span class="c1"># set y axis font color to white;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 <span class="c1"># set ax background color to #2E3031;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         <span class="c1"># eliminate spines;
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">'bottom'</span><span class="p">].</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_08_03.png" alt="Comparison TF vs TF-IDF: Otis" /></p>

<p><br /></p>

<p>Please note that common words in the corpus, such as “Britain” and “government,” simply do not appear in the top 10 chart because they are present in all three documents. The intuition behind this is that these words are so common in the corpus that they do not provide much useful information. The top 10 words found with TF-IDF have a stronger explanatory power in distinguishing between the three authors. Furthermore, despite being present in two documents, the word “colonies” continues to have a strong TF-IDF score. This is because the word is not present in all three documents, and it is very common in the two documents where it appears.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>TF-IDF depends on two factors: the frequency of a word in a document, and the inverse frequency of the word in the corpus;</li>
  <li>It is possible to calculate TF-IDF scores from scratch in Python, which helps you to understand the logic behind the calculation;</li>
  <li>TF-IDF is a useful tool when you want to identify words that are specific to a particular document.</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="matplotlib" /><category term="textanalysis" /><summary type="html"><![CDATA[Learn TF-IDF formula and how to calculate it in Python. Plot the results to better understand the differences between TF and TF-IDF.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_08.jpg" /><media:content medium="image" url="http://localhost:4000/lesson_08.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Text Data Visualization</title><link href="http://localhost:4000/2023/04/02/Text-Analysis-1.html" rel="alternate" type="text/html" title="Text Data Visualization" /><published>2023-04-02T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/04/02/Text-Analysis-1</id><content type="html" xml:base="http://localhost:4000/2023/04/02/Text-Analysis-1.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p>“Words have no power to impress the mind without the exquisite horror of their reality.”</p>

<p>Edgar Allan Poe</p>

<p><br /></p>

<p>Have you ever found yourself submerged in text data, your eyes scanning countless words as you try to extract meaningful insights for your research? Text data visualization could be the solution you’re seeking. In our modern world, textual data, be it from historical documents or the latest tweets, has become a deep well of knowledge just waiting to be discovered.</p>

<p><br /></p>

<p>Whether you’re tracing societal trends over time or studying the latest social media topics, analyzing and visualizing text data can be a gold mine. In this lesson, we’ll guide you on how to navigate this rich universe of words. Harnessing the strength of <a href="https://www.nltk.org/" target="_blank">Natural Language Toolkit (NLTK)</a> and the <a href="https://matplotlib.org/" target="_blank">Matplotlib</a> library, we’ll delve into strategies for text data visualization and analysis, illuminating new angles for your research.”</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>The data used in this lesson is available on the <a href="https://ota.bodleian.ox.ac.uk/repository/xmlui/handle/20.500.12024/2021" target="_blank">Oxford Text Archive</a>  website. It consists of a collection of pamphlets published between 1750 and 1776 by influential authors in the British colonies. These pieces depict the debate with England over constitutional rights, showing the colonists’ understanding of their contemporary events and the conditions that precipitated the American Revolution. In this lesson, we will focus on the pamphlets of Oxenbridge Thacher, James Otis, and James Mayhew. To know more about textual data sources, check this post: <a href="/2023/01/10/Where-to-find-and-how-to-load-historical-data.html">‘Where to find and how to load historical data’</a></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-text-data-visualization">Coding the past: text data visualization</h1>

<h2 id="1-import-text-file-into-python">1. Import text file into python</h2>

<p><br /></p>

<p>To load text files in Python and reuse our code, we can build a function. Before we start to write the function, all libraries necessary for this lesson will be loaded.</p>

<p><br /></p>

<p>Using the <code class="language-plaintext highlighter-rouge">with</code> statement will ensure that the opened file is closed when the block inside it is finished. Note that we use “latin-1” encoding. The function <code class="language-plaintext highlighter-rouge">islice()</code> creates an iterable object and a for loop is used to slice the file into chunks (lines). Each line is appended to the list <code class="language-plaintext highlighter-rouge">my_text</code>.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">word_tokenize</code> is a function from the NLTK library that splits a sentence into words. All the sentences are then split into words and stored in a list. Note that the list needs to be flattened into a single list, since the tokenizer returns a list of lists. This is done with a list comprehension.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
<span class="kn">from</span> <span class="nn">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span>
<span class="n">nltk</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="s">'stopwords'</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">load_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span> <span class="s">"latin-1"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">islice</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="n">my_text</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
    <span class="n">my_text</span> <span class="o">=</span> <span class="p">[</span><span class="n">word_tokenize</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">my_text</span><span class="p">]</span>
    <span class="n">flat_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">my_text</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">flat_list</span></code></pre></figure>


</div>

<p><br /></p>

<p>Now we load the manifests of three authors: Oxenbridge Thacher, James Otis, and James Mayhew. The results are stored in three lists called <code class="language-plaintext highlighter-rouge">thacher</code>, <code class="language-plaintext highlighter-rouge">otis</code>, and <code class="language-plaintext highlighter-rouge">mayhew</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'thacher-2021.txt'</span><span class="p">)</span>
<span class="n">otis</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'otis-2021.txt'</span><span class="p">)</span>
<span class="n">mayhew</span> <span class="o">=</span> <span class="n">load_text</span><span class="p">(</span><span class="s">'mayhew2-2021.txt'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>If you check the length of the lists, you will see that Oxenbridge Thacher’s manifest has approximately 4,156 words; James Mayhew, 18,969 words; and James Otis, 34,031 words.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-understand-nltk-stopwords">2. Understand nltk stopwords</h2>

<p><br /></p>

<p>In this function, we will use NLTK stopwords to remove all words that do not add any meaning to our analysis. Moreover, we transform all characters to lowercase and remove all words containing two or fewer characters.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">prepare_text</span><span class="p">(</span><span class="n">list_of_words</span><span class="p">):</span>
  <span class="c1">#load stopwords:
</span>  <span class="n">stops</span> <span class="o">=</span> <span class="n">stopwords</span><span class="p">.</span><span class="n">words</span><span class="p">(</span><span class="s">'english'</span><span class="p">)</span>
  <span class="c1">#transform all word characters to lower case:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span><span class="p">]</span>
  <span class="c1">#remove all words containing up to two characters:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">]</span>
  <span class="c1">#remove stopwords:
</span>  <span class="n">list_of_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">list_of_words</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
  <span class="k">return</span> <span class="n">list_of_words</span></code></pre></figure>


</div>

<p><br /></p>

<p>We apply the function to the three lists of words. After the cleaning process, the number of words is reduced to less than 50% of the original size.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-4">

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">thacher_prepared = prepare_text(thacher)
otis_prepared = prepare_text(otis)
mayhew_prepared = prepare_text(mayhew)</code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-word-counter-in-python">3. Word counter in python</h2>

<p><br /></p>

<p>The function below counts the frequency of each word and returns a dataframe with the words and their frequencies, sorted by the frequency.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">count_freq</span><span class="p">(</span><span class="n">my_list</span><span class="p">):</span>
    <span class="n">unique_words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># create a list of unique words:
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">item</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span> 
        <span class="n">unique_words</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="c1"># count the frequency of each word:
</span>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">unique_words</span><span class="p">:</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
          <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">counts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="c1"># create a dataframe with the words and their frequencies:
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"word"</span><span class="p">:</span> <span class="n">unique_words</span><span class="p">,</span> <span class="s">"count"</span><span class="p">:</span> <span class="n">counts</span><span class="p">})</span>
    <span class="n">df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">"count"</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="n">thacher_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">thacher_prepared</span><span class="p">)</span>
<span class="n">otis_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">otis_prepared</span><span class="p">)</span>
<span class="n">mayhew_df</span> <span class="o">=</span> <span class="n">count_freq</span><span class="p">(</span><span class="n">mayhew_prepared</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-word-count-visualization">4. Word count visualization</h2>

<p><br /></p>

<p>We will use the <code class="language-plaintext highlighter-rouge">matplotlib</code> library to create a bar plot with the 10 most frequent words in each manifest. We use <code class="language-plaintext highlighter-rouge">iloc</code> to select the first 10 rows of each dataframe. <code class="language-plaintext highlighter-rouge">barh</code> creates a horizontal bar plot where the words are on the y-axis and the frequency on the x-axis. After that, we set the title of each plot and perform a series of adjustments to the plot, including the elimination of the grid, the removal of part of the frame, and the change in font and background colors. Finally we also use the tight layout function to adjust the spacing between the plots.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_10</span> <span class="o">=</span><span class="n">thacher_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>
<span class="n">otis_10</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>
<span class="n">mayhew_10</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="mi">10</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>

<span class="c1"># horizontal barplot:
</span>
<span class="n">ax1</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">thacher_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">thacher_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">)</span>

<span class="n">ax2</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">otis_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">otis_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#386cb0"</span><span class="p">)</span>

<span class="n">ax3</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">mayhew_10</span><span class="p">[</span><span class="s">"word"</span><span class="p">],</span> <span class="n">mayhew_10</span><span class="p">[</span><span class="s">"count"</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"#fdb462"</span><span class="p">,</span> 
        <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">"#fdb462"</span><span class="p">)</span>

<span class="c1"># title:
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Otis"</span><span class="p">)</span>
<span class="n">ax3</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Mayhew"</span><span class="p">)</span>

<span class="c1"># iterate over ax1, ax2, ax3 to: 
# invert the y axis;
# eliminate grid;
# set fonts and background colors;
# eliminate spines;
</span><span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">fig</span><span class="p">.</span><span class="n">axes</span><span class="p">:</span>                             
    <span class="n">ax</span><span class="p">.</span><span class="n">invert_yaxis</span><span class="p">()</span>                           
    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>                              
    <span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>                 
    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    
    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>    
    <span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>                 
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>         
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"left"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>
<span class="c1"># layout:
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_07_01.png" alt="plot of the most frequent words in each manifest" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-calculate-the-proportion-of-each-word-and-comparing-the-manifests">5. Calculate the proportion of each word and comparing the manifests</h2>

<p><br />
Finally, we calculate the proportion of each word in each manifest relative to the total number of words in that document and store them in a new column called “proportion”. We also create two new data frames, one for each pair of manifests: one to compare Thacher and Otis, and the other to compare Thacher and Mayhew. This is done by an outer join, using the <code class="language-plaintext highlighter-rouge">word</code> column as the key. This operation keeps all the words, even the ones that are not included in both datasets, and fills the missing values with 0.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">thacher_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">thacher_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">otis_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">otis_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>
<span class="n">mayhew_df</span><span class="p">[</span><span class="s">"proportion"</span><span class="p">]</span> <span class="o">=</span> <span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">mayhew_df</span><span class="p">[</span><span class="s">"count"</span><span class="p">])</span>

<span class="n">thacher_otis</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">otis_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]],</span> 
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span> 
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span> 
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_otis"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">thacher_mayhew</span> <span class="o">=</span> <span class="n">thacher_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]].</span><span class="n">merge</span><span class="p">(</span>
    <span class="n">mayhew_df</span><span class="p">[[</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"proportion"</span><span class="p">]],</span>
    <span class="n">on</span> <span class="o">=</span> <span class="s">"word"</span><span class="p">,</span>
    <span class="n">how</span> <span class="o">=</span> <span class="s">"outer"</span><span class="p">,</span>
    <span class="n">suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_thacher"</span><span class="p">,</span> <span class="s">"_mayhew"</span><span class="p">)).</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p>Now we will compare the three manifests by plotting the proportion of each word in Thacher on the x-axis and the proportion of the same word in Otis on the y-axis. We will use the <code class="language-plaintext highlighter-rouge">scatter</code> function to create a scatter plot in which the coordinates are the frequencies of a given word in Thacher and Otis. We will also use the <code class="language-plaintext highlighter-rouge">annotate</code> function to label each point with the word. The same procedure will be used to compare Thacher and Mayhew. Note that the more similar the manifests, the more points will be concentrated in the diagonal line (same frequency in both manifests).</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>
<div id="code-7-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="c1"># scatterplot:
</span><span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">],</span> <span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_otis"</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># annotate words:
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"word"</span><span class="p">]):</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">txt</span><span class="p">,</span> 
                <span class="p">(</span><span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> 
                 <span class="n">thacher_otis</span><span class="p">[</span><span class="s">"proportion_otis"</span><span class="p">][</span><span class="n">i</span><span class="p">]),</span> 
                 <span class="n">color</span> <span class="o">=</span> <span class="s">"white"</span><span class="p">,</span> 
                 <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">)</span>
    
<span class="c1"># eliminate grid:
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># x axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>

<span class="c1"># y axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"Otis"</span><span class="p">)</span>

<span class="c1"># diagonal dashed line:
</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.012</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"gray"</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">"--"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># ax background color:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># x and y axes labels font color to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>


<span class="c1"># ax font colors set to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># set spines to false:
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_07_02.png" alt="Word frequency scatterplot: Thacher vs Otis" /></p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-7-9')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-7-9">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># plot scatterplot with words:
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">],</span> 
           <span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_mayhew"</span><span class="p">],</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="s">"#f0027f"</span><span class="p">,</span> 
           <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">txt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"word"</span><span class="p">]):</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">txt</span><span class="p">,</span> <span class="p">(</span><span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_thacher"</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> 
                      <span class="n">thacher_mayhew</span><span class="p">[</span><span class="s">"proportion_mayhew"</span><span class="p">][</span><span class="n">i</span><span class="p">]),</span> 
                      <span class="n">color</span> <span class="o">=</span> <span class="s">"white"</span><span class="p">,</span> 
                      <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">)</span>
<span class="c1"># eliminate grid:
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="c1"># x axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Thacher"</span><span class="p">)</span>
<span class="c1"># y axis label:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"Mayhew"</span><span class="p">)</span>
<span class="c1"># diagonal dashed line:
</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.012</span><span class="p">],</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="s">"gray"</span><span class="p">,</span> 
        <span class="n">linestyle</span> <span class="o">=</span> <span class="s">"--"</span><span class="p">)</span>

<span class="c1"># fig background color:
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># ax background color:
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'#2E3031'</span><span class="p">)</span>

<span class="c1"># x and y axes labels font color to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'white'</span><span class="p">)</span>


<span class="c1"># ax font colors set to white:
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>

<span class="c1"># set spines to false:
</span><span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"top"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="s">"right"</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_07_03.png" alt="Word frequency scatterplot: Thacher vs Mayhew" /></p>

<p><br /></p>

<p>This text data visualization highlights the fact that Thacher and Otis are more similar than Thacher and Mayhew. This is reflected in the scatterplot, where the points are more concentrated in the diagonal line in the plot relating Thacher and Otis compared to the one relating Thacher and Mayhew. This is a simple way to compare the similarity of two texts. We know, for example, that, while Thacher talks a lot about “colonies”, Mayhew talks a lot about “god”.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<p><br /></p>

<ul class="conclusion-list">
  <li>You can tokenize text data with the NLTK library method <code class="language-plaintext highlighter-rouge">word_tokenize</code>;</li>
  <li>With list comprehensions, you can treat text to eliminate irrelevant characters and words;</li>
  <li>Matplotlib is an excellent option for text data visualization</li>
</ul>

<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="matplotlib" /><category term="textanalysis" /><summary type="html"><![CDATA[Learn text data visualization using NLTK and Matplotlib. Uncover word frequency trends in historical documents and draw impactful conclusions.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_07.png" /><media:content medium="image" url="http://localhost:4000/lesson_07.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What are the digital humanities?</title><link href="http://localhost:4000/2023/03/08/Digital-Humanities.html" rel="alternate" type="text/html" title="What are the digital humanities?" /><published>2023-03-08T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/03/08/Digital%20Humanities</id><content type="html" xml:base="http://localhost:4000/2023/03/08/Digital-Humanities.html"><![CDATA[<p><br /></p>

<p><strong>Digital Humanities are ‘the study and practice of using technology for humanities-based research, teaching and collaboration’</strong></p>

<p>Jana Remy</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="introduction-a-definition">Introduction: a definition</h1>
<p>Simply put, the digital humanities concern the research in humanities utilizing information technology. It is the application of computer-based technology in the humanities. <a href="https://en.wikipedia.org/wiki/Digital_humanities" target="_blank">Wikipedia</a> defines it as the intersection between computing and the disciplines of humanities. But, after all, what are humanities?</p>

<p><br /></p>

<h1 id="humanities-in-a-sentence">Humanities in a sentence</h1>
<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Humanities are the fields that study human culture and values, including all languages and literature, the arts, history, philosophy, and communications. See more in 
        
        <a href="https://www.britannica.com/topic/humanities" target="_blank"> Britannica.</a>
        
    </div>
</div>

<p><br /></p>

<h1 id="a-short-history">A short history</h1>
<p>In the second half of the 20th century, new technologies changed the world in unprecedented ways. Communication has become easier and faster and many kinds of tasks that could be organized as a set of instructions to a computer became extraordinarily faster.</p>

<p><br /></p>

<p>Moreover, new media formats made it possible to store large amounts of data. More recently, <a href="https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-the-cloud" target="_blank">the cloud</a> made storing terabytes of information an easy job. Information that was only available locally, to a restricted public, is now omnipresent. As expected, all these developments shaped the whole society and the way we see and study the world.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_06_01.jpeg" alt="Image showing computers generated by artificial intelligence " title="AI generated image" /></p>
<p class="fig-caption">Illustration created by Deep AI (deepai.org)</p>

<p><br /></p>

<p>In humanities, an obvious ramification of the digital revolution is that we have much more data available because of the rapid digitalization of our sources of study. For instance, <a href="https://www.oldbaileyonline.org/" target="_blank">the Old Bailey Online website</a> is a resource that gathered 197,745 criminal records from London central criminal court between 1674 and 1913.  Imagine a historian trying to analyze this data five decades ago! He would have had to visit physical archives and spend years searching for his sources. Nowadays, anyone having a smartphone and a connection to the Internet may search the database and get the data anywhere.</p>

<p><br /></p>

<p>Not only has access to data increased but also the tools to process it are now fascinating. The use of digital tools, like data science and machine learning, allows us to “mine” huge amounts of data, classify, visualize and draw insights from it.</p>

<p><br /></p>

<h1 id="research-on-humanities-and-social-sciences-in-the-digital-era">Research on humanities and social sciences in the digital era</h1>

<p>With all these advancements, the research in humanities and social sciences has also benefited a lot. In this <a href="https://programminghistorian.org/en/lessons/data-mining-the-internet-archive" target="_blank">article</a>, for example, Dr. McDaniel shows how to use Python to automate the download of historical data from the <a href="https://archive.org/" target="_blank">Internet Archive</a>. Python and R can also be used for <a href="https://python-textbook.pythonhumanities.com/04_topic_modeling/04_01_02_topic_modeling_concepts.html" target="_blank">topic modeling</a>, <a href="https://programminghistorian.org/en/lessons/temporal-network-analysis-with-r" target="_blank">temporal network analysis</a>, data visualization, and the application of statistical methods to learn about the relationship between variables.</p>

<p><br /></p>

<p>More recently, causal inference methods have been used to study historical events. <a href="https://kops.uni-konstanz.de/server/api/core/bitstreams/5804ca0a-4de3-4d90-89e7-166fc178bece/content" target="_blank">Munzert and Selb</a> study the impact of Hitler’s speeches on the number of votes his party received in the <em>Reichstag</em> elections before 1933.  The authors found very modest effects, challenging the importance of electoral campaigns.</p>

<p><br /></p>

<p><a href="https://economics.mit.edu/sites/default/files/publications/Comparative%20Politics%20and%20the%20Synthetic%20Control.pdf" target="_blank">Abadie and others</a> employ the synthetic control method to verify the economic impact of the German reunification in 1990. The authors found considerable negative effects of the reunification on West German income.</p>

<p><br /></p>

<p>There are many other articles that use data science and digital methods to study humanities, showing that digital humanities have a promising future. Moreover, it is a way of increasing diversity in humanities, since new perspectives arise on established topics. To learn more about digital methods applied in History, please consult <a href="https://programminghistorian.org/en/" target="_blank">Programming Historian</a>, an excellent and reliable resource for learning the tools for digital humanities.</p>

<p><br /></p>

<h1 id="and-what-about-social-data-science">And what about social data science?</h1>

<p>The boundaries between humanities and social sciences are not always well defined. Nevertheless, usually social sciences would be fields like economics, political science, and sociology. Social data science is analogous to digital humanities however, in this case,  digital tools are applied to social sciences. Thus, they share a lot of characteristics.</p>

<p><br /></p>

<h1 id="digital-humanities-and-social-data-science-programs">Digital Humanities and social data science programs</h1>

<p>Although the field is relatively young, there are many options for humanists willing to pursue a degree in digital humanities. Below you will learn about three options to have an idea of how these courses are structured and the skills they focus on.</p>

<p><br /></p>

<h2 id="cambridge-digital-humanities---mphil">Cambridge Digital Humanities - MPhil</h2>

<p>This one-year master’s program explores the application of digital approaches and methodology in humanities and how these innovations impact the way we study human culture and behavior. The master’s is suitable for people with a background in History, Archaeology, Literature, Linguistics, Art History, Economics, Computer Science, etc.</p>

<p><br /></p>

<p>During the course, students will learn about data formats, like XML and JSON, and programming languages, especially Python, <a href="https://developer.mozilla.org/en-US/docs/Web/XSLT" target="_blank">XSLT</a>, and <a href="https://en.wikipedia.org/wiki/SQL" target="_blank">SQL</a>. Moreover, students will get in contact with previous applications of digital humanities, analyze them and learn about each digital tool employed in that application. Visit the <a href="https://www.cdh.cam.ac.uk/mphil/#2-video" target="_blank">Cambridge Digital Humanities</a> to read more about this program.</p>

<p><br /></p>

<h2 id="ma-in-digital-studies---the-university-of-chicago">MA in Digital Studies - The University of Chicago</h2>

<p>This program prepares students to apply computational methods in humanities and social sciences. It combines writing,  critical and analytical thinking with computational skills. Python is the language chosen to initiate students in programming. Data visualization, data analysis, and machine learning are the core courses of this master’s.</p>

<p><br /></p>

<p>Data management for humanities emphasizes the representation and management of data types and formats encountered in the humanities. One highlight is that this course offers a course on publishing data on web applications employing HTML5, CSS, and JavaScript. To know more, visit <a href="https://digitalstudies.uchicago.edu/" target="_blank">the course’s page</a>.</p>

<p><br /></p>

<h2 id="social-data-science-minor---ucla">Social Data Science Minor - UCLA</h2>

<p>The Social Data Science minor seeks to provide a solid background in data science for students majoring in social sciences. According to UCLA Professor Mark Handcock, the course aims at better preparing social scientists who will work in a data-filled world. Handcock highlights that the minor will focus on the types of data social scientists work with.</p>

<p><br /></p>

<p>Students willing to pursue this degree must first complete preparatory courses in introduction to statistical reasoning, introduction to statistical programming in R, and linear algebra. Later on in the course, students will deepen their skills in data analysis, regression, experiment design and analysis, statistical models, data mining, and the societal impacts of data. To know more about the course, check the <a href="http://statistics.ucla.edu/undergraduate/social-data-science-minor/" target="_blank">UCLA website</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusion">Conclusion</h1>

<p>Digital humanities expanded the frontiers of the study of humans, their cultures, and societies. Computational methods, rather than intruders, are a renewal and expansion of the field. The job market for digital humanities is growing and promising and the computational skills learned in digital humanities are as valuable as never before.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="sources">Sources</h1>

<ul class="conclusion-list">
  <li><a href="http://webhost.bridgew.edu/edubinsky/DH/definition.html" target="_blank">Why digital humanities?</a></li>
  <li><a href="https://www.thebritishacademy.ac.uk/blog/what-are-digital-humanities/" target="_blank">What are the Digital Humanities?</a></li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>]]></content><author><name>Bruno Ponne</name></author><category term="socialdatascience" /><category term="digitalhumanities" /><summary type="html"><![CDATA[Learn what are the digital humanities and their application in research on humanities and social science.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_06.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_06.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Changing ggplot colors with scale_color_brewer</title><link href="http://localhost:4000/2023/02/22/Military-Expenses.html" rel="alternate" type="text/html" title="Changing ggplot colors with scale_color_brewer" /><published>2023-02-22T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/02/22/Military%20Expenses</id><content type="html" xml:base="http://localhost:4000/2023/02/22/Military-Expenses.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘War is over, if you want it, war is over, now’</strong></p>

<p>John Lennon</p>

<p><br />
Ever visited a webpage with clashing colors or poor text contrast? You’re not alone! Choosing the perfect color palette for data visualizations can be complex.</p>

<p><br /></p>

<p>Fortunately R offers you several libraries made by professional designers that offer excellent color palettes for you. In this lesson, you will learn about one of these libraries, the RColorBrewer package.  To make things more interesting, we’ll use data from the military expenses of leading capitalist countries during the Cold War era. Let’s paint your data story!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available on the <a href="https://databank.worldbank.org/home" target="_blank">World Bank</a> website.</p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-change-colors-in-ggplot-with-rcolorbrewer">Coding the past: change colors in ggplot with RColorBrewer</h1>

<h2 id="1-importing-data-into-r">1. Importing data into R</h2>

<p><br />
Download the <a href="http://localhost:4000/assets/data/military.csv">data file here</a> and load the libraries we will need, according to the code below. To read the data, use the R function <code class="language-plaintext highlighter-rouge">read_csv()</code>. Additionally, we are only interested in the five first rows and in columns 3 and 5 to 36. They are selected with <code class="language-plaintext highlighter-rouge">[1:5, c(3, 5:36)]</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-1">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">readr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RColorBrewer</span><span class="p">)</span><span class="w">

</span><span class="n">military</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_csv</span><span class="p">(</span><span class="s1">'military.csv'</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="o">:</span><span class="m">36</span><span class="p">)]</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-how-to-use-pivot_longer">2. How to use pivot_longer?</h2>

<p><br /></p>

<p>If you take a look at the dataframe you just loaded, you will see that it has one column for each year. To use ggplot your data has to be tidy. According to Hadley Wickham, in a tidy dataframe:</p>

<p><br /></p>

<ol class="conclusion-list">
  <li>Each variable must have its own column;</li>
  <li>Each observation must have its own row;</li>
  <li>Each value must have its own cell;</li>
</ol>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> Learn more about tidy data and how to transform a dataframe from wide to long format 
        
        <a href="https://r4ds.had.co.nz/tidy-data.html" target="_blank"> here.</a>
        
    </div>
</div>

<p><br /></p>

<p>To make our data tidy, we will transform all the year columns in one variable called “year” and we will also transfer the values contained in these columns to a single new variable called “expense”. Note the syntax of the <code class="language-plaintext highlighter-rouge">pivot_longer</code> function. The first argument is the dataframe we want to transform, the second are the columns we would like to treat. Finally, <code class="language-plaintext highlighter-rouge">names_to</code> indicates the name of the new column that will receive the years and <code class="language-plaintext highlighter-rouge">values_to</code> indicates the name of the new column that will receive the values of the year columns.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_05_01.png" alt="Conversion of an R dataframe from wide to long format with pivot_longer" title="Image" /></p>
<p class="fig-caption">Illustration created by the Author</p>

<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">mutate</code> function makes two adjustments in the new long dataset. First, it eliminates the second part of the year names, e.g., <code class="language-plaintext highlighter-rouge">[YR1960]</code>. Second, it rounds the expenses values to two decimal places.</p>

<p><br /></p>

<p>Finally, we change the names of the columns (variables) in our dataset.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-2">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">military_long</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">military</span><span class="p">,</span><span class="w"> 
                              </span><span class="s1">'1960 [YR1960]'</span><span class="o">:</span><span class="s1">'1991 [YR1991]'</span><span class="p">,</span><span class="w"> 
                              </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'year'</span><span class="p">,</span><span class="w"> 
                              </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'expense'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">substr</span><span class="p">(</span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">),</span><span class="w"> </span><span class="n">expense</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">

</span><span class="nf">names</span><span class="p">(</span><span class="n">military_long</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'country'</span><span class="p">,</span><span class="w"> </span><span class="s1">'year'</span><span class="p">,</span><span class="w"> </span><span class="s1">'expense'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-using-scale_color_brewer-to-improve-your-plots-colors">3. Using scale_color_brewer to improve your plots’ colors</h2>

<p><br /></p>

<p>To see all the colors palettes the RColorBrewer offers, use the following code:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-3">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">par</span><span class="p">(</span><span class="n">mar</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">display.brewer.all</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_05_02.png" alt="RColorBrewer available palettes" /></p>

<p><br /></p>

<p><br /></p>

<p>We will be using palette <code class="language-plaintext highlighter-rouge">Set1</code> in our line plot. To set it, add the layer <code class="language-plaintext highlighter-rouge">scale_color_brewer(palette = 'Set1')</code>. <strong>Note</strong> that we also set the x-axis to have labels every 4 years with <code class="language-plaintext highlighter-rouge">scale_x_discrete(breaks = seq(1960, 1990, by=4))</code>. Color  and group aesthetics were mapped to countries so that each country has a different color.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-4">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">military_long</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_x_discrete</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">1960</span><span class="p">,</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="o">=</span><span class="m">4</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Set1'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Year'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s1">'Military expenditure (% of GDP)'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Military Expenses of the Main Capitalist Economies'</span><span class="p">,</span><span class="w">
          </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'1960 - 1991'</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_05_03.png" alt="plot using RColorBrewer palette" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-adding-a-theme-to-the-plot">4. Adding a theme to the plot</h2>

<p><br />
To customize our plot, we will use the ggplot theme developed in the lesson <a href="/2023/01/24/Historical-Weather-Data.html">‘Climate data visualization’</a>. Small adjustments were made to adapt the theme to this plot. For instance, the legend position was set to be at the bottom of the plot and its title was deleted.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-5-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-5-5">

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">military_long</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">expense</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">,</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">country</span><span class="p">))</span><span class="o">+</span><span class="w">
</span><span class="n">geom_line</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">+</span><span class="w">
</span><span class="n">scale_x_discrete</span><span class="p">(</span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">1960</span><span class="p">,</span><span class="w"> </span><span class="m">1990</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="o">=</span><span class="m">4</span><span class="p">))</span><span class="o">+</span><span class="w">
</span><span class="n">scale_color_brewer</span><span class="p">(</span><span class="n">palette</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Set1'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Year'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="s1">'Military expenditure (% of GDP)'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'Military Expenses of the Main Capitalist Economies'</span><span class="p">,</span><span class="w">
          </span><span class="n">subtitle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'1960 - 1991'</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
  </span><span class="n">guides</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s1">''</span><span class="p">))</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes panel, plot and legend background to dark gray:</span><span class="w">
            </span><span class="n">panel.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">plot.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'#2E3031'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes legend texts color to white:</span><span class="w">
            </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes color of plot border to white:</span><span class="w">
            </span><span class="n">panel.border</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_rect</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Eliminates grids:</span><span class="w">
            </span><span class="n">panel.grid.minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
            </span><span class="n">panel.grid.major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
            </span><span class="c1"># Changes color of axis texts to white</span><span class="w">
            </span><span class="n">axis.text.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.text.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.title.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.title.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="c1"># Changes axis ticks color to white</span><span class="w">
            </span><span class="n">axis.ticks.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">axis.ticks.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_line</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'white'</span><span class="p">),</span><span class="w">
            </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"bottom"</span><span class="p">)</span></code></pre></figure>


</div>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_05_04.png" alt="Plot with new theme and color selected with scale_color_brewer" /></p>

<p><br /></p>

<p>Feel free to test other color palettes and check the one you like the most!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>You can transform your dataframe from wide to long format using <code class="language-plaintext highlighter-rouge">pivot_longer</code>;</li>
  <li>RColorBrewer offers color palettes to make your plots more effective and beautiful.</li>
</ul>
<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="r" /><category term="ggplot2" /><summary type="html"><![CDATA[A step-by-step guide on how to use RColorBrewer and scale_color_brewer in ggplot2 demonstrated with historical military expense data.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_05.jpeg" /><media:content medium="image" url="http://localhost:4000/lesson_05.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Storytelling with Matplotlib - Visualizing historical data</title><link href="http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html" rel="alternate" type="text/html" title="Storytelling with Matplotlib - Visualizing historical data" /><published>2023-02-11T00:00:00-03:00</published><updated>2023-09-02T00:00:00-03:00</updated><id>http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations</id><content type="html" xml:base="http://localhost:4000/2023/02/11/Use-Matplotlib-line-plot-to-create-visualizations.html"><![CDATA[<p><br /></p>

<h1 id="introduction">Introduction</h1>

<p><br /></p>

<p><strong>‘Crafting clean and clear plots is akin to writing poetry; every line should convey meaning, every shade should tell a story.’</strong></p>

<p>ChatGPT (adapted)</p>

<p><br /></p>

<p>Dive into this guide to create effective visualizations using Matplotlib, and journey through the GDP per capita trends of Germany and the USA during the pivotal 1929 crisis. Check out in the figure below how you will transform a basic plot into an informative and compelling visualization. Let’s get started!</p>

<p><br /></p>

<p class="larger"><img src="/assets/images/lesson_01_01a.png" alt="preview of final plot" /></p>

<p><br /></p>

<p>If you would like to know more about the 1929 crisis, <a href="https://www.britannica.com/event/Great-Depression" target="_blank">check this out</a>.</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="data-source">Data source</h1>

<p>Data used in this lesson is available at <a href="https://www.hbs.edu/businesshistory/courses/teaching-resources/historical-data-visualization/details?data_id=27" target="_blank">Harvard Business School</a></p>

<div class="text-note">
    <span class="material-symbols-outlined">
        tips_and_updates
    </span>
    <span class="text-note-title">&nbsp; </span> 
    <div class="text-note-content"> GDP is given in 1990 International Geary-Khamis dollars. To learn more about this unit, see this
        
        <a href="https://en.wikipedia.org/wiki/International_dollar" target="_blank"> link.</a>
        
    </div>
</div>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="coding-the-past-beautiful-visualizations-with-matplotlib">Coding the past: beautiful visualizations with Matplotlib</h1>

<h2 id="1-matplotlib-subplots">1. Matplotlib subplots</h2>

<p><br /></p>

<p>Matplotlib is a Python library aimed at creating visualizations. It has a good interface with pandas dataframes, which makes it very practical to use. Matplotlib is the base library for other visualization libraries, like Seaborn.</p>

<p><br />
Before diving in, keep in mind these concepts:</p>

<ul class="conclusion-list">
  <li>Class: Think of it as a blueprint for creating objects.</li>
  <li>Object: An instance of a class; for visualization, this could be a specific plot.</li>
  <li>Method: A function that operates on an object’s data.</li>
</ul>

<p><br /></p>

<p>There are many ways you can use Matplotlib, but in order to be able to customize your plot, it is recommended to use the Matplotlib <code class="language-plaintext highlighter-rouge">subplots()</code> method. It creates two objects: one object of the class <em>Figure</em>, usually called <em>fig</em> and one object of the class <em>Axes</em>, usually called <em>ax</em>. The former is a sort of container where your plot will be created. The latter is the plot itself. Note that the <em>Axes</em> object is contained in the <em>Figure</em> object. Refer to the <a href="https://matplotlib.org/stable/tutorials/introductory/quick_start.html" target="_blank">Matplotlib documentation</a> for further details.</p>

<p><br /></p>

<p><img src="/assets/images/lesson_01_01.png" alt="Matplotlib objects" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-loading-the-data-with-read_csv">2. Loading the data with read_csv</h2>

<p><br />
Download the <a href="http://localhost:4000/assets/data/gdp_prepared.csv">data file here</a>. To read the data, use the pandas method <code class="language-plaintext highlighter-rouge">pd.read_csv()</code>, which takes 3 parameters. The first is the file path. The second is <code class="language-plaintext highlighter-rouge">index_col</code> and it tells pandas which column should be the index of the data frame. Finally, <code class="language-plaintext highlighter-rouge">parse_dates</code> set to True converts the index into date format. In the code below, data is loaded and one dataframe is created for each country with the pandas method <code class="language-plaintext highlighter-rouge">loc</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-1')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-1">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">data_path</span> <span class="o">=</span> <span class="s">"/content/drive/MyDrive/historical_data/gdp_prepared.csv"</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span>   
                 <span class="n">index_col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>  
                 <span class="n">parse_dates</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>  

<span class="n">ger</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">"country"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"Germany"</span><span class="p">]</span>
<span class="n">usa</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">"country"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"United States of America"</span><span class="p">]</span></code></pre></figure>

</div>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="2-matplotlib-basic-plot">2. Matplotlib basic plot</h2>

<p><br />
Although in this lesson our fig object will have only one plot, it might have more. Most of the customization will be made through <em>ax</em> methods. To start we will call the ax method <code class="language-plaintext highlighter-rouge">plot()</code> twice to create our plots. Note that <code class="language-plaintext highlighter-rouge">plot()</code>’s first argument contains the dates and is plotted on the x axis while the second, containing the GDP, is plotted on the y axis. Finally, we show the plot.</p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-2')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-2">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_02.png" alt="First version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="3-restricting-time-span">3. Restricting time span</h2>

<p><br /></p>

<p>One important aspect to consider when you tell a story with a plot is what you would like to highlight. In this plot, we want to highlight the effect of the 1929 crisis on GDP per capita rather than the effect of the Second or First World War. Thus, let us restrict our time span to the period 1920/1938. Note that when your index is a date you can use pandas <code class="language-plaintext highlighter-rouge">loc</code> to specify a certain period of the data:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-3')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-3">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ger</span> <span class="o">=</span> <span class="n">ger</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"1920-01-01"</span><span class="p">:</span><span class="s">"1938-01-01"</span><span class="p">]</span>
<span class="n">usa</span> <span class="o">=</span> <span class="n">usa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"1920-01-01"</span><span class="p">:</span><span class="s">"1938-01-01"</span><span class="p">]</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_03.png" alt="Second version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="4-adding-a-matplotlib-legend">4. Adding a Matplotlib legend</h2>

<p><br /></p>

<p>To add a legend, first you have to label each of the line plots and then call the <code class="language-plaintext highlighter-rouge">legend()</code> method of <em>ax</em>. Quite intuitive, right?</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-4')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-4">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
<span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_04.png" alt="Third version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="5-adding-a-title-and-and-labels-to-matplotlib-axes">5. Adding a title and and labels to matplotlib axes</h2>

<p><br /></p>

<p>There are three methods of <em>ax</em> to set title and labels. They start with <em>set</em> followed by the title or label they set: <code class="language-plaintext highlighter-rouge">set_xlabel</code>, <code class="language-plaintext highlighter-rouge">set_ylabel</code>, <code class="language-plaintext highlighter-rouge">set_title</code>.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-5')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-5">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_05.png" alt="Fourth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="6-changing-line-colors">6. Changing line colors</h2>

<p><br />
One way of creating your own color palette is with a Python list containing the colors you would like to use. <a href="https://colorbrewer2.org/" target="_blank">This page</a> has smart recommendations on the use of colors. In this case, a diverging color was chosen to distinguish between the two countries. Color is an argument of <code class="language-plaintext highlighter-rouge">plot()</code> and colors are selected by the list index.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-6')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-6">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_06.png" alt="Fifth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="7-highligthing-areas-and-elements-with-axvspan">7. Highligthing areas and elements with axvspan</h2>

<p><br /></p>

<p>In this step, we start by increasing the line width of both trends to 3. After that, we would like to highlight the period of crisis. For that we use the method <code class="language-plaintext highlighter-rouge">axvspan(xmin, xmax, ymin=0, ymax=1, ...)</code> in which we specify the start and end date of the desired period. The y axis is not specified because, by default, the highlighted area goes from zero to the maximum value of y. <code class="language-plaintext highlighter-rouge">alpha</code> adds a degree of transparency to the region highlighted.</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-7')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-7">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span>
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvspan</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1929-01-01"</span><span class="p">),</span> 
           <span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1932-10-01"</span><span class="p">),</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> 
           <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>


</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_07.png" alt="Sixth version of the plot" /></p>

<p><br /></p>

<p><br /></p>

<hr />

<p><br /></p>

<h2 id="8-eliminating-the-frame-of-matplotlib-legend">8. Eliminating the frame of matplotlib legend</h2>

<p><br /></p>

<p>Edward Tufte, an expert in the field of data visualization, introduced the concept of data-ink ratio in the book <em>The Visual Display of Quantitative Information</em>. Data-ink ratio is the proportion of ink in a plot used to display non-redundant data. The author recommends maximizing this ratio as much as possible to make your plot clearer and to avoid distracting your reader.</p>

<p><br /></p>

\[data \: ink \: ratio = {data \: ink  \over total \:ink}\]

<p><br /></p>

<p>In order to improve our data-ink ratio, we will eliminate the legend frame. This can be done by setting <code class="language-plaintext highlighter-rouge">framon</code> parameter to false inside the <code class="language-plaintext highlighter-rouge">legend()</code> method.</p>

<p><br /></p>

<p>The frame around the plot is made by objects of the class <em>Spine</em>. Print <code class="language-plaintext highlighter-rouge">ax.spines</code> and note that you have 4 spines (left, right, bottom, top). It would be nice to have this frame in a lighter color so that it does not call so much attention. This can be done by the <code class="language-plaintext highlighter-rouge">set_edgecolor()</code> method . To set all of them to the same color, we can iterate them in <code class="language-plaintext highlighter-rouge">ax.spines.values()</code> and set one by one to light gray:</p>

<p><br /></p>

<p><span class="material-symbols-outlined" id="copy-button" onclick="copyCode('code-1-8')">
  content_copy
  <span class="tooltiptext">Copy</span>
</span></p>

<div id="code-1-8">

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">my_palette</span> <span class="o">=</span> <span class="p">[</span><span class="s">"#C84848"</span><span class="p">,</span> <span class="s">"#2E3031"</span><span class="p">,</span> <span class="s">"#FEE090"</span><span class="p">,</span> <span class="s">"#d3d3d3"</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ger</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> 
        <span class="n">ger</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span> 
        <span class="n">label</span> <span class="o">=</span> <span class="s">"Germany"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">usa</span><span class="p">.</span><span class="n">index</span><span class="p">,</span>
        <span class="n">usa</span><span class="p">[</span><span class="s">"gdp_pc"</span><span class="p">],</span>
        <span class="n">label</span> <span class="o">=</span> <span class="s">"USA"</span><span class="p">,</span> 
        <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
        <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">frameon</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Year"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"GDP per capita"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"GDP per capita during the Wall Street Crash of 1929"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvspan</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1929-01-01"</span><span class="p">),</span> 
           <span class="n">pd</span><span class="p">.</span><span class="n">Timestamp</span><span class="p">(</span><span class="s">"1932-10-01"</span><span class="p">),</span> 
           <span class="n">color</span> <span class="o">=</span> <span class="n">my_palette</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> 
           <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>

<span class="k">for</span> <span class="n">spine</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
    <span class="n">spine</span><span class="p">.</span><span class="n">set_edgecolor</span><span class="p">(</span><span class="n">my_palette</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

</div>

<p><br /></p>

<p><img src="/assets/images/lesson_01_09.png" alt="Seventh version of the plot" /></p>

<p><br /></p>

<p>Found this guide helpful? Have suggestions or questions? Leave a comment below and join the discussion!</p>

<p><br /></p>

<hr />

<p><br /></p>

<h1 id="conclusions">Conclusions</h1>

<ul class="conclusion-list">
  <li>To customize your plot, use Matplotlib method <code class="language-plaintext highlighter-rouge">subplots()</code>;</li>
  <li><code class="language-plaintext highlighter-rouge">Subplots()</code> creates two objects: one of the class <em>Figure</em>, usually called fig and one of the class <em>Axes</em>, usually called ax;</li>
  <li>Use <em>Axes</em> methods to shape your plot according to your needs.</li>
</ul>
<p><br /></p>

<hr />]]></content><author><name>Bruno Ponne</name></author><category term="python" /><category term="matplotlib" /><summary type="html"><![CDATA[Master data visualization using Matplotlib - Use historical GDP data, spotlight the 1929 crisis with axvspan, and craft compelling visuals with Matplotlib subplots.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/lesson_01.png" /><media:content medium="image" url="http://localhost:4000/lesson_01.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>